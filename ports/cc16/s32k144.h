//
// AUTOMATICALLY GENERATED BY svd2cpp.py - DO NOT EDIT
//
// vendor      : NXP
// name        : S32K144
// version     : 1.6
// description : S32K144 NXP Microcontroller
//

#pragma once

typedef enum {
    Reset_IRQn                     = -15,
    NonMaskableInt_IRQn            = -14,
    HardFault_IRQn                 = -13,
    MemoryManagement_IRQn          = -12,
    BusFault_IRQn                  = -11,
    UsageFault_IRQn                = -10,
    SVCall_IRQn                    =  -5,
    DebugMonitor_IRQn              =  -4,
    PendSV_IRQn                    =  -2,
    SysTick_IRQn                   =  -1,
    DMA0_IRQn                      = 0,
    DMA1_IRQn                      = 1,
    DMA2_IRQn                      = 2,
    DMA3_IRQn                      = 3,
    DMA4_IRQn                      = 4,
    DMA5_IRQn                      = 5,
    DMA6_IRQn                      = 6,
    DMA7_IRQn                      = 7,
    DMA8_IRQn                      = 8,
    DMA9_IRQn                      = 9,
    DMA10_IRQn                     = 10,
    DMA11_IRQn                     = 11,
    DMA12_IRQn                     = 12,
    DMA13_IRQn                     = 13,
    DMA14_IRQn                     = 14,
    DMA15_IRQn                     = 15,
    DMA_Error_IRQn                 = 16,
    MCM_IRQn                       = 17,
    FTFC_IRQn                      = 18,
    Read_Collision_IRQn            = 19,
    LVD_LVW_IRQn                   = 20,
    FTFC_Fault_IRQn                = 21,
    WDOG_EWM_IRQn                  = 22,
    RCM_IRQn                       = 23,
    LPI2C0_Master_IRQn             = 24,
    LPI2C0_Slave_IRQn              = 25,
    LPSPI0_IRQn                    = 26,
    LPSPI1_IRQn                    = 27,
    LPSPI2_IRQn                    = 28,
    LPUART0_RxTx_IRQn              = 31,
    LPUART1_RxTx_IRQn              = 33,
    LPUART2_RxTx_IRQn              = 35,
    ADC0_IRQn                      = 39,
    ADC1_IRQn                      = 40,
    CMP0_IRQn                      = 41,
    ERM_single_fault_IRQn          = 44,
    ERM_double_fault_IRQn          = 45,
    RTC_IRQn                       = 46,
    RTC_Seconds_IRQn               = 47,
    LPIT0_Ch0_IRQn                 = 48,
    LPIT0_Ch1_IRQn                 = 49,
    LPIT0_Ch2_IRQn                 = 50,
    LPIT0_Ch3_IRQn                 = 51,
    PDB0_IRQn                      = 52,
    SCG_IRQn                       = 57,
    LPTMR0_IRQn                    = 58,
    PORTA_IRQn                     = 59,
    PORTB_IRQn                     = 60,
    PORTC_IRQn                     = 61,
    PORTD_IRQn                     = 62,
    PORTE_IRQn                     = 63,
    SWI_IRQn                       = 64,
    PDB1_IRQn                      = 68,
    FLEXIO_IRQn                    = 69,
    CAN0_ORed_IRQn                 = 78,
    CAN0_Error_IRQn                = 79,
    CAN0_Wake_Up_IRQn              = 80,
    CAN0_ORed_0_15_MB_IRQn         = 81,
    CAN0_ORed_16_31_MB_IRQn        = 82,
    CAN1_ORed_IRQn                 = 85,
    CAN1_Error_IRQn                = 86,
    CAN1_ORed_0_15_MB_IRQn         = 88,
    CAN2_ORed_IRQn                 = 92,
    CAN2_Error_IRQn                = 93,
    CAN2_ORed_0_15_MB_IRQn         = 95,
    FTM0_Ch0_Ch1_IRQn              = 99,
    FTM0_Ch2_Ch3_IRQn              = 100,
    FTM0_Ch4_Ch5_IRQn              = 101,
    FTM0_Ch6_Ch7_IRQn              = 102,
    FTM0_Fault_IRQn                = 103,
    FTM0_Ovf_Reload_IRQn           = 104,
    FTM1_Ch0_Ch1_IRQn              = 105,
    FTM1_Ch2_Ch3_IRQn              = 106,
    FTM1_Ch4_Ch5_IRQn              = 107,
    FTM1_Ch6_Ch7_IRQn              = 108,
    FTM1_Fault_IRQn                = 109,
    FTM1_Ovf_Reload_IRQn           = 110,
    FTM2_Ch0_Ch1_IRQn              = 111,
    FTM2_Ch2_Ch3_IRQn              = 112,
    FTM2_Ch4_Ch5_IRQn              = 113,
    FTM2_Ch6_Ch7_IRQn              = 114,
    FTM2_Fault_IRQn                = 115,
    FTM2_Ovf_Reload_IRQn           = 116,
    FTM3_Ch0_Ch1_IRQn              = 117,
    FTM3_Ch2_Ch3_IRQn              = 118,
    FTM3_Ch4_Ch5_IRQn              = 119,
    FTM3_Ch6_Ch7_IRQn              = 120,
    FTM3_Fault_IRQn                = 121,
    FTM3_Ovf_Reload_IRQn           = 122,
} IRQn_Type;

#define __CM4_REV               0x0001U
#define __NVIC_PRIO_BITS        4
#define __Vendor_SysTickConfig  0
#define __MPU_PRESENT           0
#define __FPU_PRESENT           1

#include <core_cm4.h>
                                                                        // --------------------
                                                                        // CSE_PRAM
typedef struct                                                          // --------------------
{
    uint32_t             _EmbeddedRAM0;                                 // CSE PRAM 0 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM0_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM0_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM0_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM0_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM0_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM0_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM0_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM0_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM0_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM0_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM0_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM0_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM0LL;                               // CSE PRAM0LL register.
    uint8_t              _EmbeddedRAM0LU;                               // CSE PRAM0LU register.
    uint8_t              _EmbeddedRAM0HL;                               // CSE PRAM0HL register.
    uint8_t              _EmbeddedRAM0HU;                               // CSE PRAM0HU register.
    uint32_t             _EmbeddedRAM1;                                 // CSE PRAM 1 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM1_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM1_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM1_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM1_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM1_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM1_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM1_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM1_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM1_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM1_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM1_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM1_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM1LL;                               // CSE PRAM1LL register.
    uint8_t              _EmbeddedRAM1LU;                               // CSE PRAM1LU register.
    uint8_t              _EmbeddedRAM1HL;                               // CSE PRAM1HL register.
    uint8_t              _EmbeddedRAM1HU;                               // CSE PRAM1HU register.
    uint32_t             _EmbeddedRAM2;                                 // CSE PRAM 2 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM2_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM2_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM2_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM2_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM2_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM2_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM2_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM2_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM2_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM2_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM2_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM2_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM2LL;                               // CSE PRAM2LL register.
    uint8_t              _EmbeddedRAM2LU;                               // CSE PRAM2LU register.
    uint8_t              _EmbeddedRAM2HL;                               // CSE PRAM2HL register.
    uint8_t              _EmbeddedRAM2HU;                               // CSE PRAM2HU register.
    uint32_t             _EmbeddedRAM3;                                 // CSE PRAM 3 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM3_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM3_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM3_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM3_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM3_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM3_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM3_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM3_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM3_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM3_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM3_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM3_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM3LL;                               // CSE PRAM3LL register.
    uint8_t              _EmbeddedRAM3LU;                               // CSE PRAM3LU register.
    uint8_t              _EmbeddedRAM3HL;                               // CSE PRAM3HL register.
    uint8_t              _EmbeddedRAM3HU;                               // CSE PRAM3HU register.
    uint32_t             _EmbeddedRAM4;                                 // CSE PRAM 4 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM4_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM4_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM4_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM4_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM4_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM4_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM4_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM4_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM4_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM4_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM4_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM4_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM4LL;                               // CSE PRAM4LL register.
    uint8_t              _EmbeddedRAM4LU;                               // CSE PRAM4LU register.
    uint8_t              _EmbeddedRAM4HL;                               // CSE PRAM4HL register.
    uint8_t              _EmbeddedRAM4HU;                               // CSE PRAM4HU register.
    uint32_t             _EmbeddedRAM5;                                 // CSE PRAM 5 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM5_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM5_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM5_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM5_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM5_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM5_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM5_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM5_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM5_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM5_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM5_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM5_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM5LL;                               // CSE PRAM5LL register.
    uint8_t              _EmbeddedRAM5LU;                               // CSE PRAM5LU register.
    uint8_t              _EmbeddedRAM5HL;                               // CSE PRAM5HL register.
    uint8_t              _EmbeddedRAM5HU;                               // CSE PRAM5HU register.
    uint32_t             _EmbeddedRAM6;                                 // CSE PRAM 6 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM6_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM6_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM6_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM6_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM6_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM6_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM6_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM6_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM6_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM6_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM6_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM6_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM6LL;                               // CSE PRAM6LL register.
    uint8_t              _EmbeddedRAM6LU;                               // CSE PRAM6LU register.
    uint8_t              _EmbeddedRAM6HL;                               // CSE PRAM6HL register.
    uint8_t              _EmbeddedRAM6HU;                               // CSE PRAM6HU register.
    uint32_t             _EmbeddedRAM7;                                 // CSE PRAM 7 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM7_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM7_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM7_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM7_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM7_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM7_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM7_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM7_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM7_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM7_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM7_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM7_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM7LL;                               // CSE PRAM7LL register.
    uint8_t              _EmbeddedRAM7LU;                               // CSE PRAM7LU register.
    uint8_t              _EmbeddedRAM7HL;                               // CSE PRAM7HL register.
    uint8_t              _EmbeddedRAM7HU;                               // CSE PRAM7HU register.
    uint32_t             _EmbeddedRAM8;                                 // CSE PRAM 8 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM8_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM8_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM8_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM8_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM8_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM8_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM8_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM8_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM8_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM8_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM8_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM8_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM8LL;                               // CSE PRAM8LL register.
    uint8_t              _EmbeddedRAM8LU;                               // CSE PRAM8LU register.
    uint8_t              _EmbeddedRAM8HL;                               // CSE PRAM8HL register.
    uint8_t              _EmbeddedRAM8HU;                               // CSE PRAM8HU register.
    uint32_t             _EmbeddedRAM9;                                 // CSE PRAM 9 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM9_BYTE_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM9_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM9_BYTE_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM9_BYTE_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM9_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM9_BYTE_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM9_BYTE_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM9_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM9_BYTE_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM9_BYTE_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM9_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM9_BYTE_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM9LL;                               // CSE PRAM9LL register.
    uint8_t              _EmbeddedRAM9LU;                               // CSE PRAM9LU register.
    uint8_t              _EmbeddedRAM9HL;                               // CSE PRAM9HL register.
    uint8_t              _EmbeddedRAM9HU;                               // CSE PRAM9HU register.
    uint32_t             _EmbeddedRAM10;                                // CSE PRAM 10 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM10_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM10_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM10_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM10_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM10_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM10_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM10_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM10_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM10_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM10_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM10_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM10_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM10LL;                              // CSE PRAM10LL register.
    uint8_t              _EmbeddedRAM10LU;                              // CSE PRAM10LU register.
    uint8_t              _EmbeddedRAM10HL;                              // CSE PRAM10HL register.
    uint8_t              _EmbeddedRAM10HU;                              // CSE PRAM10HU register.
    uint32_t             _EmbeddedRAM11;                                // CSE PRAM 11 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM11_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM11_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM11_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM11_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM11_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM11_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM11_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM11_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM11_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM11_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM11_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM11_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM11LL;                              // CSE PRAM11LL register.
    uint8_t              _EmbeddedRAM11LU;                              // CSE PRAM11LU register.
    uint8_t              _EmbeddedRAM11HL;                              // CSE PRAM11HL register.
    uint8_t              _EmbeddedRAM11HU;                              // CSE PRAM11HU register.
    uint32_t             _EmbeddedRAM12;                                // CSE PRAM 12 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM12_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM12_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM12_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM12_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM12_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM12_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM12_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM12_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM12_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM12_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM12_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM12_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM12LL;                              // CSE PRAM12LL register.
    uint8_t              _EmbeddedRAM12LU;                              // CSE PRAM12LU register.
    uint8_t              _EmbeddedRAM12HL;                              // CSE PRAM12HL register.
    uint8_t              _EmbeddedRAM12HU;                              // CSE PRAM12HU register.
    uint32_t             _EmbeddedRAM13;                                // CSE PRAM 13 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM13_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM13_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM13_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM13_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM13_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM13_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM13_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM13_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM13_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM13_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM13_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM13_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM13LL;                              // CSE PRAM13LL register.
    uint8_t              _EmbeddedRAM13LU;                              // CSE PRAM13LU register.
    uint8_t              _EmbeddedRAM13HL;                              // CSE PRAM13HL register.
    uint8_t              _EmbeddedRAM13HU;                              // CSE PRAM13HU register.
    uint32_t             _EmbeddedRAM14;                                // CSE PRAM 14 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM14_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM14_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM14_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM14_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM14_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM14_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM14_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM14_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM14_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM14_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM14_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM14_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM14LL;                              // CSE PRAM14LL register.
    uint8_t              _EmbeddedRAM14LU;                              // CSE PRAM14LU register.
    uint8_t              _EmbeddedRAM14HL;                              // CSE PRAM14HL register.
    uint8_t              _EmbeddedRAM14HU;                              // CSE PRAM14HU register.
    uint32_t             _EmbeddedRAM15;                                // CSE PRAM 15 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM15_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM15_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM15_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM15_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM15_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM15_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM15_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM15_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM15_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM15_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM15_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM15_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM15LL;                              // CSE PRAM15LL register.
    uint8_t              _EmbeddedRAM15LU;                              // CSE PRAM15LU register.
    uint8_t              _EmbeddedRAM15HL;                              // CSE PRAM15HL register.
    uint8_t              _EmbeddedRAM15HU;                              // CSE PRAM15HU register.
    uint32_t             _EmbeddedRAM16;                                // CSE PRAM 16 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM16_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM16_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM16_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM16_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM16_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM16_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM16_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM16_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM16_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM16_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM16_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM16_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM16LL;                              // CSE PRAM16LL register.
    uint8_t              _EmbeddedRAM16LU;                              // CSE PRAM16LU register.
    uint8_t              _EmbeddedRAM16HL;                              // CSE PRAM16HL register.
    uint8_t              _EmbeddedRAM16HU;                              // CSE PRAM16HU register.
    uint32_t             _EmbeddedRAM17;                                // CSE PRAM 17 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM17_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM17_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM17_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM17_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM17_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM17_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM17_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM17_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM17_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM17_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM17_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM17_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM17LL;                              // CSE PRAM17LL register.
    uint8_t              _EmbeddedRAM17LU;                              // CSE PRAM17LU register.
    uint8_t              _EmbeddedRAM17HL;                              // CSE PRAM17HL register.
    uint8_t              _EmbeddedRAM17HU;                              // CSE PRAM17HU register.
    uint32_t             _EmbeddedRAM18;                                // CSE PRAM 18 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM18_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM18_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM18_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM18_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM18_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM18_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM18_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM18_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM18_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM18_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM18_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM18_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM18LL;                              // CSE PRAM18LL register.
    uint8_t              _EmbeddedRAM18LU;                              // CSE PRAM18LU register.
    uint8_t              _EmbeddedRAM18HL;                              // CSE PRAM18HL register.
    uint8_t              _EmbeddedRAM18HU;                              // CSE PRAM18HU register.
    uint32_t             _EmbeddedRAM19;                                // CSE PRAM 19 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM19_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM19_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM19_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM19_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM19_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM19_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM19_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM19_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM19_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM19_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM19_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM19_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM19LL;                              // CSE PRAM19LL register.
    uint8_t              _EmbeddedRAM19LU;                              // CSE PRAM19LU register.
    uint8_t              _EmbeddedRAM19HL;                              // CSE PRAM19HL register.
    uint8_t              _EmbeddedRAM19HU;                              // CSE PRAM19HU register.
    uint32_t             _EmbeddedRAM20;                                // CSE PRAM 20 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM20_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM20_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM20_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM20_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM20_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM20_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM20_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM20_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM20_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM20_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM20_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM20_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM20LL;                              // CSE PRAM20LL register.
    uint8_t              _EmbeddedRAM20LU;                              // CSE PRAM20LU register.
    uint8_t              _EmbeddedRAM20HL;                              // CSE PRAM20HL register.
    uint8_t              _EmbeddedRAM20HU;                              // CSE PRAM20HU register.
    uint32_t             _EmbeddedRAM21;                                // CSE PRAM 21 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM21_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM21_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM21_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM21_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM21_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM21_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM21_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM21_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM21_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM21_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM21_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM21_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM21LL;                              // CSE PRAM21LL register.
    uint8_t              _EmbeddedRAM21LU;                              // CSE PRAM21LU register.
    uint8_t              _EmbeddedRAM21HL;                              // CSE PRAM21HL register.
    uint8_t              _EmbeddedRAM21HU;                              // CSE PRAM21HU register.
    uint32_t             _EmbeddedRAM22;                                // CSE PRAM 22 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM22_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM22_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM22_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM22_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM22_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM22_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM22_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM22_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM22_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM22_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM22_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM22_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM22LL;                              // CSE PRAM22LL register.
    uint8_t              _EmbeddedRAM22LU;                              // CSE PRAM22LU register.
    uint8_t              _EmbeddedRAM22HL;                              // CSE PRAM22HL register.
    uint8_t              _EmbeddedRAM22HU;                              // CSE PRAM22HU register.
    uint32_t             _EmbeddedRAM23;                                // CSE PRAM 23 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM23_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM23_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM23_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM23_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM23_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM23_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM23_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM23_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM23_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM23_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM23_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM23_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM23LL;                              // CSE PRAM23LL register.
    uint8_t              _EmbeddedRAM23LU;                              // CSE PRAM23LU register.
    uint8_t              _EmbeddedRAM23HL;                              // CSE PRAM23HL register.
    uint8_t              _EmbeddedRAM23HU;                              // CSE PRAM23HU register.
    uint32_t             _EmbeddedRAM24;                                // CSE PRAM 24 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM24_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM24_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM24_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM24_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM24_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM24_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM24_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM24_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM24_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM24_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM24_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM24_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM24LL;                              // CSE PRAM24LL register.
    uint8_t              _EmbeddedRAM24LU;                              // CSE PRAM24LU register.
    uint8_t              _EmbeddedRAM24HL;                              // CSE PRAM24HL register.
    uint8_t              _EmbeddedRAM24HU;                              // CSE PRAM24HU register.
    uint32_t             _EmbeddedRAM25;                                // CSE PRAM 25 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM25_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM25_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM25_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM25_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM25_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM25_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM25_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM25_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM25_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM25_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM25_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM25_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM25LL;                              // CSE PRAM25LL register.
    uint8_t              _EmbeddedRAM25LU;                              // CSE PRAM25LU register.
    uint8_t              _EmbeddedRAM25HL;                              // CSE PRAM25HL register.
    uint8_t              _EmbeddedRAM25HU;                              // CSE PRAM25HU register.
    uint32_t             _EmbeddedRAM26;                                // CSE PRAM 26 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM26_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM26_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM26_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM26_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM26_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM26_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM26_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM26_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM26_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM26_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM26_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM26_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM26LL;                              // CSE PRAM26LL register.
    uint8_t              _EmbeddedRAM26LU;                              // CSE PRAM26LU register.
    uint8_t              _EmbeddedRAM26HL;                              // CSE PRAM26HL register.
    uint8_t              _EmbeddedRAM26HU;                              // CSE PRAM26HU register.
    uint32_t             _EmbeddedRAM27;                                // CSE PRAM 27 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM27_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM27_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM27_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM27_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM27_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM27_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM27_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM27_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM27_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM27_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM27_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM27_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM27LL;                              // CSE PRAM27LL register.
    uint8_t              _EmbeddedRAM27LU;                              // CSE PRAM27LU register.
    uint8_t              _EmbeddedRAM27HL;                              // CSE PRAM27HL register.
    uint8_t              _EmbeddedRAM27HU;                              // CSE PRAM27HU register.
    uint32_t             _EmbeddedRAM28;                                // CSE PRAM 28 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM28_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM28_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM28_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM28_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM28_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM28_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM28_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM28_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM28_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM28_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM28_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM28_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM28LL;                              // CSE PRAM28LL register.
    uint8_t              _EmbeddedRAM28LU;                              // CSE PRAM28LU register.
    uint8_t              _EmbeddedRAM28HL;                              // CSE PRAM28HL register.
    uint8_t              _EmbeddedRAM28HU;                              // CSE PRAM28HU register.
    uint32_t             _EmbeddedRAM29;                                // CSE PRAM 29 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM29_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM29_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM29_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM29_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM29_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM29_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM29_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM29_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM29_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM29_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM29_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM29_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM29LL;                              // CSE PRAM29LL register.
    uint8_t              _EmbeddedRAM29LU;                              // CSE PRAM29LU register.
    uint8_t              _EmbeddedRAM29HL;                              // CSE PRAM29HL register.
    uint8_t              _EmbeddedRAM29HU;                              // CSE PRAM29HU register.
    uint32_t             _EmbeddedRAM30;                                // CSE PRAM 30 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM30_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM30_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM30_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM30_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM30_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM30_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM30_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM30_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM30_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM30_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM30_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM30_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM30LL;                              // CSE PRAM30LL register.
    uint8_t              _EmbeddedRAM30LU;                              // CSE PRAM30LU register.
    uint8_t              _EmbeddedRAM30HL;                              // CSE PRAM30HL register.
    uint8_t              _EmbeddedRAM30HU;                              // CSE PRAM30HU register.
    uint32_t             _EmbeddedRAM31;                                // CSE PRAM 31 Register
                                                                        // Data byte 3 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM31_BYTE_3(_n)       (((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM31_BYTE_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CSE_PRAM__EmbeddedRAM31_BYTE_3_EXTRACT(_v)   (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM31_BYTE_2(_n)       (((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM31_BYTE_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CSE_PRAM__EmbeddedRAM31_BYTE_2_EXTRACT(_v)   (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM31_BYTE_1(_n)       (((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM31_BYTE_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CSE_PRAM__EmbeddedRAM31_BYTE_1_EXTRACT(_v)   (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CSE_PRAM__EmbeddedRAM31_BYTE_0(_n)       (((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM31_BYTE_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CSE_PRAM__EmbeddedRAM31_BYTE_0_EXTRACT(_v)   (((_v) >> 24) & 0xff)

    uint8_t              _EmbeddedRAM31LL;                              // CSE PRAM31LL register.
    uint8_t              _EmbeddedRAM31LU;                              // CSE PRAM31LU register.
    uint8_t              _EmbeddedRAM31HL;                              // CSE PRAM31HL register.
    uint8_t              _EmbeddedRAM31HU;                              // CSE PRAM31HU register.
} CSE_PRAM_regs_t;
                                                                        // --------------------
                                                                        // AIPS-Lite Bridge
typedef struct                                                          // --------------------
{
    uint32_t             MPRA;                                          // Master Privilege Register A
#define AIPS_MPRA_MPL2                           ((uint32_t)1 << 20)    // Master 2 Privilege Level
#define AIPS_MPRA_MTW2                           ((uint32_t)1 << 21)    // Master 2 Trusted For Writes
#define AIPS_MPRA_MTR2                           ((uint32_t)1 << 22)    // Master 2 Trusted For Read
#define AIPS_MPRA_MPL1                           ((uint32_t)1 << 24)    // Master 1 Privilege Level
#define AIPS_MPRA_MTW1                           ((uint32_t)1 << 25)    // Master 1 Trusted for Writes
#define AIPS_MPRA_MTR1                           ((uint32_t)1 << 26)    // Master 1 Trusted for Read
#define AIPS_MPRA_MPL0                           ((uint32_t)1 << 28)    // Master 0 Privilege Level
#define AIPS_MPRA_MTW0                           ((uint32_t)1 << 29)    // Master 0 Trusted For Writes
#define AIPS_MPRA_MTR0                           ((uint32_t)1 << 30)    // Master 0 Trusted For Read

    uint8_t _res0[28];
    uint32_t             PACRA;                                         // Peripheral Access Control Register
#define AIPS_PACRA_TP1                           ((uint32_t)1 << 24)    // Trusted Protect
#define AIPS_PACRA_WP1                           ((uint32_t)1 << 25)    // Write Protect
#define AIPS_PACRA_SP1                           ((uint32_t)1 << 26)    // Supervisor Protect
#define AIPS_PACRA_TP0                           ((uint32_t)1 << 28)    // Trusted Protect
#define AIPS_PACRA_WP0                           ((uint32_t)1 << 29)    // Write Protect
#define AIPS_PACRA_SP0                           ((uint32_t)1 << 30)    // Supervisor Protect

    uint32_t             PACRB;                                         // Peripheral Access Control Register
#define AIPS_PACRB_TP5                           ((uint32_t)1 << 8)     // Trusted Protect
#define AIPS_PACRB_WP5                           ((uint32_t)1 << 9)     // Write Protect
#define AIPS_PACRB_SP5                           ((uint32_t)1 << 10)    // Supervisor Protect
#define AIPS_PACRB_TP1                           ((uint32_t)1 << 24)    // Trusted Protect
#define AIPS_PACRB_WP1                           ((uint32_t)1 << 25)    // Write Protect
#define AIPS_PACRB_SP1                           ((uint32_t)1 << 26)    // Supervisor Protect
#define AIPS_PACRB_TP0                           ((uint32_t)1 << 28)    // Trusted Protect
#define AIPS_PACRB_WP0                           ((uint32_t)1 << 29)    // Write Protect
#define AIPS_PACRB_SP0                           ((uint32_t)1 << 30)    // Supervisor Protect

    const uint32_t       PACRC;                                         // Peripheral Access Control Register
    uint32_t             PACRD;                                         // Peripheral Access Control Register
#define AIPS_PACRD_TP1                           ((uint32_t)1 << 24)    // Trusted Protect
#define AIPS_PACRD_WP1                           ((uint32_t)1 << 25)    // Write Protect
#define AIPS_PACRD_SP1                           ((uint32_t)1 << 26)    // Supervisor Protect
#define AIPS_PACRD_TP0                           ((uint32_t)1 << 28)    // Trusted Protect
#define AIPS_PACRD_WP0                           ((uint32_t)1 << 29)    // Write Protect
#define AIPS_PACRD_SP0                           ((uint32_t)1 << 30)    // Supervisor Protect

    uint8_t _res1[16];
    uint32_t             OPACRA;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRA_TP7                          ((uint32_t)1 << 0)     // Trusted Protect
#define AIPS_OPACRA_WP7                          ((uint32_t)1 << 1)     // Write Protect
#define AIPS_OPACRA_SP7                          ((uint32_t)1 << 2)     // Supervisor Protect
#define AIPS_OPACRA_TP6                          ((uint32_t)1 << 4)     // Trusted Protect
#define AIPS_OPACRA_WP6                          ((uint32_t)1 << 5)     // Write Protect
#define AIPS_OPACRA_SP6                          ((uint32_t)1 << 6)     // Supervisor Protect
#define AIPS_OPACRA_TP5                          ((uint32_t)1 << 8)     // Trusted Protect
#define AIPS_OPACRA_WP5                          ((uint32_t)1 << 9)     // Write Protect
#define AIPS_OPACRA_SP5                          ((uint32_t)1 << 10)    // Supervisor Protect
#define AIPS_OPACRA_TP4                          ((uint32_t)1 << 12)    // Trusted Protect
#define AIPS_OPACRA_WP4                          ((uint32_t)1 << 13)    // Write Protect
#define AIPS_OPACRA_SP4                          ((uint32_t)1 << 14)    // Supervisor Protect
#define AIPS_OPACRA_TP1                          ((uint32_t)1 << 24)    // Trusted Protect
#define AIPS_OPACRA_WP1                          ((uint32_t)1 << 25)    // Write Protect
#define AIPS_OPACRA_SP1                          ((uint32_t)1 << 26)    // Supervisor Protect
#define AIPS_OPACRA_TP0                          ((uint32_t)1 << 28)    // Trusted Protect
#define AIPS_OPACRA_WP0                          ((uint32_t)1 << 29)    // Write Protect
#define AIPS_OPACRA_SP0                          ((uint32_t)1 << 30)    // Supervisor Protect

    uint32_t             OPACRB;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRB_TP6                          ((uint32_t)1 << 4)     // Trusted Protect
#define AIPS_OPACRB_WP6                          ((uint32_t)1 << 5)     // Write Protect
#define AIPS_OPACRB_SP6                          ((uint32_t)1 << 6)     // Supervisor Protect
#define AIPS_OPACRB_TP5                          ((uint32_t)1 << 8)     // Trusted Protect
#define AIPS_OPACRB_WP5                          ((uint32_t)1 << 9)     // Write Protect
#define AIPS_OPACRB_SP5                          ((uint32_t)1 << 10)    // Supervisor Protect
#define AIPS_OPACRB_TP4                          ((uint32_t)1 << 12)    // Trusted Protect
#define AIPS_OPACRB_WP4                          ((uint32_t)1 << 13)    // Write Protect
#define AIPS_OPACRB_SP4                          ((uint32_t)1 << 14)    // Supervisor Protect
#define AIPS_OPACRB_TP3                          ((uint32_t)1 << 16)    // Trusted Protect
#define AIPS_OPACRB_WP3                          ((uint32_t)1 << 17)    // Write Protect
#define AIPS_OPACRB_SP3                          ((uint32_t)1 << 18)    // Supervisor Protect

    uint32_t             OPACRC;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRC_TP7                          ((uint32_t)1 << 0)     // Trusted Protect
#define AIPS_OPACRC_WP7                          ((uint32_t)1 << 1)     // Write Protect
#define AIPS_OPACRC_SP7                          ((uint32_t)1 << 2)     // Supervisor Protect
#define AIPS_OPACRC_TP6                          ((uint32_t)1 << 4)     // Trusted Protect
#define AIPS_OPACRC_WP6                          ((uint32_t)1 << 5)     // Write Protect
#define AIPS_OPACRC_SP6                          ((uint32_t)1 << 6)     // Supervisor Protect
#define AIPS_OPACRC_TP2                          ((uint32_t)1 << 20)    // Trusted Protect
#define AIPS_OPACRC_WP2                          ((uint32_t)1 << 21)    // Write Protect
#define AIPS_OPACRC_SP2                          ((uint32_t)1 << 22)    // Supervisor Protect
#define AIPS_OPACRC_TP1                          ((uint32_t)1 << 24)    // Trusted Protect
#define AIPS_OPACRC_WP1                          ((uint32_t)1 << 25)    // Write Protect
#define AIPS_OPACRC_SP1                          ((uint32_t)1 << 26)    // Supervisor Protect

    uint32_t             OPACRD;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRD_TP5                          ((uint32_t)1 << 8)     // Trusted Protect
#define AIPS_OPACRD_WP5                          ((uint32_t)1 << 9)     // Write Protect
#define AIPS_OPACRD_SP5                          ((uint32_t)1 << 10)    // Supervisor Protect
#define AIPS_OPACRD_TP3                          ((uint32_t)1 << 16)    // Trusted Protect
#define AIPS_OPACRD_WP3                          ((uint32_t)1 << 17)    // Write Protect
#define AIPS_OPACRD_SP3                          ((uint32_t)1 << 18)    // Supervisor Protect
#define AIPS_OPACRD_TP2                          ((uint32_t)1 << 20)    // Trusted Protect
#define AIPS_OPACRD_WP2                          ((uint32_t)1 << 21)    // Write Protect
#define AIPS_OPACRD_SP2                          ((uint32_t)1 << 22)    // Supervisor Protect
#define AIPS_OPACRD_TP1                          ((uint32_t)1 << 24)    // Trusted Protect
#define AIPS_OPACRD_WP1                          ((uint32_t)1 << 25)    // Write Protect
#define AIPS_OPACRD_SP1                          ((uint32_t)1 << 26)    // Supervisor Protect
#define AIPS_OPACRD_TP0                          ((uint32_t)1 << 28)    // Trusted Protect
#define AIPS_OPACRD_WP0                          ((uint32_t)1 << 29)    // Write Protect
#define AIPS_OPACRD_SP0                          ((uint32_t)1 << 30)    // Supervisor Protect

    uint32_t             OPACRE;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRE_TP6                          ((uint32_t)1 << 4)     // Trusted Protect
#define AIPS_OPACRE_WP6                          ((uint32_t)1 << 5)     // Write Protect
#define AIPS_OPACRE_SP6                          ((uint32_t)1 << 6)     // Supervisor Protect
#define AIPS_OPACRE_TP0                          ((uint32_t)1 << 28)    // Trusted Protect
#define AIPS_OPACRE_WP0                          ((uint32_t)1 << 29)    // Write Protect
#define AIPS_OPACRE_SP0                          ((uint32_t)1 << 30)    // Supervisor Protect

    uint32_t             OPACRF;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRF_TP5                          ((uint32_t)1 << 8)     // Trusted Protect
#define AIPS_OPACRF_WP5                          ((uint32_t)1 << 9)     // Write Protect
#define AIPS_OPACRF_SP5                          ((uint32_t)1 << 10)    // Supervisor Protect
#define AIPS_OPACRF_TP4                          ((uint32_t)1 << 12)    // Trusted Protect
#define AIPS_OPACRF_WP4                          ((uint32_t)1 << 13)    // Write Protect
#define AIPS_OPACRF_SP4                          ((uint32_t)1 << 14)    // Supervisor Protect
#define AIPS_OPACRF_TP3                          ((uint32_t)1 << 16)    // Trusted Protect
#define AIPS_OPACRF_WP3                          ((uint32_t)1 << 17)    // Write Protect
#define AIPS_OPACRF_SP3                          ((uint32_t)1 << 18)    // Supervisor Protect
#define AIPS_OPACRF_TP2                          ((uint32_t)1 << 20)    // Trusted Protect
#define AIPS_OPACRF_WP2                          ((uint32_t)1 << 21)    // Write Protect
#define AIPS_OPACRF_SP2                          ((uint32_t)1 << 22)    // Supervisor Protect
#define AIPS_OPACRF_TP1                          ((uint32_t)1 << 24)    // Trusted Protect
#define AIPS_OPACRF_WP1                          ((uint32_t)1 << 25)    // Write Protect
#define AIPS_OPACRF_SP1                          ((uint32_t)1 << 26)    // Supervisor Protect
#define AIPS_OPACRF_TP0                          ((uint32_t)1 << 28)    // Trusted Protect
#define AIPS_OPACRF_WP0                          ((uint32_t)1 << 29)    // Write Protect
#define AIPS_OPACRF_SP0                          ((uint32_t)1 << 30)    // Supervisor Protect

    uint32_t             OPACRG;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRG_TP2                          ((uint32_t)1 << 20)    // Trusted Protect
#define AIPS_OPACRG_WP2                          ((uint32_t)1 << 21)    // Write Protect
#define AIPS_OPACRG_SP2                          ((uint32_t)1 << 22)    // Supervisor Protect

    uint32_t             OPACRH;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRH_TP2                          ((uint32_t)1 << 20)    // Trusted Protect
#define AIPS_OPACRH_WP2                          ((uint32_t)1 << 21)    // Write Protect
#define AIPS_OPACRH_SP2                          ((uint32_t)1 << 22)    // Supervisor Protect

    uint32_t             OPACRI;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRI_TP6                          ((uint32_t)1 << 4)     // Trusted Protect
#define AIPS_OPACRI_WP6                          ((uint32_t)1 << 5)     // Write Protect
#define AIPS_OPACRI_SP6                          ((uint32_t)1 << 6)     // Supervisor Protect
#define AIPS_OPACRI_TP5                          ((uint32_t)1 << 8)     // Trusted Protect
#define AIPS_OPACRI_WP5                          ((uint32_t)1 << 9)     // Write Protect
#define AIPS_OPACRI_SP5                          ((uint32_t)1 << 10)    // Supervisor Protect
#define AIPS_OPACRI_TP4                          ((uint32_t)1 << 12)    // Trusted Protect
#define AIPS_OPACRI_WP4                          ((uint32_t)1 << 13)    // Write Protect
#define AIPS_OPACRI_SP4                          ((uint32_t)1 << 14)    // Supervisor Protect
#define AIPS_OPACRI_TP3                          ((uint32_t)1 << 16)    // Trusted Protect
#define AIPS_OPACRI_WP3                          ((uint32_t)1 << 17)    // Write Protect
#define AIPS_OPACRI_SP3                          ((uint32_t)1 << 18)    // Supervisor Protect
#define AIPS_OPACRI_TP1                          ((uint32_t)1 << 24)    // Trusted Protect
#define AIPS_OPACRI_WP1                          ((uint32_t)1 << 25)    // Write Protect
#define AIPS_OPACRI_SP1                          ((uint32_t)1 << 26)    // Supervisor Protect

    uint32_t             OPACRJ;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRJ_TP4                          ((uint32_t)1 << 12)    // Trusted Protect
#define AIPS_OPACRJ_WP4                          ((uint32_t)1 << 13)    // Write Protect
#define AIPS_OPACRJ_SP4                          ((uint32_t)1 << 14)    // Supervisor Protect
#define AIPS_OPACRJ_TP3                          ((uint32_t)1 << 16)    // Trusted Protect
#define AIPS_OPACRJ_WP3                          ((uint32_t)1 << 17)    // Write Protect
#define AIPS_OPACRJ_SP3                          ((uint32_t)1 << 18)    // Supervisor Protect
#define AIPS_OPACRJ_TP2                          ((uint32_t)1 << 20)    // Trusted Protect
#define AIPS_OPACRJ_WP2                          ((uint32_t)1 << 21)    // Write Protect
#define AIPS_OPACRJ_SP2                          ((uint32_t)1 << 22)    // Supervisor Protect

    uint32_t             OPACRK;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRK_TP3                          ((uint32_t)1 << 16)    // Trusted Protect
#define AIPS_OPACRK_WP3                          ((uint32_t)1 << 17)    // Write Protect
#define AIPS_OPACRK_SP3                          ((uint32_t)1 << 18)    // Supervisor Protect

    uint32_t             OPACRL;                                        // Off-Platform Peripheral Access Control Register
#define AIPS_OPACRL_TP7                          ((uint32_t)1 << 0)     // Trusted Protect
#define AIPS_OPACRL_WP7                          ((uint32_t)1 << 1)     // Write Protect
#define AIPS_OPACRL_SP7                          ((uint32_t)1 << 2)     // Supervisor Protect
#define AIPS_OPACRL_TP6                          ((uint32_t)1 << 4)     // Trusted Protect
#define AIPS_OPACRL_WP6                          ((uint32_t)1 << 5)     // Write Protect
#define AIPS_OPACRL_SP6                          ((uint32_t)1 << 6)     // Supervisor Protect
#define AIPS_OPACRL_TP5                          ((uint32_t)1 << 8)     // Trusted Protect
#define AIPS_OPACRL_WP5                          ((uint32_t)1 << 9)     // Write Protect
#define AIPS_OPACRL_SP5                          ((uint32_t)1 << 10)    // Supervisor Protect

} AIPS_regs_t;
                                                                        // --------------------
                                                                        // MSCM
typedef struct                                                          // --------------------
{
    const uint32_t       CPxTYPE;                                       // Processor X Type Register
                                                                        // Processor x Revision
#define MSCM_CPxTYPE_RYPZ_EXTRACT(_v)                (((_v) >> 0) & 0xff)
                                                                        // Processor x Personality
#define MSCM_CPxTYPE_PERSONALITY_EXTRACT(_v)         (((_v) >> 8) & 0xffffff)

    const uint32_t       CPxNUM;                                        // Processor X Number Register
#define MSCM_CPxNUM_CPN                          ((uint32_t)1 << 0)     // Processor x Number

    const uint32_t       CPxMASTER;                                     // Processor X Master Register
                                                                        // Processor x Physical Master Number
#define MSCM_CPxMASTER_PPMN_EXTRACT(_v)              (((_v) >> 0) & 0x3f)

    const uint32_t       CPxCOUNT;                                      // Processor X Count Register
                                                                        // Processor Count
#define MSCM_CPxCOUNT_PCNT_EXTRACT(_v)               (((_v) >> 0) & 0x3)

    const uint32_t       CPxCFG0;                                       // Processor X Configuration Register 0
                                                                        // Level 1 Data Cache Ways
#define MSCM_CPxCFG0_DCWY_EXTRACT(_v)                (((_v) >> 0) & 0xff)
                                                                        // Level 1 Data Cache Size
#define MSCM_CPxCFG0_DCSZ_EXTRACT(_v)                (((_v) >> 8) & 0xff)
                                                                        // Level 1 Instruction Cache Ways
#define MSCM_CPxCFG0_ICWY_EXTRACT(_v)                (((_v) >> 16) & 0xff)
                                                                        // Level 1 Instruction Cache Size
#define MSCM_CPxCFG0_ICSZ_EXTRACT(_v)                (((_v) >> 24) & 0xff)

    const uint32_t       CPxCFG1;                                       // Processor X Configuration Register 1
                                                                        // Level 2 Instruction Cache Ways
#define MSCM_CPxCFG1_L2WY_EXTRACT(_v)                (((_v) >> 16) & 0xff)
                                                                        // Level 2 Instruction Cache Size
#define MSCM_CPxCFG1_L2SZ_EXTRACT(_v)                (((_v) >> 24) & 0xff)

    const uint32_t       CPxCFG2;                                       // Processor X Configuration Register 2
                                                                        // Tightly-coupled Memory Upper Size
#define MSCM_CPxCFG2_TMUSZ_EXTRACT(_v)               (((_v) >> 8) & 0xff)
                                                                        // Tightly-coupled Memory Lower Size
#define MSCM_CPxCFG2_TMLSZ_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    const uint32_t       CPxCFG3;                                       // Processor X Configuration Register 3
#define MSCM_CPxCFG3_FPU                         ((uint32_t)1 << 0)     // Floating Point Unit
#define MSCM_CPxCFG3_SIMD                        ((uint32_t)1 << 1)     // SIMD/NEON instruction support
#define MSCM_CPxCFG3_JAZ                         ((uint32_t)1 << 2)     // Jazelle support
#define MSCM_CPxCFG3_MMU                         ((uint32_t)1 << 3)     // Memory Management Unit
#define MSCM_CPxCFG3_TZ                          ((uint32_t)1 << 4)     // Trust Zone
#define MSCM_CPxCFG3_CMP                         ((uint32_t)1 << 5)     // Core Memory Protection unit
#define MSCM_CPxCFG3_BB                          ((uint32_t)1 << 6)     // Bit Banding
                                                                        // System Bus Ports
#define MSCM_CPxCFG3_SBP_EXTRACT(_v)                 (((_v) >> 8) & 0x3)

    const uint32_t       CP0TYPE;                                       // Processor 0 Type Register
                                                                        // Processor 0 Revision
#define MSCM_CP0TYPE_RYPZ_EXTRACT(_v)                (((_v) >> 0) & 0xff)
                                                                        // Processor 0 Personality
#define MSCM_CP0TYPE_PERSONALITY_EXTRACT(_v)         (((_v) >> 8) & 0xffffff)

    const uint32_t       CP0NUM;                                        // Processor 0 Number Register
#define MSCM_CP0NUM_CPN                          ((uint32_t)1 << 0)     // Processor 0 Number

    const uint32_t       CP0MASTER;                                     // Processor 0 Master Register
                                                                        // Processor 0 Physical Master Number
#define MSCM_CP0MASTER_PPMN_EXTRACT(_v)              (((_v) >> 0) & 0x3f)

    const uint32_t       CP0COUNT;                                      // Processor 0 Count Register
                                                                        // Processor Count
#define MSCM_CP0COUNT_PCNT_EXTRACT(_v)               (((_v) >> 0) & 0x3)

    const uint32_t       CP0CFG0;                                       // Processor 0 Configuration Register 0
                                                                        // Level 1 Data Cache Ways
#define MSCM_CP0CFG0_DCWY_EXTRACT(_v)                (((_v) >> 0) & 0xff)
                                                                        // Level 1 Data Cache Size
#define MSCM_CP0CFG0_DCSZ_EXTRACT(_v)                (((_v) >> 8) & 0xff)
                                                                        // Level 1 Instruction Cache Ways
#define MSCM_CP0CFG0_ICWY_EXTRACT(_v)                (((_v) >> 16) & 0xff)
                                                                        // Level 1 Instruction Cache Size
#define MSCM_CP0CFG0_ICSZ_EXTRACT(_v)                (((_v) >> 24) & 0xff)

    const uint32_t       CP0CFG1;                                       // Processor 0 Configuration Register 1
                                                                        // Level 2 Instruction Cache Ways
#define MSCM_CP0CFG1_L2WY_EXTRACT(_v)                (((_v) >> 16) & 0xff)
                                                                        // Level 2 Instruction Cache Size
#define MSCM_CP0CFG1_L2SZ_EXTRACT(_v)                (((_v) >> 24) & 0xff)

    const uint32_t       CP0CFG2;                                       // Processor 0 Configuration Register 2
                                                                        // Tightly-coupled Memory Upper Size
#define MSCM_CP0CFG2_TMUSZ_EXTRACT(_v)               (((_v) >> 8) & 0xff)
                                                                        // Tightly-coupled Memory Lower Size
#define MSCM_CP0CFG2_TMLSZ_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    const uint32_t       CP0CFG3;                                       // Processor 0 Configuration Register 3
#define MSCM_CP0CFG3_FPU                         ((uint32_t)1 << 0)     // Floating Point Unit
#define MSCM_CP0CFG3_SIMD                        ((uint32_t)1 << 1)     // SIMD/NEON instruction support
#define MSCM_CP0CFG3_JAZ                         ((uint32_t)1 << 2)     // Jazelle support
#define MSCM_CP0CFG3_MMU                         ((uint32_t)1 << 3)     // Memory Management Unit
#define MSCM_CP0CFG3_TZ                          ((uint32_t)1 << 4)     // Trust Zone
#define MSCM_CP0CFG3_CMP                         ((uint32_t)1 << 5)     // Core Memory Protection unit
#define MSCM_CP0CFG3_BB                          ((uint32_t)1 << 6)     // Bit Banding
                                                                        // System Bus Ports
#define MSCM_CP0CFG3_SBP_EXTRACT(_v)                 (((_v) >> 8) & 0x3)

    uint8_t _res0[960];
    uint32_t             OCMDR0;                                        // On-Chip Memory Descriptor Register
                                                                        // OCMEM Control Field 1
#define MSCM_OCMDR0_OCM1(_n)                     (((uint32_t)(_n) & 0x3) << 4)
#define MSCM_OCMDR0_OCM1_INSERT(_v, _n)              (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define MSCM_OCMDR0_OCM1_EXTRACT(_v)                 (((_v) >> 4) & 0x3)
#define MSCM_OCMDR0_OCMPU                        ((uint32_t)1 << 12)    // OCMPU
                                                                        // OCMT
#define MSCM_OCMDR0_OCMT(_n)                     (((uint32_t)(_n) & 0x7) << 13)
#define MSCM_OCMDR0_OCMT_INSERT(_v, _n)              (((_v) & ~0xe000) | ((uint32_t)(_n) & 0x7) << 13)
#define MSCM_OCMDR0_OCMT_EXTRACT(_v)                 (((_v) >> 13) & 0x7)
#define MSCM_OCMDR0_RO                           ((uint32_t)1 << 16)    // RO
                                                                        // OCMW
#define MSCM_OCMDR0_OCMW(_n)                     (((uint32_t)(_n) & 0x7) << 17)
#define MSCM_OCMDR0_OCMW_INSERT(_v, _n)              (((_v) & ~0xe0000) | ((uint32_t)(_n) & 0x7) << 17)
#define MSCM_OCMDR0_OCMW_EXTRACT(_v)                 (((_v) >> 17) & 0x7)
                                                                        // OCMSZ
#define MSCM_OCMDR0_OCMSZ(_n)                    (((uint32_t)(_n) & 0xf) << 24)
#define MSCM_OCMDR0_OCMSZ_INSERT(_v, _n)             (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define MSCM_OCMDR0_OCMSZ_EXTRACT(_v)                (((_v) >> 24) & 0xf)
#define MSCM_OCMDR0_OCMSZH                       ((uint32_t)1 << 28)    // OCMSZH
#define MSCM_OCMDR0_V                            ((uint32_t)1 << 31)    // V

    uint32_t             OCMDR1;                                        // On-Chip Memory Descriptor Register
                                                                        // OCMEM Control Field 1
#define MSCM_OCMDR1_OCM1(_n)                     (((uint32_t)(_n) & 0x3) << 4)
#define MSCM_OCMDR1_OCM1_INSERT(_v, _n)              (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define MSCM_OCMDR1_OCM1_EXTRACT(_v)                 (((_v) >> 4) & 0x3)
#define MSCM_OCMDR1_OCMPU                        ((uint32_t)1 << 12)    // OCMPU
                                                                        // OCMT
#define MSCM_OCMDR1_OCMT(_n)                     (((uint32_t)(_n) & 0x7) << 13)
#define MSCM_OCMDR1_OCMT_INSERT(_v, _n)              (((_v) & ~0xe000) | ((uint32_t)(_n) & 0x7) << 13)
#define MSCM_OCMDR1_OCMT_EXTRACT(_v)                 (((_v) >> 13) & 0x7)
#define MSCM_OCMDR1_RO                           ((uint32_t)1 << 16)    // RO
                                                                        // OCMW
#define MSCM_OCMDR1_OCMW(_n)                     (((uint32_t)(_n) & 0x7) << 17)
#define MSCM_OCMDR1_OCMW_INSERT(_v, _n)              (((_v) & ~0xe0000) | ((uint32_t)(_n) & 0x7) << 17)
#define MSCM_OCMDR1_OCMW_EXTRACT(_v)                 (((_v) >> 17) & 0x7)
                                                                        // OCMSZ
#define MSCM_OCMDR1_OCMSZ(_n)                    (((uint32_t)(_n) & 0xf) << 24)
#define MSCM_OCMDR1_OCMSZ_INSERT(_v, _n)             (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define MSCM_OCMDR1_OCMSZ_EXTRACT(_v)                (((_v) >> 24) & 0xf)
#define MSCM_OCMDR1_OCMSZH                       ((uint32_t)1 << 28)    // OCMSZH
#define MSCM_OCMDR1_V                            ((uint32_t)1 << 31)    // V

    uint32_t             OCMDR2;                                        // On-Chip Memory Descriptor Register
#define MSCM_OCMDR2_OCMPU                        ((uint32_t)1 << 12)    // OCMPU
                                                                        // OCMT
#define MSCM_OCMDR2_OCMT(_n)                     (((uint32_t)(_n) & 0x7) << 13)
#define MSCM_OCMDR2_OCMT_INSERT(_v, _n)              (((_v) & ~0xe000) | ((uint32_t)(_n) & 0x7) << 13)
#define MSCM_OCMDR2_OCMT_EXTRACT(_v)                 (((_v) >> 13) & 0x7)
#define MSCM_OCMDR2_RO                           ((uint32_t)1 << 16)    // RO
                                                                        // OCMW
#define MSCM_OCMDR2_OCMW(_n)                     (((uint32_t)(_n) & 0x7) << 17)
#define MSCM_OCMDR2_OCMW_INSERT(_v, _n)              (((_v) & ~0xe0000) | ((uint32_t)(_n) & 0x7) << 17)
#define MSCM_OCMDR2_OCMW_EXTRACT(_v)                 (((_v) >> 17) & 0x7)
                                                                        // OCMSZ
#define MSCM_OCMDR2_OCMSZ(_n)                    (((uint32_t)(_n) & 0xf) << 24)
#define MSCM_OCMDR2_OCMSZ_INSERT(_v, _n)             (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define MSCM_OCMDR2_OCMSZ_EXTRACT(_v)                (((_v) >> 24) & 0xf)
#define MSCM_OCMDR2_OCMSZH                       ((uint32_t)1 << 28)    // OCMSZH
#define MSCM_OCMDR2_V                            ((uint32_t)1 << 31)    // V

} MSCM_regs_t;
                                                                        // --------------------
                                                                        // Enhanced Direct Memory Access
typedef struct                                                          // --------------------
{
    uint32_t             CR;                                            // Control Register
#define DMA_CR_EDBG                              ((uint32_t)1 << 1)     // Enable Debug
#define DMA_CR_ERCA                              ((uint32_t)1 << 2)     // Enable Round Robin Channel Arbitration
#define DMA_CR_HOE                               ((uint32_t)1 << 4)     // Halt On Error
#define DMA_CR_HALT                              ((uint32_t)1 << 5)     // Halt DMA Operations
#define DMA_CR_CLM                               ((uint32_t)1 << 6)     // Continuous Link Mode
#define DMA_CR_EMLM                              ((uint32_t)1 << 7)     // Enable Minor Loop Mapping
#define DMA_CR_ECX                               ((uint32_t)1 << 16)    // Error Cancel Transfer
#define DMA_CR_CX                                ((uint32_t)1 << 17)    // Cancel Transfer
#define DMA_CR_ACTIVE                            ((uint32_t)1 << 31)    // DMA Active Status

    const uint32_t       ES;                                            // Error Status Register
#define DMA_ES_DBE                               ((uint32_t)1 << 0)     // Destination Bus Error
#define DMA_ES_SBE                               ((uint32_t)1 << 1)     // Source Bus Error
#define DMA_ES_SGE                               ((uint32_t)1 << 2)     // Scatter/Gather Configuration Error
#define DMA_ES_NCE                               ((uint32_t)1 << 3)     // NBYTES/CITER Configuration Error
#define DMA_ES_DOE                               ((uint32_t)1 << 4)     // Destination Offset Error
#define DMA_ES_DAE                               ((uint32_t)1 << 5)     // Destination Address Error
#define DMA_ES_SOE                               ((uint32_t)1 << 6)     // Source Offset Error
#define DMA_ES_SAE                               ((uint32_t)1 << 7)     // Source Address Error
                                                                        // Error Channel Number or Canceled Channel Number
#define DMA_ES_ERRCHN_EXTRACT(_v)                    (((_v) >> 8) & 0xf)
#define DMA_ES_CPE                               ((uint32_t)1 << 14)    // Channel Priority Error
#define DMA_ES_ECX                               ((uint32_t)1 << 16)    // Transfer Canceled
#define DMA_ES_VLD                               ((uint32_t)1 << 31)    // VLD

    uint8_t _res0[4];
    uint32_t             ERQ;                                           // Enable Request Register
#define DMA_ERQ_ERQ0                             ((uint32_t)1 << 0)     // Enable DMA Request 0
#define DMA_ERQ_ERQ1                             ((uint32_t)1 << 1)     // Enable DMA Request 1
#define DMA_ERQ_ERQ2                             ((uint32_t)1 << 2)     // Enable DMA Request 2
#define DMA_ERQ_ERQ3                             ((uint32_t)1 << 3)     // Enable DMA Request 3
#define DMA_ERQ_ERQ4                             ((uint32_t)1 << 4)     // Enable DMA Request 4
#define DMA_ERQ_ERQ5                             ((uint32_t)1 << 5)     // Enable DMA Request 5
#define DMA_ERQ_ERQ6                             ((uint32_t)1 << 6)     // Enable DMA Request 6
#define DMA_ERQ_ERQ7                             ((uint32_t)1 << 7)     // Enable DMA Request 7
#define DMA_ERQ_ERQ8                             ((uint32_t)1 << 8)     // Enable DMA Request 8
#define DMA_ERQ_ERQ9                             ((uint32_t)1 << 9)     // Enable DMA Request 9
#define DMA_ERQ_ERQ10                            ((uint32_t)1 << 10)    // Enable DMA Request 10
#define DMA_ERQ_ERQ11                            ((uint32_t)1 << 11)    // Enable DMA Request 11
#define DMA_ERQ_ERQ12                            ((uint32_t)1 << 12)    // Enable DMA Request 12
#define DMA_ERQ_ERQ13                            ((uint32_t)1 << 13)    // Enable DMA Request 13
#define DMA_ERQ_ERQ14                            ((uint32_t)1 << 14)    // Enable DMA Request 14
#define DMA_ERQ_ERQ15                            ((uint32_t)1 << 15)    // Enable DMA Request 15

    uint8_t _res1[4];
    uint32_t             EEI;                                           // Enable Error Interrupt Register
#define DMA_EEI_EEI0                             ((uint32_t)1 << 0)     // Enable Error Interrupt 0
#define DMA_EEI_EEI1                             ((uint32_t)1 << 1)     // Enable Error Interrupt 1
#define DMA_EEI_EEI2                             ((uint32_t)1 << 2)     // Enable Error Interrupt 2
#define DMA_EEI_EEI3                             ((uint32_t)1 << 3)     // Enable Error Interrupt 3
#define DMA_EEI_EEI4                             ((uint32_t)1 << 4)     // Enable Error Interrupt 4
#define DMA_EEI_EEI5                             ((uint32_t)1 << 5)     // Enable Error Interrupt 5
#define DMA_EEI_EEI6                             ((uint32_t)1 << 6)     // Enable Error Interrupt 6
#define DMA_EEI_EEI7                             ((uint32_t)1 << 7)     // Enable Error Interrupt 7
#define DMA_EEI_EEI8                             ((uint32_t)1 << 8)     // Enable Error Interrupt 8
#define DMA_EEI_EEI9                             ((uint32_t)1 << 9)     // Enable Error Interrupt 9
#define DMA_EEI_EEI10                            ((uint32_t)1 << 10)    // Enable Error Interrupt 10
#define DMA_EEI_EEI11                            ((uint32_t)1 << 11)    // Enable Error Interrupt 11
#define DMA_EEI_EEI12                            ((uint32_t)1 << 12)    // Enable Error Interrupt 12
#define DMA_EEI_EEI13                            ((uint32_t)1 << 13)    // Enable Error Interrupt 13
#define DMA_EEI_EEI14                            ((uint32_t)1 << 14)    // Enable Error Interrupt 14
#define DMA_EEI_EEI15                            ((uint32_t)1 << 15)    // Enable Error Interrupt 15

    uint8_t              CEEI;                                          // Clear Enable Error Interrupt Register
                                                                        // Clear Enable Error Interrupt
#define DMA_CEEI_CEEI(_n)                        (((uint8_t)(_n) & 0xf) << 0)
#define DMA_CEEI_CEEI_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_CEEI_CAEE                            ((uint8_t)1 << 6)      // Clear All Enable Error Interrupts
#define DMA_CEEI_NOP                             ((uint8_t)1 << 7)      // No Op enable

    uint8_t              SEEI;                                          // Set Enable Error Interrupt Register
                                                                        // Set Enable Error Interrupt
#define DMA_SEEI_SEEI(_n)                        (((uint8_t)(_n) & 0xf) << 0)
#define DMA_SEEI_SEEI_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_SEEI_SAEE                            ((uint8_t)1 << 6)      // Sets All Enable Error Interrupts
#define DMA_SEEI_NOP                             ((uint8_t)1 << 7)      // No Op enable

    uint8_t              CERQ;                                          // Clear Enable Request Register
                                                                        // Clear Enable Request
#define DMA_CERQ_CERQ(_n)                        (((uint8_t)(_n) & 0xf) << 0)
#define DMA_CERQ_CERQ_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_CERQ_CAER                            ((uint8_t)1 << 6)      // Clear All Enable Requests
#define DMA_CERQ_NOP                             ((uint8_t)1 << 7)      // No Op enable

    uint8_t              SERQ;                                          // Set Enable Request Register
                                                                        // Set Enable Request
#define DMA_SERQ_SERQ(_n)                        (((uint8_t)(_n) & 0xf) << 0)
#define DMA_SERQ_SERQ_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_SERQ_SAER                            ((uint8_t)1 << 6)      // Set All Enable Requests
#define DMA_SERQ_NOP                             ((uint8_t)1 << 7)      // No Op enable

    uint8_t              CDNE;                                          // Clear DONE Status Bit Register
                                                                        // Clear DONE Bit
#define DMA_CDNE_CDNE(_n)                        (((uint8_t)(_n) & 0xf) << 0)
#define DMA_CDNE_CDNE_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_CDNE_CADN                            ((uint8_t)1 << 6)      // Clears All DONE Bits
#define DMA_CDNE_NOP                             ((uint8_t)1 << 7)      // No Op enable

    uint8_t              SSRT;                                          // Set START Bit Register
                                                                        // Set START Bit
#define DMA_SSRT_SSRT(_n)                        (((uint8_t)(_n) & 0xf) << 0)
#define DMA_SSRT_SSRT_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_SSRT_SAST                            ((uint8_t)1 << 6)      // Set All START Bits (activates all channels)
#define DMA_SSRT_NOP                             ((uint8_t)1 << 7)      // No Op enable

    uint8_t              CERR;                                          // Clear Error Register
                                                                        // Clear Error Indicator
#define DMA_CERR_CERR(_n)                        (((uint8_t)(_n) & 0xf) << 0)
#define DMA_CERR_CERR_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_CERR_CAEI                            ((uint8_t)1 << 6)      // Clear All Error Indicators
#define DMA_CERR_NOP                             ((uint8_t)1 << 7)      // No Op enable

    uint8_t              CINT;                                          // Clear Interrupt Request Register
                                                                        // Clear Interrupt Request
#define DMA_CINT_CINT(_n)                        (((uint8_t)(_n) & 0xf) << 0)
#define DMA_CINT_CINT_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_CINT_CAIR                            ((uint8_t)1 << 6)      // Clear All Interrupt Requests
#define DMA_CINT_NOP                             ((uint8_t)1 << 7)      // No Op enable

    uint8_t _res2[4];
    uint32_t             INT;                                           // Interrupt Request Register
#define DMA_INT_INT0                             ((uint32_t)1 << 0)     // Interrupt Request 0
#define DMA_INT_INT1                             ((uint32_t)1 << 1)     // Interrupt Request 1
#define DMA_INT_INT2                             ((uint32_t)1 << 2)     // Interrupt Request 2
#define DMA_INT_INT3                             ((uint32_t)1 << 3)     // Interrupt Request 3
#define DMA_INT_INT4                             ((uint32_t)1 << 4)     // Interrupt Request 4
#define DMA_INT_INT5                             ((uint32_t)1 << 5)     // Interrupt Request 5
#define DMA_INT_INT6                             ((uint32_t)1 << 6)     // Interrupt Request 6
#define DMA_INT_INT7                             ((uint32_t)1 << 7)     // Interrupt Request 7
#define DMA_INT_INT8                             ((uint32_t)1 << 8)     // Interrupt Request 8
#define DMA_INT_INT9                             ((uint32_t)1 << 9)     // Interrupt Request 9
#define DMA_INT_INT10                            ((uint32_t)1 << 10)    // Interrupt Request 10
#define DMA_INT_INT11                            ((uint32_t)1 << 11)    // Interrupt Request 11
#define DMA_INT_INT12                            ((uint32_t)1 << 12)    // Interrupt Request 12
#define DMA_INT_INT13                            ((uint32_t)1 << 13)    // Interrupt Request 13
#define DMA_INT_INT14                            ((uint32_t)1 << 14)    // Interrupt Request 14
#define DMA_INT_INT15                            ((uint32_t)1 << 15)    // Interrupt Request 15

    uint8_t _res3[4];
    uint32_t             ERR;                                           // Error Register
#define DMA_ERR_ERR0                             ((uint32_t)1 << 0)     // Error In Channel 0
#define DMA_ERR_ERR1                             ((uint32_t)1 << 1)     // Error In Channel 1
#define DMA_ERR_ERR2                             ((uint32_t)1 << 2)     // Error In Channel 2
#define DMA_ERR_ERR3                             ((uint32_t)1 << 3)     // Error In Channel 3
#define DMA_ERR_ERR4                             ((uint32_t)1 << 4)     // Error In Channel 4
#define DMA_ERR_ERR5                             ((uint32_t)1 << 5)     // Error In Channel 5
#define DMA_ERR_ERR6                             ((uint32_t)1 << 6)     // Error In Channel 6
#define DMA_ERR_ERR7                             ((uint32_t)1 << 7)     // Error In Channel 7
#define DMA_ERR_ERR8                             ((uint32_t)1 << 8)     // Error In Channel 8
#define DMA_ERR_ERR9                             ((uint32_t)1 << 9)     // Error In Channel 9
#define DMA_ERR_ERR10                            ((uint32_t)1 << 10)    // Error In Channel 10
#define DMA_ERR_ERR11                            ((uint32_t)1 << 11)    // Error In Channel 11
#define DMA_ERR_ERR12                            ((uint32_t)1 << 12)    // Error In Channel 12
#define DMA_ERR_ERR13                            ((uint32_t)1 << 13)    // Error In Channel 13
#define DMA_ERR_ERR14                            ((uint32_t)1 << 14)    // Error In Channel 14
#define DMA_ERR_ERR15                            ((uint32_t)1 << 15)    // Error In Channel 15

    uint8_t _res4[4];
    const uint32_t       HRS;                                           // Hardware Request Status Register
#define DMA_HRS_HRS0                             ((uint32_t)1 << 0)     // Hardware Request Status Channel 0
#define DMA_HRS_HRS1                             ((uint32_t)1 << 1)     // Hardware Request Status Channel 1
#define DMA_HRS_HRS2                             ((uint32_t)1 << 2)     // Hardware Request Status Channel 2
#define DMA_HRS_HRS3                             ((uint32_t)1 << 3)     // Hardware Request Status Channel 3
#define DMA_HRS_HRS4                             ((uint32_t)1 << 4)     // Hardware Request Status Channel 4
#define DMA_HRS_HRS5                             ((uint32_t)1 << 5)     // Hardware Request Status Channel 5
#define DMA_HRS_HRS6                             ((uint32_t)1 << 6)     // Hardware Request Status Channel 6
#define DMA_HRS_HRS7                             ((uint32_t)1 << 7)     // Hardware Request Status Channel 7
#define DMA_HRS_HRS8                             ((uint32_t)1 << 8)     // Hardware Request Status Channel 8
#define DMA_HRS_HRS9                             ((uint32_t)1 << 9)     // Hardware Request Status Channel 9
#define DMA_HRS_HRS10                            ((uint32_t)1 << 10)    // Hardware Request Status Channel 10
#define DMA_HRS_HRS11                            ((uint32_t)1 << 11)    // Hardware Request Status Channel 11
#define DMA_HRS_HRS12                            ((uint32_t)1 << 12)    // Hardware Request Status Channel 12
#define DMA_HRS_HRS13                            ((uint32_t)1 << 13)    // Hardware Request Status Channel 13
#define DMA_HRS_HRS14                            ((uint32_t)1 << 14)    // Hardware Request Status Channel 14
#define DMA_HRS_HRS15                            ((uint32_t)1 << 15)    // Hardware Request Status Channel 15

    uint8_t _res5[12];
    uint32_t             EARS;                                          // Enable Asynchronous Request in Stop Register
#define DMA_EARS_EDREQ_0                         ((uint32_t)1 << 0)     // Enable asynchronous DMA request in stop mode for channel 0.
#define DMA_EARS_EDREQ_1                         ((uint32_t)1 << 1)     // Enable asynchronous DMA request in stop mode for channel 1.
#define DMA_EARS_EDREQ_2                         ((uint32_t)1 << 2)     // Enable asynchronous DMA request in stop mode for channel 2.
#define DMA_EARS_EDREQ_3                         ((uint32_t)1 << 3)     // Enable asynchronous DMA request in stop mode for channel 3.
#define DMA_EARS_EDREQ_4                         ((uint32_t)1 << 4)     // Enable asynchronous DMA request in stop mode for channel 4
#define DMA_EARS_EDREQ_5                         ((uint32_t)1 << 5)     // Enable asynchronous DMA request in stop mode for channel 5
#define DMA_EARS_EDREQ_6                         ((uint32_t)1 << 6)     // Enable asynchronous DMA request in stop mode for channel 6
#define DMA_EARS_EDREQ_7                         ((uint32_t)1 << 7)     // Enable asynchronous DMA request in stop mode for channel 7
#define DMA_EARS_EDREQ_8                         ((uint32_t)1 << 8)     // Enable asynchronous DMA request in stop mode for channel 8
#define DMA_EARS_EDREQ_9                         ((uint32_t)1 << 9)     // Enable asynchronous DMA request in stop mode for channel 9
#define DMA_EARS_EDREQ_10                        ((uint32_t)1 << 10)    // Enable asynchronous DMA request in stop mode for channel 10
#define DMA_EARS_EDREQ_11                        ((uint32_t)1 << 11)    // Enable asynchronous DMA request in stop mode for channel 11
#define DMA_EARS_EDREQ_12                        ((uint32_t)1 << 12)    // Enable asynchronous DMA request in stop mode for channel 12
#define DMA_EARS_EDREQ_13                        ((uint32_t)1 << 13)    // Enable asynchronous DMA request in stop mode for channel 13
#define DMA_EARS_EDREQ_14                        ((uint32_t)1 << 14)    // Enable asynchronous DMA request in stop mode for channel 14
#define DMA_EARS_EDREQ_15                        ((uint32_t)1 << 15)    // Enable asynchronous DMA request in stop mode for channel 15

    uint8_t _res6[184];
    uint8_t              DCHPRI3;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI3_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI3_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI3_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI3_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI3_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI2;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI2_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI2_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI2_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI2_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI2_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI1;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI1_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI1_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI1_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI1_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI1_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI0;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI0_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI0_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI0_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI0_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI0_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI7;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI7_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI7_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI7_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI7_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI7_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI6;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI6_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI6_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI6_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI6_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI6_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI5;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI5_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI5_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI5_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI5_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI5_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI4;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI4_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI4_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI4_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI4_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI4_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI11;                                      // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI11_CHPRI(_n)                   (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI11_CHPRI_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI11_CHPRI_EXTRACT(_v)               (((_v) >> 0) & 0xf)
#define DMA_DCHPRI11_DPA                         ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI11_ECP                         ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI10;                                      // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI10_CHPRI(_n)                   (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI10_CHPRI_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI10_CHPRI_EXTRACT(_v)               (((_v) >> 0) & 0xf)
#define DMA_DCHPRI10_DPA                         ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI10_ECP                         ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI9;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI9_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI9_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI9_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI9_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI9_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI8;                                       // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI8_CHPRI(_n)                    (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI8_CHPRI_INSERT(_v, _n)             (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI8_CHPRI_EXTRACT(_v)                (((_v) >> 0) & 0xf)
#define DMA_DCHPRI8_DPA                          ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI8_ECP                          ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI15;                                      // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI15_CHPRI(_n)                   (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI15_CHPRI_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI15_CHPRI_EXTRACT(_v)               (((_v) >> 0) & 0xf)
#define DMA_DCHPRI15_DPA                         ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI15_ECP                         ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI14;                                      // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI14_CHPRI(_n)                   (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI14_CHPRI_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI14_CHPRI_EXTRACT(_v)               (((_v) >> 0) & 0xf)
#define DMA_DCHPRI14_DPA                         ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI14_ECP                         ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI13;                                      // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI13_CHPRI(_n)                   (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI13_CHPRI_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI13_CHPRI_EXTRACT(_v)               (((_v) >> 0) & 0xf)
#define DMA_DCHPRI13_DPA                         ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI13_ECP                         ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t              DCHPRI12;                                      // Channel n Priority Register
                                                                        // Channel n Arbitration Priority
#define DMA_DCHPRI12_CHPRI(_n)                   (((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI12_CHPRI_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint8_t)(_n) & 0xf) << 0)
#define DMA_DCHPRI12_CHPRI_EXTRACT(_v)               (((_v) >> 0) & 0xf)
#define DMA_DCHPRI12_DPA                         ((uint8_t)1 << 6)      // Disable Preempt Ability. This field resets to 0.
#define DMA_DCHPRI12_ECP                         ((uint8_t)1 << 7)      // Enable Channel Preemption. This field resets to 0.

    uint8_t _res7[3824];
    uint32_t             TCD0_SADDR;                                    // TCD Source Address
    uint16_t             TCD0_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD0_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD0_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD0_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD0_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD0_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD0_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD0_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD0_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD0_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD0_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD0_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD0_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD0_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD0_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD0_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD0_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD0_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD0_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD0_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD0_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD0_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD0_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD0_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD0_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD0_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD0_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD0_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD0_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD0_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD0_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD0_DADDR;                                    // TCD Destination Address
    uint16_t             TCD0_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD0_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD0_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD0_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD0_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD0_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD0_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD0_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD0_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD0_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD0_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD0_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD0_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD0_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD0_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD0_CSR;                                      // TCD Control and Status
#define DMA_TCD0_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD0_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD0_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD0_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD0_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD0_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD0_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD0_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD0_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD0_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD0_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD0_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD0_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD0_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD0_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD0_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD0_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD0_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD0_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD0_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD0_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD0_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD0_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD0_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD0_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD0_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD0_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD1_SADDR;                                    // TCD Source Address
    uint16_t             TCD1_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD1_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD1_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD1_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD1_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD1_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD1_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD1_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD1_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD1_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD1_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD1_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD1_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD1_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD1_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD1_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD1_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD1_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD1_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD1_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD1_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD1_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD1_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD1_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD1_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD1_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD1_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD1_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD1_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD1_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD1_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD1_DADDR;                                    // TCD Destination Address
    uint16_t             TCD1_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD1_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD1_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD1_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD1_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD1_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD1_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD1_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD1_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD1_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD1_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD1_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD1_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD1_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD1_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD1_CSR;                                      // TCD Control and Status
#define DMA_TCD1_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD1_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD1_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD1_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD1_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD1_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD1_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD1_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD1_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD1_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD1_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD1_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD1_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD1_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD1_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD1_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD1_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD1_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD1_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD1_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD1_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD1_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD1_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD1_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD1_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD1_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD1_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD2_SADDR;                                    // TCD Source Address
    uint16_t             TCD2_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD2_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD2_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD2_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD2_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD2_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD2_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD2_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD2_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD2_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD2_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD2_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD2_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD2_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD2_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD2_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD2_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD2_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD2_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD2_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD2_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD2_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD2_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD2_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD2_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD2_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD2_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD2_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD2_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD2_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD2_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD2_DADDR;                                    // TCD Destination Address
    uint16_t             TCD2_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD2_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD2_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD2_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD2_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD2_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD2_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD2_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD2_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD2_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD2_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD2_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD2_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD2_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD2_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD2_CSR;                                      // TCD Control and Status
#define DMA_TCD2_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD2_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD2_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD2_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD2_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD2_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD2_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD2_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD2_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD2_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD2_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD2_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD2_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD2_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD2_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD2_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD2_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD2_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD2_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD2_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD2_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD2_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD2_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD2_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD2_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD2_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD2_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD3_SADDR;                                    // TCD Source Address
    uint16_t             TCD3_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD3_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD3_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD3_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD3_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD3_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD3_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD3_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD3_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD3_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD3_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD3_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD3_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD3_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD3_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD3_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD3_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD3_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD3_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD3_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD3_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD3_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD3_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD3_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD3_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD3_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD3_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD3_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD3_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD3_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD3_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD3_DADDR;                                    // TCD Destination Address
    uint16_t             TCD3_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD3_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD3_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD3_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD3_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD3_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD3_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD3_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD3_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD3_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD3_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD3_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD3_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD3_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD3_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD3_CSR;                                      // TCD Control and Status
#define DMA_TCD3_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD3_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD3_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD3_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD3_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD3_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD3_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD3_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD3_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD3_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD3_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD3_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD3_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD3_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD3_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD3_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD3_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD3_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD3_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD3_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD3_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD3_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD3_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD3_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD3_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD3_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD3_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD4_SADDR;                                    // TCD Source Address
    uint16_t             TCD4_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD4_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD4_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD4_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD4_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD4_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD4_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD4_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD4_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD4_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD4_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD4_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD4_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD4_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD4_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD4_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD4_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD4_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD4_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD4_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD4_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD4_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD4_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD4_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD4_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD4_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD4_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD4_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD4_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD4_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD4_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD4_DADDR;                                    // TCD Destination Address
    uint16_t             TCD4_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD4_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD4_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD4_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD4_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD4_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD4_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD4_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD4_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD4_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD4_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD4_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD4_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD4_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD4_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD4_CSR;                                      // TCD Control and Status
#define DMA_TCD4_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD4_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD4_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD4_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD4_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD4_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD4_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD4_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD4_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD4_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD4_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD4_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD4_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD4_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD4_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD4_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD4_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD4_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD4_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD4_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD4_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD4_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD4_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD4_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD4_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD4_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD4_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD5_SADDR;                                    // TCD Source Address
    uint16_t             TCD5_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD5_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD5_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD5_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD5_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD5_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD5_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD5_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD5_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD5_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD5_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD5_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD5_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD5_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD5_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD5_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD5_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD5_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD5_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD5_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD5_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD5_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD5_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD5_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD5_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD5_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD5_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD5_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD5_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD5_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD5_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD5_DADDR;                                    // TCD Destination Address
    uint16_t             TCD5_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD5_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD5_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD5_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD5_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD5_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD5_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD5_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD5_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD5_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD5_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD5_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD5_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD5_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD5_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD5_CSR;                                      // TCD Control and Status
#define DMA_TCD5_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD5_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD5_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD5_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD5_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD5_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD5_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD5_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD5_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD5_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD5_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD5_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD5_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD5_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD5_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD5_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD5_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD5_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD5_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD5_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD5_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD5_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD5_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD5_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD5_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD5_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD5_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD6_SADDR;                                    // TCD Source Address
    uint16_t             TCD6_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD6_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD6_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD6_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD6_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD6_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD6_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD6_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD6_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD6_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD6_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD6_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD6_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD6_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD6_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD6_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD6_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD6_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD6_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD6_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD6_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD6_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD6_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD6_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD6_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD6_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD6_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD6_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD6_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD6_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD6_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD6_DADDR;                                    // TCD Destination Address
    uint16_t             TCD6_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD6_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD6_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD6_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD6_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD6_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD6_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD6_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD6_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD6_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD6_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD6_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD6_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD6_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD6_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD6_CSR;                                      // TCD Control and Status
#define DMA_TCD6_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD6_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD6_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD6_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD6_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD6_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD6_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD6_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD6_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD6_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD6_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD6_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD6_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD6_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD6_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD6_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD6_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD6_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD6_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD6_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD6_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD6_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD6_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD6_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD6_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD6_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD6_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD7_SADDR;                                    // TCD Source Address
    uint16_t             TCD7_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD7_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD7_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD7_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD7_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD7_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD7_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD7_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD7_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD7_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD7_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD7_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD7_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD7_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD7_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD7_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD7_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD7_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD7_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD7_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD7_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD7_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD7_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD7_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD7_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD7_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD7_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD7_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD7_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD7_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD7_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD7_DADDR;                                    // TCD Destination Address
    uint16_t             TCD7_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD7_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD7_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD7_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD7_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD7_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD7_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD7_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD7_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD7_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD7_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD7_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD7_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD7_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD7_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD7_CSR;                                      // TCD Control and Status
#define DMA_TCD7_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD7_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD7_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD7_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD7_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD7_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD7_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD7_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD7_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD7_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD7_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD7_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD7_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD7_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD7_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD7_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD7_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD7_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD7_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD7_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD7_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD7_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD7_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD7_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD7_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD7_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD7_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD8_SADDR;                                    // TCD Source Address
    uint16_t             TCD8_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD8_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD8_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD8_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD8_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD8_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD8_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD8_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD8_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD8_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD8_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD8_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD8_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD8_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD8_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD8_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD8_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD8_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD8_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD8_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD8_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD8_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD8_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD8_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD8_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD8_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD8_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD8_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD8_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD8_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD8_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD8_DADDR;                                    // TCD Destination Address
    uint16_t             TCD8_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD8_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD8_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD8_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD8_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD8_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD8_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD8_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD8_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD8_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD8_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD8_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD8_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD8_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD8_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD8_CSR;                                      // TCD Control and Status
#define DMA_TCD8_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD8_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD8_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD8_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD8_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD8_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD8_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD8_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD8_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD8_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD8_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD8_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD8_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD8_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD8_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD8_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD8_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD8_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD8_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD8_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD8_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD8_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD8_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD8_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD8_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD8_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD8_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD9_SADDR;                                    // TCD Source Address
    uint16_t             TCD9_SOFF;                                     // TCD Signed Source Address Offset
    uint16_t             TCD9_ATTR;                                     // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD9_ATTR_DSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD9_ATTR_DSIZE_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD9_ATTR_DSIZE_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD9_ATTR_DMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD9_ATTR_DMOD_INSERT(_v, _n)            (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD9_ATTR_DMOD_EXTRACT(_v)               (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD9_ATTR_SSIZE(_n)                  (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD9_ATTR_SSIZE_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD9_ATTR_SSIZE_EXTRACT(_v)              (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD9_ATTR_SMOD(_n)                   (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD9_ATTR_SMOD_INSERT(_v, _n)            (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD9_ATTR_SMOD_EXTRACT(_v)               (((_v) >> 11) & 0x1f)

    uint32_t             TCD9_NBYTES_MLNO;                              // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD9_NBYTES_MLOFFNO;                           // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD9_NBYTES_MLOFFNO_NBYTES(_n)       (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD9_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD9_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)   (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD9_NBYTES_MLOFFNO_DMLOE            ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD9_NBYTES_MLOFFNO_SMLOE            ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD9_NBYTES_MLOFFYES;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD9_NBYTES_MLOFFYES_NBYTES(_n)      (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD9_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD9_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD9_NBYTES_MLOFFYES_MLOFF(_n)       (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD9_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD9_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)   (((_v) >> 10) & 0xfffff)
#define DMA_TCD9_NBYTES_MLOFFYES_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD9_NBYTES_MLOFFYES_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD9_SLAST;                                    // TCD Last Source Address Adjustment
    uint32_t             TCD9_DADDR;                                    // TCD Destination Address
    uint16_t             TCD9_DOFF;                                     // TCD Signed Destination Address Offset
    uint16_t             TCD9_CITER_ELINKNO;                            // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD9_CITER_ELINKNO_CITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD9_CITER_ELINKNO_CITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD9_CITER_ELINKNO_CITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD9_CITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD9_CITER_ELINKYES;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD9_CITER_ELINKYES_CITER_LE(_n)     (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD9_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD9_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD9_CITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD9_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD9_CITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD9_CITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD9_DLASTSGA;                                 // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD9_CSR;                                      // TCD Control and Status
#define DMA_TCD9_CSR_START                       ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD9_CSR_INTMAJOR                    ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD9_CSR_INTHALF                     ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD9_CSR_DREQ                        ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD9_CSR_ESG                         ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD9_CSR_MAJORELINK                  ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD9_CSR_ACTIVE                      ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD9_CSR_DONE                        ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD9_CSR_MAJORLINKCH(_n)             (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD9_CSR_MAJORLINKCH_INSERT(_v, _n)      (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD9_CSR_MAJORLINKCH_EXTRACT(_v)         (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD9_CSR_BWC(_n)                     (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD9_CSR_BWC_INSERT(_v, _n)              (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD9_CSR_BWC_EXTRACT(_v)                 (((_v) >> 14) & 0x3)

    uint16_t             TCD9_BITER_ELINKNO;                            // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD9_BITER_ELINKNO_BITER(_n)         (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD9_BITER_ELINKNO_BITER_INSERT(_v, _n)  (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD9_BITER_ELINKNO_BITER_EXTRACT(_v)     (((_v) >> 0) & 0x7fff)
#define DMA_TCD9_BITER_ELINKNO_ELINK             ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD9_BITER_ELINKYES;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD9_BITER_ELINKYES_BITER(_n)        (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD9_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD9_BITER_ELINKYES_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD9_BITER_ELINKYES_LINKCH(_n)       (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD9_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD9_BITER_ELINKYES_LINKCH_EXTRACT(_v)   (((_v) >> 9) & 0xf)
#define DMA_TCD9_BITER_ELINKYES_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD10_SADDR;                                   // TCD Source Address
    uint16_t             TCD10_SOFF;                                    // TCD Signed Source Address Offset
    uint16_t             TCD10_ATTR;                                    // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD10_ATTR_DSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD10_ATTR_DSIZE_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD10_ATTR_DSIZE_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD10_ATTR_DMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD10_ATTR_DMOD_INSERT(_v, _n)           (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD10_ATTR_DMOD_EXTRACT(_v)              (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD10_ATTR_SSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD10_ATTR_SSIZE_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD10_ATTR_SSIZE_EXTRACT(_v)             (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD10_ATTR_SMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD10_ATTR_SMOD_INSERT(_v, _n)           (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD10_ATTR_SMOD_EXTRACT(_v)              (((_v) >> 11) & 0x1f)

    uint32_t             TCD10_NBYTES_MLNO;                             // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD10_NBYTES_MLOFFNO;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD10_NBYTES_MLOFFNO_NBYTES(_n)      (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD10_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD10_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD10_NBYTES_MLOFFNO_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD10_NBYTES_MLOFFNO_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD10_NBYTES_MLOFFYES;                         // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD10_NBYTES_MLOFFYES_NBYTES(_n)     (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD10_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD10_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v) (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD10_NBYTES_MLOFFYES_MLOFF(_n)      (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD10_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD10_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)  (((_v) >> 10) & 0xfffff)
#define DMA_TCD10_NBYTES_MLOFFYES_DMLOE          ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD10_NBYTES_MLOFFYES_SMLOE          ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD10_SLAST;                                   // TCD Last Source Address Adjustment
    uint32_t             TCD10_DADDR;                                   // TCD Destination Address
    uint16_t             TCD10_DOFF;                                    // TCD Signed Destination Address Offset
    uint16_t             TCD10_CITER_ELINKNO;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD10_CITER_ELINKNO_CITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD10_CITER_ELINKNO_CITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD10_CITER_ELINKNO_CITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD10_CITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD10_CITER_ELINKYES;                          // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD10_CITER_ELINKYES_CITER_LE(_n)    (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD10_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD10_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD10_CITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD10_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD10_CITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD10_CITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD10_DLASTSGA;                                // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD10_CSR;                                     // TCD Control and Status
#define DMA_TCD10_CSR_START                      ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD10_CSR_INTMAJOR                   ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD10_CSR_INTHALF                    ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD10_CSR_DREQ                       ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD10_CSR_ESG                        ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD10_CSR_MAJORELINK                 ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD10_CSR_ACTIVE                     ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD10_CSR_DONE                       ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD10_CSR_MAJORLINKCH(_n)            (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD10_CSR_MAJORLINKCH_INSERT(_v, _n)     (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD10_CSR_MAJORLINKCH_EXTRACT(_v)        (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD10_CSR_BWC(_n)                    (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD10_CSR_BWC_INSERT(_v, _n)             (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD10_CSR_BWC_EXTRACT(_v)                (((_v) >> 14) & 0x3)

    uint16_t             TCD10_BITER_ELINKNO;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD10_BITER_ELINKNO_BITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD10_BITER_ELINKNO_BITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD10_BITER_ELINKNO_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD10_BITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD10_BITER_ELINKYES;                          // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD10_BITER_ELINKYES_BITER(_n)       (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD10_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD10_BITER_ELINKYES_BITER_EXTRACT(_v)   (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD10_BITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD10_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD10_BITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD10_BITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD11_SADDR;                                   // TCD Source Address
    uint16_t             TCD11_SOFF;                                    // TCD Signed Source Address Offset
    uint16_t             TCD11_ATTR;                                    // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD11_ATTR_DSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD11_ATTR_DSIZE_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD11_ATTR_DSIZE_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD11_ATTR_DMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD11_ATTR_DMOD_INSERT(_v, _n)           (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD11_ATTR_DMOD_EXTRACT(_v)              (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD11_ATTR_SSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD11_ATTR_SSIZE_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD11_ATTR_SSIZE_EXTRACT(_v)             (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD11_ATTR_SMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD11_ATTR_SMOD_INSERT(_v, _n)           (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD11_ATTR_SMOD_EXTRACT(_v)              (((_v) >> 11) & 0x1f)

    uint32_t             TCD11_NBYTES_MLNO;                             // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD11_NBYTES_MLOFFNO;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD11_NBYTES_MLOFFNO_NBYTES(_n)      (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD11_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD11_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD11_NBYTES_MLOFFNO_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD11_NBYTES_MLOFFNO_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD11_NBYTES_MLOFFYES;                         // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD11_NBYTES_MLOFFYES_NBYTES(_n)     (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD11_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD11_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v) (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD11_NBYTES_MLOFFYES_MLOFF(_n)      (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD11_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD11_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)  (((_v) >> 10) & 0xfffff)
#define DMA_TCD11_NBYTES_MLOFFYES_DMLOE          ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD11_NBYTES_MLOFFYES_SMLOE          ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD11_SLAST;                                   // TCD Last Source Address Adjustment
    uint32_t             TCD11_DADDR;                                   // TCD Destination Address
    uint16_t             TCD11_DOFF;                                    // TCD Signed Destination Address Offset
    uint16_t             TCD11_CITER_ELINKNO;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD11_CITER_ELINKNO_CITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD11_CITER_ELINKNO_CITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD11_CITER_ELINKNO_CITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD11_CITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD11_CITER_ELINKYES;                          // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD11_CITER_ELINKYES_CITER_LE(_n)    (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD11_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD11_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD11_CITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD11_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD11_CITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD11_CITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD11_DLASTSGA;                                // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD11_CSR;                                     // TCD Control and Status
#define DMA_TCD11_CSR_START                      ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD11_CSR_INTMAJOR                   ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD11_CSR_INTHALF                    ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD11_CSR_DREQ                       ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD11_CSR_ESG                        ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD11_CSR_MAJORELINK                 ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD11_CSR_ACTIVE                     ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD11_CSR_DONE                       ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD11_CSR_MAJORLINKCH(_n)            (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD11_CSR_MAJORLINKCH_INSERT(_v, _n)     (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD11_CSR_MAJORLINKCH_EXTRACT(_v)        (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD11_CSR_BWC(_n)                    (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD11_CSR_BWC_INSERT(_v, _n)             (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD11_CSR_BWC_EXTRACT(_v)                (((_v) >> 14) & 0x3)

    uint16_t             TCD11_BITER_ELINKNO;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD11_BITER_ELINKNO_BITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD11_BITER_ELINKNO_BITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD11_BITER_ELINKNO_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD11_BITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD11_BITER_ELINKYES;                          // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD11_BITER_ELINKYES_BITER(_n)       (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD11_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD11_BITER_ELINKYES_BITER_EXTRACT(_v)   (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD11_BITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD11_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD11_BITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD11_BITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD12_SADDR;                                   // TCD Source Address
    uint16_t             TCD12_SOFF;                                    // TCD Signed Source Address Offset
    uint16_t             TCD12_ATTR;                                    // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD12_ATTR_DSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD12_ATTR_DSIZE_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD12_ATTR_DSIZE_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD12_ATTR_DMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD12_ATTR_DMOD_INSERT(_v, _n)           (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD12_ATTR_DMOD_EXTRACT(_v)              (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD12_ATTR_SSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD12_ATTR_SSIZE_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD12_ATTR_SSIZE_EXTRACT(_v)             (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD12_ATTR_SMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD12_ATTR_SMOD_INSERT(_v, _n)           (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD12_ATTR_SMOD_EXTRACT(_v)              (((_v) >> 11) & 0x1f)

    uint32_t             TCD12_NBYTES_MLNO;                             // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD12_NBYTES_MLOFFNO;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD12_NBYTES_MLOFFNO_NBYTES(_n)      (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD12_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD12_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD12_NBYTES_MLOFFNO_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD12_NBYTES_MLOFFNO_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD12_NBYTES_MLOFFYES;                         // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD12_NBYTES_MLOFFYES_NBYTES(_n)     (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD12_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD12_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v) (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD12_NBYTES_MLOFFYES_MLOFF(_n)      (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD12_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD12_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)  (((_v) >> 10) & 0xfffff)
#define DMA_TCD12_NBYTES_MLOFFYES_DMLOE          ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD12_NBYTES_MLOFFYES_SMLOE          ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD12_SLAST;                                   // TCD Last Source Address Adjustment
    uint32_t             TCD12_DADDR;                                   // TCD Destination Address
    uint16_t             TCD12_DOFF;                                    // TCD Signed Destination Address Offset
    uint16_t             TCD12_CITER_ELINKNO;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD12_CITER_ELINKNO_CITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD12_CITER_ELINKNO_CITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD12_CITER_ELINKNO_CITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD12_CITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD12_CITER_ELINKYES;                          // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD12_CITER_ELINKYES_CITER_LE(_n)    (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD12_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD12_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD12_CITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD12_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD12_CITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD12_CITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD12_DLASTSGA;                                // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD12_CSR;                                     // TCD Control and Status
#define DMA_TCD12_CSR_START                      ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD12_CSR_INTMAJOR                   ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD12_CSR_INTHALF                    ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD12_CSR_DREQ                       ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD12_CSR_ESG                        ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD12_CSR_MAJORELINK                 ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD12_CSR_ACTIVE                     ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD12_CSR_DONE                       ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD12_CSR_MAJORLINKCH(_n)            (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD12_CSR_MAJORLINKCH_INSERT(_v, _n)     (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD12_CSR_MAJORLINKCH_EXTRACT(_v)        (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD12_CSR_BWC(_n)                    (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD12_CSR_BWC_INSERT(_v, _n)             (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD12_CSR_BWC_EXTRACT(_v)                (((_v) >> 14) & 0x3)

    uint16_t             TCD12_BITER_ELINKNO;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD12_BITER_ELINKNO_BITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD12_BITER_ELINKNO_BITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD12_BITER_ELINKNO_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD12_BITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD12_BITER_ELINKYES;                          // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD12_BITER_ELINKYES_BITER(_n)       (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD12_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD12_BITER_ELINKYES_BITER_EXTRACT(_v)   (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD12_BITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD12_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD12_BITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD12_BITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD13_SADDR;                                   // TCD Source Address
    uint16_t             TCD13_SOFF;                                    // TCD Signed Source Address Offset
    uint16_t             TCD13_ATTR;                                    // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD13_ATTR_DSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD13_ATTR_DSIZE_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD13_ATTR_DSIZE_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD13_ATTR_DMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD13_ATTR_DMOD_INSERT(_v, _n)           (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD13_ATTR_DMOD_EXTRACT(_v)              (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD13_ATTR_SSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD13_ATTR_SSIZE_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD13_ATTR_SSIZE_EXTRACT(_v)             (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD13_ATTR_SMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD13_ATTR_SMOD_INSERT(_v, _n)           (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD13_ATTR_SMOD_EXTRACT(_v)              (((_v) >> 11) & 0x1f)

    uint32_t             TCD13_NBYTES_MLNO;                             // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD13_NBYTES_MLOFFNO;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD13_NBYTES_MLOFFNO_NBYTES(_n)      (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD13_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD13_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD13_NBYTES_MLOFFNO_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD13_NBYTES_MLOFFNO_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD13_NBYTES_MLOFFYES;                         // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD13_NBYTES_MLOFFYES_NBYTES(_n)     (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD13_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD13_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v) (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD13_NBYTES_MLOFFYES_MLOFF(_n)      (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD13_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD13_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)  (((_v) >> 10) & 0xfffff)
#define DMA_TCD13_NBYTES_MLOFFYES_DMLOE          ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD13_NBYTES_MLOFFYES_SMLOE          ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD13_SLAST;                                   // TCD Last Source Address Adjustment
    uint32_t             TCD13_DADDR;                                   // TCD Destination Address
    uint16_t             TCD13_DOFF;                                    // TCD Signed Destination Address Offset
    uint16_t             TCD13_CITER_ELINKNO;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD13_CITER_ELINKNO_CITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD13_CITER_ELINKNO_CITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD13_CITER_ELINKNO_CITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD13_CITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD13_CITER_ELINKYES;                          // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD13_CITER_ELINKYES_CITER_LE(_n)    (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD13_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD13_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD13_CITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD13_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD13_CITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD13_CITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD13_DLASTSGA;                                // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD13_CSR;                                     // TCD Control and Status
#define DMA_TCD13_CSR_START                      ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD13_CSR_INTMAJOR                   ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD13_CSR_INTHALF                    ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD13_CSR_DREQ                       ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD13_CSR_ESG                        ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD13_CSR_MAJORELINK                 ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD13_CSR_ACTIVE                     ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD13_CSR_DONE                       ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD13_CSR_MAJORLINKCH(_n)            (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD13_CSR_MAJORLINKCH_INSERT(_v, _n)     (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD13_CSR_MAJORLINKCH_EXTRACT(_v)        (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD13_CSR_BWC(_n)                    (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD13_CSR_BWC_INSERT(_v, _n)             (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD13_CSR_BWC_EXTRACT(_v)                (((_v) >> 14) & 0x3)

    uint16_t             TCD13_BITER_ELINKNO;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD13_BITER_ELINKNO_BITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD13_BITER_ELINKNO_BITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD13_BITER_ELINKNO_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD13_BITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD13_BITER_ELINKYES;                          // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD13_BITER_ELINKYES_BITER(_n)       (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD13_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD13_BITER_ELINKYES_BITER_EXTRACT(_v)   (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD13_BITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD13_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD13_BITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD13_BITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD14_SADDR;                                   // TCD Source Address
    uint16_t             TCD14_SOFF;                                    // TCD Signed Source Address Offset
    uint16_t             TCD14_ATTR;                                    // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD14_ATTR_DSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD14_ATTR_DSIZE_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD14_ATTR_DSIZE_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD14_ATTR_DMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD14_ATTR_DMOD_INSERT(_v, _n)           (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD14_ATTR_DMOD_EXTRACT(_v)              (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD14_ATTR_SSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD14_ATTR_SSIZE_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD14_ATTR_SSIZE_EXTRACT(_v)             (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD14_ATTR_SMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD14_ATTR_SMOD_INSERT(_v, _n)           (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD14_ATTR_SMOD_EXTRACT(_v)              (((_v) >> 11) & 0x1f)

    uint32_t             TCD14_NBYTES_MLNO;                             // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD14_NBYTES_MLOFFNO;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD14_NBYTES_MLOFFNO_NBYTES(_n)      (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD14_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD14_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD14_NBYTES_MLOFFNO_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD14_NBYTES_MLOFFNO_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD14_NBYTES_MLOFFYES;                         // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD14_NBYTES_MLOFFYES_NBYTES(_n)     (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD14_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD14_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v) (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD14_NBYTES_MLOFFYES_MLOFF(_n)      (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD14_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD14_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)  (((_v) >> 10) & 0xfffff)
#define DMA_TCD14_NBYTES_MLOFFYES_DMLOE          ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD14_NBYTES_MLOFFYES_SMLOE          ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD14_SLAST;                                   // TCD Last Source Address Adjustment
    uint32_t             TCD14_DADDR;                                   // TCD Destination Address
    uint16_t             TCD14_DOFF;                                    // TCD Signed Destination Address Offset
    uint16_t             TCD14_CITER_ELINKNO;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD14_CITER_ELINKNO_CITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD14_CITER_ELINKNO_CITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD14_CITER_ELINKNO_CITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD14_CITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD14_CITER_ELINKYES;                          // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD14_CITER_ELINKYES_CITER_LE(_n)    (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD14_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD14_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD14_CITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD14_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD14_CITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD14_CITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD14_DLASTSGA;                                // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD14_CSR;                                     // TCD Control and Status
#define DMA_TCD14_CSR_START                      ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD14_CSR_INTMAJOR                   ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD14_CSR_INTHALF                    ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD14_CSR_DREQ                       ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD14_CSR_ESG                        ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD14_CSR_MAJORELINK                 ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD14_CSR_ACTIVE                     ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD14_CSR_DONE                       ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD14_CSR_MAJORLINKCH(_n)            (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD14_CSR_MAJORLINKCH_INSERT(_v, _n)     (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD14_CSR_MAJORLINKCH_EXTRACT(_v)        (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD14_CSR_BWC(_n)                    (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD14_CSR_BWC_INSERT(_v, _n)             (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD14_CSR_BWC_EXTRACT(_v)                (((_v) >> 14) & 0x3)

    uint16_t             TCD14_BITER_ELINKNO;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD14_BITER_ELINKNO_BITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD14_BITER_ELINKNO_BITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD14_BITER_ELINKNO_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD14_BITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD14_BITER_ELINKYES;                          // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD14_BITER_ELINKYES_BITER(_n)       (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD14_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD14_BITER_ELINKYES_BITER_EXTRACT(_v)   (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD14_BITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD14_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD14_BITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD14_BITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint32_t             TCD15_SADDR;                                   // TCD Source Address
    uint16_t             TCD15_SOFF;                                    // TCD Signed Source Address Offset
    uint16_t             TCD15_ATTR;                                    // TCD Transfer Attributes
                                                                        // Destination data transfer size
#define DMA_TCD15_ATTR_DSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD15_ATTR_DSIZE_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint16_t)(_n) & 0x7) << 0)
#define DMA_TCD15_ATTR_DSIZE_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // Destination Address Modulo
#define DMA_TCD15_ATTR_DMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD15_ATTR_DMOD_INSERT(_v, _n)           (((_v) & ~0xf8) | ((uint16_t)(_n) & 0x1f) << 3)
#define DMA_TCD15_ATTR_DMOD_EXTRACT(_v)              (((_v) >> 3) & 0x1f)
                                                                        // Source data transfer size
#define DMA_TCD15_ATTR_SSIZE(_n)                 (((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD15_ATTR_SSIZE_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint16_t)(_n) & 0x7) << 8)
#define DMA_TCD15_ATTR_SSIZE_EXTRACT(_v)             (((_v) >> 8) & 0x7)
                                                                        // Source Address Modulo
#define DMA_TCD15_ATTR_SMOD(_n)                  (((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD15_ATTR_SMOD_INSERT(_v, _n)           (((_v) & ~0xf800) | ((uint16_t)(_n) & 0x1f) << 11)
#define DMA_TCD15_ATTR_SMOD_EXTRACT(_v)              (((_v) >> 11) & 0x1f)

    uint32_t             TCD15_NBYTES_MLNO;                             // TCD Minor Byte Count (Minor Loop Mapping Disabled)
    uint32_t             TCD15_NBYTES_MLOFFNO;                          // TCD Signed Minor Loop Offset (Minor Loop Mapping Enabled and Offset Disabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD15_NBYTES_MLOFFNO_NBYTES(_n)      (((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD15_NBYTES_MLOFFNO_NBYTES_INSERT(_v, _n) (((_v) & ~0x3fffffff) | ((uint32_t)(_n) & 0x3fffffff) << 0)
#define DMA_TCD15_NBYTES_MLOFFNO_NBYTES_EXTRACT(_v)  (((_v) >> 0) & 0x3fffffff)
#define DMA_TCD15_NBYTES_MLOFFNO_DMLOE           ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD15_NBYTES_MLOFFNO_SMLOE           ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD15_NBYTES_MLOFFYES;                         // TCD Signed Minor Loop Offset (Minor Loop Mapping and Offset Enabled)
                                                                        // Minor Byte Transfer Count
#define DMA_TCD15_NBYTES_MLOFFYES_NBYTES(_n)     (((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD15_NBYTES_MLOFFYES_NBYTES_INSERT(_v, _n) (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define DMA_TCD15_NBYTES_MLOFFYES_NBYTES_EXTRACT(_v) (((_v) >> 0) & 0x3ff)
                                                                        // If SMLOE or DMLOE is set, this field represents a sign-extended offset applied to the source or destination address to form the next-state value after the minor loop completes.
#define DMA_TCD15_NBYTES_MLOFFYES_MLOFF(_n)      (((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD15_NBYTES_MLOFFYES_MLOFF_INSERT(_v, _n) (((_v) & ~0x3ffffc00) | ((uint32_t)(_n) & 0xfffff) << 10)
#define DMA_TCD15_NBYTES_MLOFFYES_MLOFF_EXTRACT(_v)  (((_v) >> 10) & 0xfffff)
#define DMA_TCD15_NBYTES_MLOFFYES_DMLOE          ((uint32_t)1 << 30)    // Destination Minor Loop Offset enable
#define DMA_TCD15_NBYTES_MLOFFYES_SMLOE          ((uint32_t)1 << 31)    // Source Minor Loop Offset Enable

    uint32_t             TCD15_SLAST;                                   // TCD Last Source Address Adjustment
    uint32_t             TCD15_DADDR;                                   // TCD Destination Address
    uint16_t             TCD15_DOFF;                                    // TCD Signed Destination Address Offset
    uint16_t             TCD15_CITER_ELINKNO;                           // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD15_CITER_ELINKNO_CITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD15_CITER_ELINKNO_CITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD15_CITER_ELINKNO_CITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD15_CITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint16_t             TCD15_CITER_ELINKYES;                          // TCD Current Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Current Major Iteration Count
#define DMA_TCD15_CITER_ELINKYES_CITER_LE(_n)    (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD15_CITER_ELINKYES_CITER_LE_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD15_CITER_ELINKYES_CITER_LE_EXTRACT(_v) (((_v) >> 0) & 0x1ff)
                                                                        // Minor Loop Link Channel Number
#define DMA_TCD15_CITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD15_CITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD15_CITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD15_CITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enable channel-to-channel linking on minor-loop complete

    uint32_t             TCD15_DLASTSGA;                                // TCD Last Destination Address Adjustment/Scatter Gather Address
    uint16_t             TCD15_CSR;                                     // TCD Control and Status
#define DMA_TCD15_CSR_START                      ((uint16_t)1 << 0)     // Channel Start
#define DMA_TCD15_CSR_INTMAJOR                   ((uint16_t)1 << 1)     // Enable an interrupt when major iteration count completes.
#define DMA_TCD15_CSR_INTHALF                    ((uint16_t)1 << 2)     // Enable an interrupt when major counter is half complete.
#define DMA_TCD15_CSR_DREQ                       ((uint16_t)1 << 3)     // Disable Request
#define DMA_TCD15_CSR_ESG                        ((uint16_t)1 << 4)     // Enable Scatter/Gather Processing
#define DMA_TCD15_CSR_MAJORELINK                 ((uint16_t)1 << 5)     // Enable channel-to-channel linking on major loop complete
#define DMA_TCD15_CSR_ACTIVE                     ((uint16_t)1 << 6)     // Channel Active
#define DMA_TCD15_CSR_DONE                       ((uint16_t)1 << 7)     // Channel Done
                                                                        // Major Loop Link Channel Number
#define DMA_TCD15_CSR_MAJORLINKCH(_n)            (((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD15_CSR_MAJORLINKCH_INSERT(_v, _n)     (((_v) & ~0xf00) | ((uint16_t)(_n) & 0xf) << 8)
#define DMA_TCD15_CSR_MAJORLINKCH_EXTRACT(_v)        (((_v) >> 8) & 0xf)
                                                                        // Bandwidth Control
#define DMA_TCD15_CSR_BWC(_n)                    (((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD15_CSR_BWC_INSERT(_v, _n)             (((_v) & ~0xc000) | ((uint16_t)(_n) & 0x3) << 14)
#define DMA_TCD15_CSR_BWC_EXTRACT(_v)                (((_v) >> 14) & 0x3)

    uint16_t             TCD15_BITER_ELINKNO;                           // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Disabled)
                                                                        // Starting Major Iteration Count
#define DMA_TCD15_BITER_ELINKNO_BITER(_n)        (((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD15_BITER_ELINKNO_BITER_INSERT(_v, _n) (((_v) & ~0x7fff) | ((uint16_t)(_n) & 0x7fff) << 0)
#define DMA_TCD15_BITER_ELINKNO_BITER_EXTRACT(_v)    (((_v) >> 0) & 0x7fff)
#define DMA_TCD15_BITER_ELINKNO_ELINK            ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

    uint16_t             TCD15_BITER_ELINKYES;                          // TCD Beginning Minor Loop Link, Major Loop Count (Channel Linking Enabled)
                                                                        // Starting major iteration count
#define DMA_TCD15_BITER_ELINKYES_BITER(_n)       (((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD15_BITER_ELINKYES_BITER_INSERT(_v, _n) (((_v) & ~0x1ff) | ((uint16_t)(_n) & 0x1ff) << 0)
#define DMA_TCD15_BITER_ELINKYES_BITER_EXTRACT(_v)   (((_v) >> 0) & 0x1ff)
                                                                        // Link Channel Number
#define DMA_TCD15_BITER_ELINKYES_LINKCH(_n)      (((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD15_BITER_ELINKYES_LINKCH_INSERT(_v, _n) (((_v) & ~0x1e00) | ((uint16_t)(_n) & 0xf) << 9)
#define DMA_TCD15_BITER_ELINKYES_LINKCH_EXTRACT(_v)  (((_v) >> 9) & 0xf)
#define DMA_TCD15_BITER_ELINKYES_ELINK           ((uint16_t)1 << 15)    // Enables channel-to-channel linking on minor loop complete

} DMA_regs_t;
                                                                        // --------------------
                                                                        // Memory protection unit
typedef struct                                                          // --------------------
{
    uint32_t             CESR;                                          // Control/Error Status Register
#define MPU_CESR_VLD                             ((uint32_t)1 << 0)     // Valid
                                                                        // Number Of Region Descriptors
#define MPU_CESR_NRGD(_n)                        (((uint32_t)(_n) & 0xf) << 8)
#define MPU_CESR_NRGD_INSERT(_v, _n)                 (((_v) & ~0xf00) | ((uint32_t)(_n) & 0xf) << 8)
#define MPU_CESR_NRGD_EXTRACT(_v)                    (((_v) >> 8) & 0xf)
                                                                        // Number Of Slave Ports
#define MPU_CESR_NSP(_n)                         (((uint32_t)(_n) & 0xf) << 12)
#define MPU_CESR_NSP_INSERT(_v, _n)                  (((_v) & ~0xf000) | ((uint32_t)(_n) & 0xf) << 12)
#define MPU_CESR_NSP_EXTRACT(_v)                     (((_v) >> 12) & 0xf)
                                                                        // Hardware Revision Level
#define MPU_CESR_HRL(_n)                         (((uint32_t)(_n) & 0xf) << 16)
#define MPU_CESR_HRL_INSERT(_v, _n)                  (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define MPU_CESR_HRL_EXTRACT(_v)                     (((_v) >> 16) & 0xf)
#define MPU_CESR_SPERR3                          ((uint32_t)1 << 28)    // Slave Port 3 Error
#define MPU_CESR_SPERR2                          ((uint32_t)1 << 29)    // Slave Port 2 Error
#define MPU_CESR_SPERR1                          ((uint32_t)1 << 30)    // Slave Port 1 Error
#define MPU_CESR_SPERR0                          ((uint32_t)1 << 31)    // Slave Port 0 Error

    uint8_t _res0[12];
    const uint32_t       EAR0;                                          // Error Address Register, slave port 0
    const uint32_t       EDR0;                                          // Error Detail Register, slave port 0
#define MPU_EDR0_ERW                             ((uint32_t)1 << 0)     // Error Read/Write
                                                                        // Error Attributes
#define MPU_EDR0_EATTR_EXTRACT(_v)                   (((_v) >> 1) & 0x7)
                                                                        // Error Master Number
#define MPU_EDR0_EMN_EXTRACT(_v)                     (((_v) >> 4) & 0xf)
                                                                        // Error Process Identification
#define MPU_EDR0_EPID_EXTRACT(_v)                    (((_v) >> 8) & 0xff)
                                                                        // Error Access Control Detail
#define MPU_EDR0_EACD_EXTRACT(_v)                    (((_v) >> 16) & 0xffff)

    const uint32_t       EAR1;                                          // Error Address Register, slave port 1
    const uint32_t       EDR1;                                          // Error Detail Register, slave port 1
#define MPU_EDR1_ERW                             ((uint32_t)1 << 0)     // Error Read/Write
                                                                        // Error Attributes
#define MPU_EDR1_EATTR_EXTRACT(_v)                   (((_v) >> 1) & 0x7)
                                                                        // Error Master Number
#define MPU_EDR1_EMN_EXTRACT(_v)                     (((_v) >> 4) & 0xf)
                                                                        // Error Process Identification
#define MPU_EDR1_EPID_EXTRACT(_v)                    (((_v) >> 8) & 0xff)
                                                                        // Error Access Control Detail
#define MPU_EDR1_EACD_EXTRACT(_v)                    (((_v) >> 16) & 0xffff)

    const uint32_t       EAR2;                                          // Error Address Register, slave port 2
    const uint32_t       EDR2;                                          // Error Detail Register, slave port 2
#define MPU_EDR2_ERW                             ((uint32_t)1 << 0)     // Error Read/Write
                                                                        // Error Attributes
#define MPU_EDR2_EATTR_EXTRACT(_v)                   (((_v) >> 1) & 0x7)
                                                                        // Error Master Number
#define MPU_EDR2_EMN_EXTRACT(_v)                     (((_v) >> 4) & 0xf)
                                                                        // Error Process Identification
#define MPU_EDR2_EPID_EXTRACT(_v)                    (((_v) >> 8) & 0xff)
                                                                        // Error Access Control Detail
#define MPU_EDR2_EACD_EXTRACT(_v)                    (((_v) >> 16) & 0xffff)

    const uint32_t       EAR3;                                          // Error Address Register, slave port 3
    const uint32_t       EDR3;                                          // Error Detail Register, slave port 3
#define MPU_EDR3_ERW                             ((uint32_t)1 << 0)     // Error Read/Write
                                                                        // Error Attributes
#define MPU_EDR3_EATTR_EXTRACT(_v)                   (((_v) >> 1) & 0x7)
                                                                        // Error Master Number
#define MPU_EDR3_EMN_EXTRACT(_v)                     (((_v) >> 4) & 0xf)
                                                                        // Error Process Identification
#define MPU_EDR3_EPID_EXTRACT(_v)                    (((_v) >> 8) & 0xff)
                                                                        // Error Access Control Detail
#define MPU_EDR3_EACD_EXTRACT(_v)                    (((_v) >> 16) & 0xffff)

    uint8_t _res1[976];
    uint32_t             RGD0_WORD0;                                    // Region Descriptor 0, Word 0
                                                                        // Start Address
#define MPU_RGD0_WORD0_SRTADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD0_WORD0_SRTADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD0_WORD0_SRTADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD0_WORD1;                                    // Region Descriptor 0, Word 1
                                                                        // End Address
#define MPU_RGD0_WORD1_ENDADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD0_WORD1_ENDADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD0_WORD1_ENDADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD0_WORD2;                                    // Region Descriptor 0, Word 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGD0_WORD2_M0UM(_n)                  (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD0_WORD2_M0UM_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD0_WORD2_M0UM_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGD0_WORD2_M0SM(_n)                  (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD0_WORD2_M0SM_INSERT(_v, _n)           (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD0_WORD2_M0SM_EXTRACT(_v)              (((_v) >> 3) & 0x3)
#define MPU_RGD0_WORD2_M0PE                      ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGD0_WORD2_M1UM(_n)                  (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD0_WORD2_M1UM_INSERT(_v, _n)           (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD0_WORD2_M1UM_EXTRACT(_v)              (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGD0_WORD2_M1SM(_n)                  (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD0_WORD2_M1SM_INSERT(_v, _n)           (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD0_WORD2_M1SM_EXTRACT(_v)              (((_v) >> 9) & 0x3)
#define MPU_RGD0_WORD2_M1PE                      ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier enable
                                                                        // Bus Master 2 User Mode Access control
#define MPU_RGD0_WORD2_M2UM(_n)                  (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD0_WORD2_M2UM_INSERT(_v, _n)           (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD0_WORD2_M2UM_EXTRACT(_v)              (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGD0_WORD2_M2SM(_n)                  (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD0_WORD2_M2SM_INSERT(_v, _n)           (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD0_WORD2_M2SM_EXTRACT(_v)              (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGD0_WORD2_M3UM(_n)                  (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD0_WORD2_M3UM_INSERT(_v, _n)           (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD0_WORD2_M3UM_EXTRACT(_v)              (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGD0_WORD2_M3SM(_n)                  (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD0_WORD2_M3SM_INSERT(_v, _n)           (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD0_WORD2_M3SM_EXTRACT(_v)              (((_v) >> 21) & 0x3)
#define MPU_RGD0_WORD2_M4WE                      ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGD0_WORD2_M4RE                      ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGD0_WORD2_M5WE                      ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGD0_WORD2_M5RE                      ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGD0_WORD2_M6WE                      ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGD0_WORD2_M6RE                      ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGD0_WORD2_M7WE                      ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGD0_WORD2_M7RE                      ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGD0_WORD3;                                    // Region Descriptor 0, Word 3
#define MPU_RGD0_WORD3_VLD                       ((uint32_t)1 << 0)     // Valid
                                                                        // Process Identifier Mask
#define MPU_RGD0_WORD3_PIDMASK(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD0_WORD3_PIDMASK_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD0_WORD3_PIDMASK_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Process Identifier
#define MPU_RGD0_WORD3_PID(_n)                   (((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD0_WORD3_PID_INSERT(_v, _n)            (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD0_WORD3_PID_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    uint32_t             RGD1_WORD0;                                    // Region Descriptor 1, Word 0
                                                                        // Start Address
#define MPU_RGD1_WORD0_SRTADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD1_WORD0_SRTADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD1_WORD0_SRTADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD1_WORD1;                                    // Region Descriptor 1, Word 1
                                                                        // End Address
#define MPU_RGD1_WORD1_ENDADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD1_WORD1_ENDADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD1_WORD1_ENDADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD1_WORD2;                                    // Region Descriptor 1, Word 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGD1_WORD2_M0UM(_n)                  (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD1_WORD2_M0UM_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD1_WORD2_M0UM_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGD1_WORD2_M0SM(_n)                  (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD1_WORD2_M0SM_INSERT(_v, _n)           (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD1_WORD2_M0SM_EXTRACT(_v)              (((_v) >> 3) & 0x3)
#define MPU_RGD1_WORD2_M0PE                      ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGD1_WORD2_M1UM(_n)                  (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD1_WORD2_M1UM_INSERT(_v, _n)           (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD1_WORD2_M1UM_EXTRACT(_v)              (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGD1_WORD2_M1SM(_n)                  (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD1_WORD2_M1SM_INSERT(_v, _n)           (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD1_WORD2_M1SM_EXTRACT(_v)              (((_v) >> 9) & 0x3)
#define MPU_RGD1_WORD2_M1PE                      ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier enable
                                                                        // Bus Master 2 User Mode Access control
#define MPU_RGD1_WORD2_M2UM(_n)                  (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD1_WORD2_M2UM_INSERT(_v, _n)           (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD1_WORD2_M2UM_EXTRACT(_v)              (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGD1_WORD2_M2SM(_n)                  (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD1_WORD2_M2SM_INSERT(_v, _n)           (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD1_WORD2_M2SM_EXTRACT(_v)              (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGD1_WORD2_M3UM(_n)                  (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD1_WORD2_M3UM_INSERT(_v, _n)           (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD1_WORD2_M3UM_EXTRACT(_v)              (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGD1_WORD2_M3SM(_n)                  (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD1_WORD2_M3SM_INSERT(_v, _n)           (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD1_WORD2_M3SM_EXTRACT(_v)              (((_v) >> 21) & 0x3)
#define MPU_RGD1_WORD2_M4WE                      ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGD1_WORD2_M4RE                      ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGD1_WORD2_M5WE                      ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGD1_WORD2_M5RE                      ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGD1_WORD2_M6WE                      ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGD1_WORD2_M6RE                      ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGD1_WORD2_M7WE                      ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGD1_WORD2_M7RE                      ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGD1_WORD3;                                    // Region Descriptor 1, Word 3
#define MPU_RGD1_WORD3_VLD                       ((uint32_t)1 << 0)     // Valid
                                                                        // Process Identifier Mask
#define MPU_RGD1_WORD3_PIDMASK(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD1_WORD3_PIDMASK_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD1_WORD3_PIDMASK_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Process Identifier
#define MPU_RGD1_WORD3_PID(_n)                   (((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD1_WORD3_PID_INSERT(_v, _n)            (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD1_WORD3_PID_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    uint32_t             RGD2_WORD0;                                    // Region Descriptor 2, Word 0
                                                                        // Start Address
#define MPU_RGD2_WORD0_SRTADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD2_WORD0_SRTADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD2_WORD0_SRTADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD2_WORD1;                                    // Region Descriptor 2, Word 1
                                                                        // End Address
#define MPU_RGD2_WORD1_ENDADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD2_WORD1_ENDADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD2_WORD1_ENDADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD2_WORD2;                                    // Region Descriptor 2, Word 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGD2_WORD2_M0UM(_n)                  (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD2_WORD2_M0UM_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD2_WORD2_M0UM_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGD2_WORD2_M0SM(_n)                  (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD2_WORD2_M0SM_INSERT(_v, _n)           (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD2_WORD2_M0SM_EXTRACT(_v)              (((_v) >> 3) & 0x3)
#define MPU_RGD2_WORD2_M0PE                      ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGD2_WORD2_M1UM(_n)                  (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD2_WORD2_M1UM_INSERT(_v, _n)           (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD2_WORD2_M1UM_EXTRACT(_v)              (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGD2_WORD2_M1SM(_n)                  (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD2_WORD2_M1SM_INSERT(_v, _n)           (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD2_WORD2_M1SM_EXTRACT(_v)              (((_v) >> 9) & 0x3)
#define MPU_RGD2_WORD2_M1PE                      ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier enable
                                                                        // Bus Master 2 User Mode Access control
#define MPU_RGD2_WORD2_M2UM(_n)                  (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD2_WORD2_M2UM_INSERT(_v, _n)           (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD2_WORD2_M2UM_EXTRACT(_v)              (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGD2_WORD2_M2SM(_n)                  (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD2_WORD2_M2SM_INSERT(_v, _n)           (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD2_WORD2_M2SM_EXTRACT(_v)              (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGD2_WORD2_M3UM(_n)                  (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD2_WORD2_M3UM_INSERT(_v, _n)           (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD2_WORD2_M3UM_EXTRACT(_v)              (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGD2_WORD2_M3SM(_n)                  (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD2_WORD2_M3SM_INSERT(_v, _n)           (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD2_WORD2_M3SM_EXTRACT(_v)              (((_v) >> 21) & 0x3)
#define MPU_RGD2_WORD2_M4WE                      ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGD2_WORD2_M4RE                      ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGD2_WORD2_M5WE                      ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGD2_WORD2_M5RE                      ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGD2_WORD2_M6WE                      ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGD2_WORD2_M6RE                      ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGD2_WORD2_M7WE                      ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGD2_WORD2_M7RE                      ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGD2_WORD3;                                    // Region Descriptor 2, Word 3
#define MPU_RGD2_WORD3_VLD                       ((uint32_t)1 << 0)     // Valid
                                                                        // Process Identifier Mask
#define MPU_RGD2_WORD3_PIDMASK(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD2_WORD3_PIDMASK_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD2_WORD3_PIDMASK_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Process Identifier
#define MPU_RGD2_WORD3_PID(_n)                   (((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD2_WORD3_PID_INSERT(_v, _n)            (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD2_WORD3_PID_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    uint32_t             RGD3_WORD0;                                    // Region Descriptor 3, Word 0
                                                                        // Start Address
#define MPU_RGD3_WORD0_SRTADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD3_WORD0_SRTADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD3_WORD0_SRTADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD3_WORD1;                                    // Region Descriptor 3, Word 1
                                                                        // End Address
#define MPU_RGD3_WORD1_ENDADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD3_WORD1_ENDADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD3_WORD1_ENDADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD3_WORD2;                                    // Region Descriptor 3, Word 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGD3_WORD2_M0UM(_n)                  (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD3_WORD2_M0UM_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD3_WORD2_M0UM_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGD3_WORD2_M0SM(_n)                  (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD3_WORD2_M0SM_INSERT(_v, _n)           (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD3_WORD2_M0SM_EXTRACT(_v)              (((_v) >> 3) & 0x3)
#define MPU_RGD3_WORD2_M0PE                      ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGD3_WORD2_M1UM(_n)                  (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD3_WORD2_M1UM_INSERT(_v, _n)           (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD3_WORD2_M1UM_EXTRACT(_v)              (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGD3_WORD2_M1SM(_n)                  (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD3_WORD2_M1SM_INSERT(_v, _n)           (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD3_WORD2_M1SM_EXTRACT(_v)              (((_v) >> 9) & 0x3)
#define MPU_RGD3_WORD2_M1PE                      ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier enable
                                                                        // Bus Master 2 User Mode Access control
#define MPU_RGD3_WORD2_M2UM(_n)                  (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD3_WORD2_M2UM_INSERT(_v, _n)           (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD3_WORD2_M2UM_EXTRACT(_v)              (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGD3_WORD2_M2SM(_n)                  (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD3_WORD2_M2SM_INSERT(_v, _n)           (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD3_WORD2_M2SM_EXTRACT(_v)              (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGD3_WORD2_M3UM(_n)                  (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD3_WORD2_M3UM_INSERT(_v, _n)           (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD3_WORD2_M3UM_EXTRACT(_v)              (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGD3_WORD2_M3SM(_n)                  (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD3_WORD2_M3SM_INSERT(_v, _n)           (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD3_WORD2_M3SM_EXTRACT(_v)              (((_v) >> 21) & 0x3)
#define MPU_RGD3_WORD2_M4WE                      ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGD3_WORD2_M4RE                      ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGD3_WORD2_M5WE                      ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGD3_WORD2_M5RE                      ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGD3_WORD2_M6WE                      ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGD3_WORD2_M6RE                      ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGD3_WORD2_M7WE                      ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGD3_WORD2_M7RE                      ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGD3_WORD3;                                    // Region Descriptor 3, Word 3
#define MPU_RGD3_WORD3_VLD                       ((uint32_t)1 << 0)     // Valid
                                                                        // Process Identifier Mask
#define MPU_RGD3_WORD3_PIDMASK(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD3_WORD3_PIDMASK_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD3_WORD3_PIDMASK_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Process Identifier
#define MPU_RGD3_WORD3_PID(_n)                   (((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD3_WORD3_PID_INSERT(_v, _n)            (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD3_WORD3_PID_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    uint32_t             RGD4_WORD0;                                    // Region Descriptor 4, Word 0
                                                                        // Start Address
#define MPU_RGD4_WORD0_SRTADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD4_WORD0_SRTADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD4_WORD0_SRTADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD4_WORD1;                                    // Region Descriptor 4, Word 1
                                                                        // End Address
#define MPU_RGD4_WORD1_ENDADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD4_WORD1_ENDADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD4_WORD1_ENDADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD4_WORD2;                                    // Region Descriptor 4, Word 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGD4_WORD2_M0UM(_n)                  (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD4_WORD2_M0UM_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD4_WORD2_M0UM_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGD4_WORD2_M0SM(_n)                  (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD4_WORD2_M0SM_INSERT(_v, _n)           (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD4_WORD2_M0SM_EXTRACT(_v)              (((_v) >> 3) & 0x3)
#define MPU_RGD4_WORD2_M0PE                      ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGD4_WORD2_M1UM(_n)                  (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD4_WORD2_M1UM_INSERT(_v, _n)           (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD4_WORD2_M1UM_EXTRACT(_v)              (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGD4_WORD2_M1SM(_n)                  (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD4_WORD2_M1SM_INSERT(_v, _n)           (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD4_WORD2_M1SM_EXTRACT(_v)              (((_v) >> 9) & 0x3)
#define MPU_RGD4_WORD2_M1PE                      ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier enable
                                                                        // Bus Master 2 User Mode Access control
#define MPU_RGD4_WORD2_M2UM(_n)                  (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD4_WORD2_M2UM_INSERT(_v, _n)           (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD4_WORD2_M2UM_EXTRACT(_v)              (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGD4_WORD2_M2SM(_n)                  (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD4_WORD2_M2SM_INSERT(_v, _n)           (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD4_WORD2_M2SM_EXTRACT(_v)              (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGD4_WORD2_M3UM(_n)                  (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD4_WORD2_M3UM_INSERT(_v, _n)           (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD4_WORD2_M3UM_EXTRACT(_v)              (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGD4_WORD2_M3SM(_n)                  (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD4_WORD2_M3SM_INSERT(_v, _n)           (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD4_WORD2_M3SM_EXTRACT(_v)              (((_v) >> 21) & 0x3)
#define MPU_RGD4_WORD2_M4WE                      ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGD4_WORD2_M4RE                      ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGD4_WORD2_M5WE                      ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGD4_WORD2_M5RE                      ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGD4_WORD2_M6WE                      ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGD4_WORD2_M6RE                      ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGD4_WORD2_M7WE                      ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGD4_WORD2_M7RE                      ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGD4_WORD3;                                    // Region Descriptor 4, Word 3
#define MPU_RGD4_WORD3_VLD                       ((uint32_t)1 << 0)     // Valid
                                                                        // Process Identifier Mask
#define MPU_RGD4_WORD3_PIDMASK(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD4_WORD3_PIDMASK_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD4_WORD3_PIDMASK_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Process Identifier
#define MPU_RGD4_WORD3_PID(_n)                   (((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD4_WORD3_PID_INSERT(_v, _n)            (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD4_WORD3_PID_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    uint32_t             RGD5_WORD0;                                    // Region Descriptor 5, Word 0
                                                                        // Start Address
#define MPU_RGD5_WORD0_SRTADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD5_WORD0_SRTADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD5_WORD0_SRTADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD5_WORD1;                                    // Region Descriptor 5, Word 1
                                                                        // End Address
#define MPU_RGD5_WORD1_ENDADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD5_WORD1_ENDADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD5_WORD1_ENDADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD5_WORD2;                                    // Region Descriptor 5, Word 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGD5_WORD2_M0UM(_n)                  (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD5_WORD2_M0UM_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD5_WORD2_M0UM_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGD5_WORD2_M0SM(_n)                  (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD5_WORD2_M0SM_INSERT(_v, _n)           (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD5_WORD2_M0SM_EXTRACT(_v)              (((_v) >> 3) & 0x3)
#define MPU_RGD5_WORD2_M0PE                      ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGD5_WORD2_M1UM(_n)                  (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD5_WORD2_M1UM_INSERT(_v, _n)           (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD5_WORD2_M1UM_EXTRACT(_v)              (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGD5_WORD2_M1SM(_n)                  (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD5_WORD2_M1SM_INSERT(_v, _n)           (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD5_WORD2_M1SM_EXTRACT(_v)              (((_v) >> 9) & 0x3)
#define MPU_RGD5_WORD2_M1PE                      ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier enable
                                                                        // Bus Master 2 User Mode Access control
#define MPU_RGD5_WORD2_M2UM(_n)                  (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD5_WORD2_M2UM_INSERT(_v, _n)           (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD5_WORD2_M2UM_EXTRACT(_v)              (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGD5_WORD2_M2SM(_n)                  (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD5_WORD2_M2SM_INSERT(_v, _n)           (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD5_WORD2_M2SM_EXTRACT(_v)              (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGD5_WORD2_M3UM(_n)                  (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD5_WORD2_M3UM_INSERT(_v, _n)           (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD5_WORD2_M3UM_EXTRACT(_v)              (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGD5_WORD2_M3SM(_n)                  (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD5_WORD2_M3SM_INSERT(_v, _n)           (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD5_WORD2_M3SM_EXTRACT(_v)              (((_v) >> 21) & 0x3)
#define MPU_RGD5_WORD2_M4WE                      ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGD5_WORD2_M4RE                      ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGD5_WORD2_M5WE                      ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGD5_WORD2_M5RE                      ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGD5_WORD2_M6WE                      ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGD5_WORD2_M6RE                      ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGD5_WORD2_M7WE                      ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGD5_WORD2_M7RE                      ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGD5_WORD3;                                    // Region Descriptor 5, Word 3
#define MPU_RGD5_WORD3_VLD                       ((uint32_t)1 << 0)     // Valid
                                                                        // Process Identifier Mask
#define MPU_RGD5_WORD3_PIDMASK(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD5_WORD3_PIDMASK_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD5_WORD3_PIDMASK_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Process Identifier
#define MPU_RGD5_WORD3_PID(_n)                   (((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD5_WORD3_PID_INSERT(_v, _n)            (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD5_WORD3_PID_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    uint32_t             RGD6_WORD0;                                    // Region Descriptor 6, Word 0
                                                                        // Start Address
#define MPU_RGD6_WORD0_SRTADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD6_WORD0_SRTADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD6_WORD0_SRTADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD6_WORD1;                                    // Region Descriptor 6, Word 1
                                                                        // End Address
#define MPU_RGD6_WORD1_ENDADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD6_WORD1_ENDADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD6_WORD1_ENDADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD6_WORD2;                                    // Region Descriptor 6, Word 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGD6_WORD2_M0UM(_n)                  (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD6_WORD2_M0UM_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD6_WORD2_M0UM_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGD6_WORD2_M0SM(_n)                  (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD6_WORD2_M0SM_INSERT(_v, _n)           (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD6_WORD2_M0SM_EXTRACT(_v)              (((_v) >> 3) & 0x3)
#define MPU_RGD6_WORD2_M0PE                      ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGD6_WORD2_M1UM(_n)                  (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD6_WORD2_M1UM_INSERT(_v, _n)           (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD6_WORD2_M1UM_EXTRACT(_v)              (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGD6_WORD2_M1SM(_n)                  (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD6_WORD2_M1SM_INSERT(_v, _n)           (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD6_WORD2_M1SM_EXTRACT(_v)              (((_v) >> 9) & 0x3)
#define MPU_RGD6_WORD2_M1PE                      ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier enable
                                                                        // Bus Master 2 User Mode Access control
#define MPU_RGD6_WORD2_M2UM(_n)                  (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD6_WORD2_M2UM_INSERT(_v, _n)           (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD6_WORD2_M2UM_EXTRACT(_v)              (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGD6_WORD2_M2SM(_n)                  (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD6_WORD2_M2SM_INSERT(_v, _n)           (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD6_WORD2_M2SM_EXTRACT(_v)              (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGD6_WORD2_M3UM(_n)                  (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD6_WORD2_M3UM_INSERT(_v, _n)           (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD6_WORD2_M3UM_EXTRACT(_v)              (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGD6_WORD2_M3SM(_n)                  (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD6_WORD2_M3SM_INSERT(_v, _n)           (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD6_WORD2_M3SM_EXTRACT(_v)              (((_v) >> 21) & 0x3)
#define MPU_RGD6_WORD2_M4WE                      ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGD6_WORD2_M4RE                      ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGD6_WORD2_M5WE                      ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGD6_WORD2_M5RE                      ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGD6_WORD2_M6WE                      ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGD6_WORD2_M6RE                      ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGD6_WORD2_M7WE                      ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGD6_WORD2_M7RE                      ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGD6_WORD3;                                    // Region Descriptor 6, Word 3
#define MPU_RGD6_WORD3_VLD                       ((uint32_t)1 << 0)     // Valid
                                                                        // Process Identifier Mask
#define MPU_RGD6_WORD3_PIDMASK(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD6_WORD3_PIDMASK_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD6_WORD3_PIDMASK_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Process Identifier
#define MPU_RGD6_WORD3_PID(_n)                   (((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD6_WORD3_PID_INSERT(_v, _n)            (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD6_WORD3_PID_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    uint32_t             RGD7_WORD0;                                    // Region Descriptor 7, Word 0
                                                                        // Start Address
#define MPU_RGD7_WORD0_SRTADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD7_WORD0_SRTADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD7_WORD0_SRTADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD7_WORD1;                                    // Region Descriptor 7, Word 1
                                                                        // End Address
#define MPU_RGD7_WORD1_ENDADDR(_n)               (((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD7_WORD1_ENDADDR_INSERT(_v, _n)        (((_v) & ~0xffffffe0) | ((uint32_t)(_n) & 0x7ffffff) << 5)
#define MPU_RGD7_WORD1_ENDADDR_EXTRACT(_v)           (((_v) >> 5) & 0x7ffffff)

    uint32_t             RGD7_WORD2;                                    // Region Descriptor 7, Word 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGD7_WORD2_M0UM(_n)                  (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD7_WORD2_M0UM_INSERT(_v, _n)           (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGD7_WORD2_M0UM_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGD7_WORD2_M0SM(_n)                  (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD7_WORD2_M0SM_INSERT(_v, _n)           (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGD7_WORD2_M0SM_EXTRACT(_v)              (((_v) >> 3) & 0x3)
#define MPU_RGD7_WORD2_M0PE                      ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGD7_WORD2_M1UM(_n)                  (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD7_WORD2_M1UM_INSERT(_v, _n)           (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGD7_WORD2_M1UM_EXTRACT(_v)              (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGD7_WORD2_M1SM(_n)                  (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD7_WORD2_M1SM_INSERT(_v, _n)           (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGD7_WORD2_M1SM_EXTRACT(_v)              (((_v) >> 9) & 0x3)
#define MPU_RGD7_WORD2_M1PE                      ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier enable
                                                                        // Bus Master 2 User Mode Access control
#define MPU_RGD7_WORD2_M2UM(_n)                  (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD7_WORD2_M2UM_INSERT(_v, _n)           (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGD7_WORD2_M2UM_EXTRACT(_v)              (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGD7_WORD2_M2SM(_n)                  (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD7_WORD2_M2SM_INSERT(_v, _n)           (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGD7_WORD2_M2SM_EXTRACT(_v)              (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGD7_WORD2_M3UM(_n)                  (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD7_WORD2_M3UM_INSERT(_v, _n)           (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGD7_WORD2_M3UM_EXTRACT(_v)              (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGD7_WORD2_M3SM(_n)                  (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD7_WORD2_M3SM_INSERT(_v, _n)           (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGD7_WORD2_M3SM_EXTRACT(_v)              (((_v) >> 21) & 0x3)
#define MPU_RGD7_WORD2_M4WE                      ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGD7_WORD2_M4RE                      ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGD7_WORD2_M5WE                      ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGD7_WORD2_M5RE                      ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGD7_WORD2_M6WE                      ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGD7_WORD2_M6RE                      ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGD7_WORD2_M7WE                      ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGD7_WORD2_M7RE                      ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGD7_WORD3;                                    // Region Descriptor 7, Word 3
#define MPU_RGD7_WORD3_VLD                       ((uint32_t)1 << 0)     // Valid
                                                                        // Process Identifier Mask
#define MPU_RGD7_WORD3_PIDMASK(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD7_WORD3_PIDMASK_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MPU_RGD7_WORD3_PIDMASK_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Process Identifier
#define MPU_RGD7_WORD3_PID(_n)                   (((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD7_WORD3_PID_INSERT(_v, _n)            (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define MPU_RGD7_WORD3_PID_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    uint8_t _res2[896];
    uint32_t             RGDAAC0;                                       // Region Descriptor Alternate Access Control 0
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGDAAC0_M0UM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC0_M0UM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC0_M0UM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGDAAC0_M0SM(_n)                     (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC0_M0SM_INSERT(_v, _n)              (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC0_M0SM_EXTRACT(_v)                 (((_v) >> 3) & 0x3)
#define MPU_RGDAAC0_M0PE                         ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier Enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGDAAC0_M1UM(_n)                     (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC0_M1UM_INSERT(_v, _n)              (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC0_M1UM_EXTRACT(_v)                 (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGDAAC0_M1SM(_n)                     (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC0_M1SM_INSERT(_v, _n)              (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC0_M1SM_EXTRACT(_v)                 (((_v) >> 9) & 0x3)
#define MPU_RGDAAC0_M1PE                         ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier Enable
                                                                        // Bus Master 2 User Mode Access Control
#define MPU_RGDAAC0_M2UM(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC0_M2UM_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC0_M2UM_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGDAAC0_M2SM(_n)                     (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC0_M2SM_INSERT(_v, _n)              (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC0_M2SM_EXTRACT(_v)                 (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGDAAC0_M3UM(_n)                     (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC0_M3UM_INSERT(_v, _n)              (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC0_M3UM_EXTRACT(_v)                 (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGDAAC0_M3SM(_n)                     (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC0_M3SM_INSERT(_v, _n)              (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC0_M3SM_EXTRACT(_v)                 (((_v) >> 21) & 0x3)
#define MPU_RGDAAC0_M4WE                         ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGDAAC0_M4RE                         ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGDAAC0_M5WE                         ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGDAAC0_M5RE                         ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGDAAC0_M6WE                         ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGDAAC0_M6RE                         ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGDAAC0_M7WE                         ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGDAAC0_M7RE                         ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGDAAC1;                                       // Region Descriptor Alternate Access Control 1
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGDAAC1_M0UM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC1_M0UM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC1_M0UM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGDAAC1_M0SM(_n)                     (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC1_M0SM_INSERT(_v, _n)              (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC1_M0SM_EXTRACT(_v)                 (((_v) >> 3) & 0x3)
#define MPU_RGDAAC1_M0PE                         ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier Enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGDAAC1_M1UM(_n)                     (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC1_M1UM_INSERT(_v, _n)              (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC1_M1UM_EXTRACT(_v)                 (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGDAAC1_M1SM(_n)                     (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC1_M1SM_INSERT(_v, _n)              (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC1_M1SM_EXTRACT(_v)                 (((_v) >> 9) & 0x3)
#define MPU_RGDAAC1_M1PE                         ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier Enable
                                                                        // Bus Master 2 User Mode Access Control
#define MPU_RGDAAC1_M2UM(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC1_M2UM_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC1_M2UM_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGDAAC1_M2SM(_n)                     (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC1_M2SM_INSERT(_v, _n)              (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC1_M2SM_EXTRACT(_v)                 (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGDAAC1_M3UM(_n)                     (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC1_M3UM_INSERT(_v, _n)              (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC1_M3UM_EXTRACT(_v)                 (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGDAAC1_M3SM(_n)                     (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC1_M3SM_INSERT(_v, _n)              (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC1_M3SM_EXTRACT(_v)                 (((_v) >> 21) & 0x3)
#define MPU_RGDAAC1_M4WE                         ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGDAAC1_M4RE                         ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGDAAC1_M5WE                         ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGDAAC1_M5RE                         ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGDAAC1_M6WE                         ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGDAAC1_M6RE                         ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGDAAC1_M7WE                         ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGDAAC1_M7RE                         ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGDAAC2;                                       // Region Descriptor Alternate Access Control 2
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGDAAC2_M0UM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC2_M0UM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC2_M0UM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGDAAC2_M0SM(_n)                     (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC2_M0SM_INSERT(_v, _n)              (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC2_M0SM_EXTRACT(_v)                 (((_v) >> 3) & 0x3)
#define MPU_RGDAAC2_M0PE                         ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier Enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGDAAC2_M1UM(_n)                     (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC2_M1UM_INSERT(_v, _n)              (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC2_M1UM_EXTRACT(_v)                 (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGDAAC2_M1SM(_n)                     (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC2_M1SM_INSERT(_v, _n)              (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC2_M1SM_EXTRACT(_v)                 (((_v) >> 9) & 0x3)
#define MPU_RGDAAC2_M1PE                         ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier Enable
                                                                        // Bus Master 2 User Mode Access Control
#define MPU_RGDAAC2_M2UM(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC2_M2UM_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC2_M2UM_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGDAAC2_M2SM(_n)                     (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC2_M2SM_INSERT(_v, _n)              (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC2_M2SM_EXTRACT(_v)                 (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGDAAC2_M3UM(_n)                     (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC2_M3UM_INSERT(_v, _n)              (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC2_M3UM_EXTRACT(_v)                 (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGDAAC2_M3SM(_n)                     (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC2_M3SM_INSERT(_v, _n)              (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC2_M3SM_EXTRACT(_v)                 (((_v) >> 21) & 0x3)
#define MPU_RGDAAC2_M4WE                         ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGDAAC2_M4RE                         ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGDAAC2_M5WE                         ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGDAAC2_M5RE                         ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGDAAC2_M6WE                         ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGDAAC2_M6RE                         ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGDAAC2_M7WE                         ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGDAAC2_M7RE                         ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGDAAC3;                                       // Region Descriptor Alternate Access Control 3
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGDAAC3_M0UM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC3_M0UM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC3_M0UM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGDAAC3_M0SM(_n)                     (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC3_M0SM_INSERT(_v, _n)              (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC3_M0SM_EXTRACT(_v)                 (((_v) >> 3) & 0x3)
#define MPU_RGDAAC3_M0PE                         ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier Enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGDAAC3_M1UM(_n)                     (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC3_M1UM_INSERT(_v, _n)              (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC3_M1UM_EXTRACT(_v)                 (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGDAAC3_M1SM(_n)                     (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC3_M1SM_INSERT(_v, _n)              (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC3_M1SM_EXTRACT(_v)                 (((_v) >> 9) & 0x3)
#define MPU_RGDAAC3_M1PE                         ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier Enable
                                                                        // Bus Master 2 User Mode Access Control
#define MPU_RGDAAC3_M2UM(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC3_M2UM_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC3_M2UM_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGDAAC3_M2SM(_n)                     (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC3_M2SM_INSERT(_v, _n)              (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC3_M2SM_EXTRACT(_v)                 (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGDAAC3_M3UM(_n)                     (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC3_M3UM_INSERT(_v, _n)              (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC3_M3UM_EXTRACT(_v)                 (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGDAAC3_M3SM(_n)                     (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC3_M3SM_INSERT(_v, _n)              (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC3_M3SM_EXTRACT(_v)                 (((_v) >> 21) & 0x3)
#define MPU_RGDAAC3_M4WE                         ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGDAAC3_M4RE                         ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGDAAC3_M5WE                         ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGDAAC3_M5RE                         ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGDAAC3_M6WE                         ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGDAAC3_M6RE                         ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGDAAC3_M7WE                         ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGDAAC3_M7RE                         ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGDAAC4;                                       // Region Descriptor Alternate Access Control 4
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGDAAC4_M0UM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC4_M0UM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC4_M0UM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGDAAC4_M0SM(_n)                     (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC4_M0SM_INSERT(_v, _n)              (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC4_M0SM_EXTRACT(_v)                 (((_v) >> 3) & 0x3)
#define MPU_RGDAAC4_M0PE                         ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier Enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGDAAC4_M1UM(_n)                     (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC4_M1UM_INSERT(_v, _n)              (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC4_M1UM_EXTRACT(_v)                 (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGDAAC4_M1SM(_n)                     (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC4_M1SM_INSERT(_v, _n)              (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC4_M1SM_EXTRACT(_v)                 (((_v) >> 9) & 0x3)
#define MPU_RGDAAC4_M1PE                         ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier Enable
                                                                        // Bus Master 2 User Mode Access Control
#define MPU_RGDAAC4_M2UM(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC4_M2UM_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC4_M2UM_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGDAAC4_M2SM(_n)                     (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC4_M2SM_INSERT(_v, _n)              (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC4_M2SM_EXTRACT(_v)                 (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGDAAC4_M3UM(_n)                     (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC4_M3UM_INSERT(_v, _n)              (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC4_M3UM_EXTRACT(_v)                 (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGDAAC4_M3SM(_n)                     (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC4_M3SM_INSERT(_v, _n)              (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC4_M3SM_EXTRACT(_v)                 (((_v) >> 21) & 0x3)
#define MPU_RGDAAC4_M4WE                         ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGDAAC4_M4RE                         ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGDAAC4_M5WE                         ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGDAAC4_M5RE                         ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGDAAC4_M6WE                         ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGDAAC4_M6RE                         ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGDAAC4_M7WE                         ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGDAAC4_M7RE                         ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGDAAC5;                                       // Region Descriptor Alternate Access Control 5
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGDAAC5_M0UM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC5_M0UM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC5_M0UM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGDAAC5_M0SM(_n)                     (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC5_M0SM_INSERT(_v, _n)              (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC5_M0SM_EXTRACT(_v)                 (((_v) >> 3) & 0x3)
#define MPU_RGDAAC5_M0PE                         ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier Enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGDAAC5_M1UM(_n)                     (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC5_M1UM_INSERT(_v, _n)              (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC5_M1UM_EXTRACT(_v)                 (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGDAAC5_M1SM(_n)                     (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC5_M1SM_INSERT(_v, _n)              (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC5_M1SM_EXTRACT(_v)                 (((_v) >> 9) & 0x3)
#define MPU_RGDAAC5_M1PE                         ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier Enable
                                                                        // Bus Master 2 User Mode Access Control
#define MPU_RGDAAC5_M2UM(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC5_M2UM_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC5_M2UM_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGDAAC5_M2SM(_n)                     (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC5_M2SM_INSERT(_v, _n)              (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC5_M2SM_EXTRACT(_v)                 (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGDAAC5_M3UM(_n)                     (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC5_M3UM_INSERT(_v, _n)              (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC5_M3UM_EXTRACT(_v)                 (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGDAAC5_M3SM(_n)                     (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC5_M3SM_INSERT(_v, _n)              (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC5_M3SM_EXTRACT(_v)                 (((_v) >> 21) & 0x3)
#define MPU_RGDAAC5_M4WE                         ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGDAAC5_M4RE                         ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGDAAC5_M5WE                         ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGDAAC5_M5RE                         ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGDAAC5_M6WE                         ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGDAAC5_M6RE                         ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGDAAC5_M7WE                         ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGDAAC5_M7RE                         ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGDAAC6;                                       // Region Descriptor Alternate Access Control 6
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGDAAC6_M0UM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC6_M0UM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC6_M0UM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGDAAC6_M0SM(_n)                     (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC6_M0SM_INSERT(_v, _n)              (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC6_M0SM_EXTRACT(_v)                 (((_v) >> 3) & 0x3)
#define MPU_RGDAAC6_M0PE                         ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier Enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGDAAC6_M1UM(_n)                     (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC6_M1UM_INSERT(_v, _n)              (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC6_M1UM_EXTRACT(_v)                 (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGDAAC6_M1SM(_n)                     (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC6_M1SM_INSERT(_v, _n)              (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC6_M1SM_EXTRACT(_v)                 (((_v) >> 9) & 0x3)
#define MPU_RGDAAC6_M1PE                         ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier Enable
                                                                        // Bus Master 2 User Mode Access Control
#define MPU_RGDAAC6_M2UM(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC6_M2UM_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC6_M2UM_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGDAAC6_M2SM(_n)                     (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC6_M2SM_INSERT(_v, _n)              (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC6_M2SM_EXTRACT(_v)                 (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGDAAC6_M3UM(_n)                     (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC6_M3UM_INSERT(_v, _n)              (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC6_M3UM_EXTRACT(_v)                 (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGDAAC6_M3SM(_n)                     (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC6_M3SM_INSERT(_v, _n)              (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC6_M3SM_EXTRACT(_v)                 (((_v) >> 21) & 0x3)
#define MPU_RGDAAC6_M4WE                         ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGDAAC6_M4RE                         ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGDAAC6_M5WE                         ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGDAAC6_M5RE                         ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGDAAC6_M6WE                         ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGDAAC6_M6RE                         ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGDAAC6_M7WE                         ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGDAAC6_M7RE                         ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

    uint32_t             RGDAAC7;                                       // Region Descriptor Alternate Access Control 7
                                                                        // Bus Master 0 User Mode Access Control
#define MPU_RGDAAC7_M0UM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC7_M0UM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define MPU_RGDAAC7_M0UM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Bus Master 0 Supervisor Mode Access Control
#define MPU_RGDAAC7_M0SM(_n)                     (((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC7_M0SM_INSERT(_v, _n)              (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define MPU_RGDAAC7_M0SM_EXTRACT(_v)                 (((_v) >> 3) & 0x3)
#define MPU_RGDAAC7_M0PE                         ((uint32_t)1 << 5)     // Bus Master 0 Process Identifier Enable
                                                                        // Bus Master 1 User Mode Access Control
#define MPU_RGDAAC7_M1UM(_n)                     (((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC7_M1UM_INSERT(_v, _n)              (((_v) & ~0x1c0) | ((uint32_t)(_n) & 0x7) << 6)
#define MPU_RGDAAC7_M1UM_EXTRACT(_v)                 (((_v) >> 6) & 0x7)
                                                                        // Bus Master 1 Supervisor Mode Access Control
#define MPU_RGDAAC7_M1SM(_n)                     (((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC7_M1SM_INSERT(_v, _n)              (((_v) & ~0x600) | ((uint32_t)(_n) & 0x3) << 9)
#define MPU_RGDAAC7_M1SM_EXTRACT(_v)                 (((_v) >> 9) & 0x3)
#define MPU_RGDAAC7_M1PE                         ((uint32_t)1 << 11)    // Bus Master 1 Process Identifier Enable
                                                                        // Bus Master 2 User Mode Access Control
#define MPU_RGDAAC7_M2UM(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC7_M2UM_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define MPU_RGDAAC7_M2UM_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
                                                                        // Bus Master 2 Supervisor Mode Access Control
#define MPU_RGDAAC7_M2SM(_n)                     (((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC7_M2SM_INSERT(_v, _n)              (((_v) & ~0x18000) | ((uint32_t)(_n) & 0x3) << 15)
#define MPU_RGDAAC7_M2SM_EXTRACT(_v)                 (((_v) >> 15) & 0x3)
                                                                        // Bus Master 3 User Mode Access Control
#define MPU_RGDAAC7_M3UM(_n)                     (((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC7_M3UM_INSERT(_v, _n)              (((_v) & ~0x1c0000) | ((uint32_t)(_n) & 0x7) << 18)
#define MPU_RGDAAC7_M3UM_EXTRACT(_v)                 (((_v) >> 18) & 0x7)
                                                                        // Bus Master 3 Supervisor Mode Access Control
#define MPU_RGDAAC7_M3SM(_n)                     (((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC7_M3SM_INSERT(_v, _n)              (((_v) & ~0x600000) | ((uint32_t)(_n) & 0x3) << 21)
#define MPU_RGDAAC7_M3SM_EXTRACT(_v)                 (((_v) >> 21) & 0x3)
#define MPU_RGDAAC7_M4WE                         ((uint32_t)1 << 24)    // Bus Master 4 Write Enable
#define MPU_RGDAAC7_M4RE                         ((uint32_t)1 << 25)    // Bus Master 4 Read Enable
#define MPU_RGDAAC7_M5WE                         ((uint32_t)1 << 26)    // Bus Master 5 Write Enable
#define MPU_RGDAAC7_M5RE                         ((uint32_t)1 << 27)    // Bus Master 5 Read Enable
#define MPU_RGDAAC7_M6WE                         ((uint32_t)1 << 28)    // Bus Master 6 Write Enable
#define MPU_RGDAAC7_M6RE                         ((uint32_t)1 << 29)    // Bus Master 6 Read Enable
#define MPU_RGDAAC7_M7WE                         ((uint32_t)1 << 30)    // Bus Master 7 Write Enable
#define MPU_RGDAAC7_M7RE                         ((uint32_t)1 << 31)    // Bus Master 7 Read Enable

} MPU_regs_t;
                                                                        // --------------------
                                                                        // ERM
typedef struct                                                          // --------------------
{
    uint32_t             CR0;                                           // ERM Configuration Register 0
#define ERM_CR0_ENCIE1                           ((uint32_t)1 << 26)    // ENCIE1
#define ERM_CR0_ESCIE1                           ((uint32_t)1 << 27)    // ESCIE1
#define ERM_CR0_ENCIE0                           ((uint32_t)1 << 30)    // ENCIE0
#define ERM_CR0_ESCIE0                           ((uint32_t)1 << 31)    // ESCIE0

    uint8_t _res0[12];
    uint32_t             SR0;                                           // ERM Status Register 0
#define ERM_SR0_NCE1                             ((uint32_t)1 << 26)    // NCE1
#define ERM_SR0_SBC1                             ((uint32_t)1 << 27)    // SBC1
#define ERM_SR0_NCE0                             ((uint32_t)1 << 30)    // NCE0
#define ERM_SR0_SBC0                             ((uint32_t)1 << 31)    // SBC0

    uint8_t _res1[236];
    const uint32_t       EAR0;                                          // ERM Memory n Error Address Register
    uint8_t _res2[12];
    const uint32_t       EAR1;                                          // ERM Memory n Error Address Register
} ERM_regs_t;
                                                                        // --------------------
                                                                        // Error Injection Module
typedef struct                                                          // --------------------
{
    uint32_t             EIMCR;                                         // Error Injection Module Configuration Register
#define EIM_EIMCR_GEIEN                          ((uint32_t)1 << 0)     // Global Error Injection Enable

    uint32_t             EICHEN;                                        // Error Injection Channel Enable register
#define EIM_EICHEN_EICH1EN                       ((uint32_t)1 << 30)    // Error Injection Channel 1 Enable
#define EIM_EICHEN_EICH0EN                       ((uint32_t)1 << 31)    // Error Injection Channel 0 Enable

    uint8_t _res0[248];
    uint32_t             EICHD0_WORD0;                                  // Error Injection Channel Descriptor n, Word0
                                                                        // Checkbit Mask
#define EIM_EICHD0_WORD0_CHKBIT_MASK(_n)         (((uint32_t)(_n) & 0x7f) << 25)
#define EIM_EICHD0_WORD0_CHKBIT_MASK_INSERT(_v, _n)  (((_v) & ~0xfe000000) | ((uint32_t)(_n) & 0x7f) << 25)
#define EIM_EICHD0_WORD0_CHKBIT_MASK_EXTRACT(_v)     (((_v) >> 25) & 0x7f)

    uint32_t             EICHD0_WORD1;                                  // Error Injection Channel Descriptor n, Word1
    uint8_t _res1[248];
    uint32_t             EICHD1_WORD0;                                  // Error Injection Channel Descriptor n, Word0
                                                                        // Checkbit Mask
#define EIM_EICHD1_WORD0_CHKBIT_MASK(_n)         (((uint32_t)(_n) & 0x7f) << 25)
#define EIM_EICHD1_WORD0_CHKBIT_MASK_INSERT(_v, _n)  (((_v) & ~0xfe000000) | ((uint32_t)(_n) & 0x7f) << 25)
#define EIM_EICHD1_WORD0_CHKBIT_MASK_EXTRACT(_v)     (((_v) >> 25) & 0x7f)

    uint32_t             EICHD1_WORD1;                                  // Error Injection Channel Descriptor n, Word1
} EIM_regs_t;
                                                                        // --------------------
                                                                        // FTFC
typedef struct                                                          // --------------------
{
    uint8_t              FSTAT;                                         // Flash Status Register
#define FTFC_FSTAT_MGSTAT0                       ((uint8_t)1 << 0)      // Memory Controller Command Completion Status Flag
#define FTFC_FSTAT_FPVIOL                        ((uint8_t)1 << 4)      // Flash Protection Violation Flag
#define FTFC_FSTAT_ACCERR                        ((uint8_t)1 << 5)      // Flash Access Error Flag
#define FTFC_FSTAT_RDCOLERR                      ((uint8_t)1 << 6)      // FTFC Read Collision Error Flag
#define FTFC_FSTAT_CCIF                          ((uint8_t)1 << 7)      // Command Complete Interrupt Flag

    uint8_t              FCNFG;                                         // Flash Configuration Register
#define FTFC_FCNFG_EEERDY                        ((uint8_t)1 << 0)      // EEERDY
#define FTFC_FCNFG_RAMRDY                        ((uint8_t)1 << 1)      // RAM Ready
#define FTFC_FCNFG_ERSSUSP                       ((uint8_t)1 << 4)      // Erase Suspend
#define FTFC_FCNFG_ERSAREQ                       ((uint8_t)1 << 5)      // Erase All Request
#define FTFC_FCNFG_RDCOLLIE                      ((uint8_t)1 << 6)      // Read Collision Error Interrupt Enable
#define FTFC_FCNFG_CCIE                          ((uint8_t)1 << 7)      // Command Complete Interrupt Enable

    const uint8_t        FSEC;                                          // Flash Security Register
                                                                        // Flash Security
#define FTFC_FSEC_SEC_EXTRACT(_v)                    (((_v) >> 0) & 0x3)
                                                                        // Factory Failure Analysis Access Code
#define FTFC_FSEC_FSLACC_EXTRACT(_v)                 (((_v) >> 2) & 0x3)
                                                                        // Mass Erase Enable Bits
#define FTFC_FSEC_MEEN_EXTRACT(_v)                   (((_v) >> 4) & 0x3)
                                                                        // Backdoor Key Security Enable
#define FTFC_FSEC_KEYEN_EXTRACT(_v)                  (((_v) >> 6) & 0x3)

    const uint8_t        FOPT;                                          // Flash Option Register
    uint8_t              FCCOB3;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB2;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB1;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB0;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB7;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB6;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB5;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB4;                                        // Flash Common Command Object Registers
    uint8_t              FCCOBB;                                        // Flash Common Command Object Registers
    uint8_t              FCCOBA;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB9;                                        // Flash Common Command Object Registers
    uint8_t              FCCOB8;                                        // Flash Common Command Object Registers
    uint8_t              FPROT3;                                        // Program Flash Protection Registers
    uint8_t              FPROT2;                                        // Program Flash Protection Registers
    uint8_t              FPROT1;                                        // Program Flash Protection Registers
    uint8_t              FPROT0;                                        // Program Flash Protection Registers
    uint8_t _res0[2];
    uint8_t              FEPROT;                                        // EEPROM Protection Register
    uint8_t              FDPROT;                                        // Data Flash Protection Register
    uint8_t _res1[20];
    const uint8_t        FCSESTAT;                                      // Flash CSEc Status Register
#define FTFC_FCSESTAT_BSY                        ((uint8_t)1 << 0)      // Busy
#define FTFC_FCSESTAT_SB                         ((uint8_t)1 << 1)      // Secure Boot
#define FTFC_FCSESTAT_BIN                        ((uint8_t)1 << 2)      // Secure Boot Initialization
#define FTFC_FCSESTAT_BFN                        ((uint8_t)1 << 3)      // Secure Boot Finished
#define FTFC_FCSESTAT_BOK                        ((uint8_t)1 << 4)      // Secure Boot OK
#define FTFC_FCSESTAT_RIN                        ((uint8_t)1 << 5)      // Random Number Generator Initialized
#define FTFC_FCSESTAT_EDB                        ((uint8_t)1 << 6)      // External Debug
#define FTFC_FCSESTAT_IDB                        ((uint8_t)1 << 7)      // Internal Debug

    uint8_t _res2[1];
    uint8_t              FERSTAT;                                       // Flash Error Status Register
#define FTFC_FERSTAT_DFDIF                       ((uint8_t)1 << 1)      // Double Bit Fault Detect Interrupt Flag

    uint8_t              FERCNFG;                                       // Flash Error Configuration Register
#define FTFC_FERCNFG_DFDIE                       ((uint8_t)1 << 1)      // Double Bit Fault Detect Interrupt Enable
#define FTFC_FERCNFG_FDFD                        ((uint8_t)1 << 5)      // Force Double Bit Fault Detect

} FTFC_regs_t;
                                                                        // --------------------
                                                                        // DMA channel multiplexor
typedef struct                                                          // --------------------
{
    uint8_t              CHCFG0;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG0_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG0_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG0_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG0_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG0_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG1;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG1_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG1_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG1_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG1_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG1_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG2;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG2_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG2_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG2_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG2_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG2_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG3;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG3_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG3_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG3_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG3_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG3_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG4;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG4_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG4_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG4_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG4_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG4_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG5;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG5_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG5_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG5_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG5_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG5_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG6;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG6_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG6_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG6_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG6_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG6_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG7;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG7_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG7_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG7_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG7_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG7_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG8;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG8_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG8_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG8_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG8_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG8_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG9;                                        // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG9_SOURCE(_n)                 (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG9_SOURCE_INSERT(_v, _n)          (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG9_SOURCE_EXTRACT(_v)             (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG9_TRIG                       ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG9_ENBL                       ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG10;                                       // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG10_SOURCE(_n)                (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG10_SOURCE_INSERT(_v, _n)         (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG10_SOURCE_EXTRACT(_v)            (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG10_TRIG                      ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG10_ENBL                      ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG11;                                       // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG11_SOURCE(_n)                (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG11_SOURCE_INSERT(_v, _n)         (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG11_SOURCE_EXTRACT(_v)            (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG11_TRIG                      ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG11_ENBL                      ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG12;                                       // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG12_SOURCE(_n)                (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG12_SOURCE_INSERT(_v, _n)         (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG12_SOURCE_EXTRACT(_v)            (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG12_TRIG                      ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG12_ENBL                      ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG13;                                       // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG13_SOURCE(_n)                (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG13_SOURCE_INSERT(_v, _n)         (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG13_SOURCE_EXTRACT(_v)            (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG13_TRIG                      ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG13_ENBL                      ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG14;                                       // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG14_SOURCE(_n)                (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG14_SOURCE_INSERT(_v, _n)         (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG14_SOURCE_EXTRACT(_v)            (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG14_TRIG                      ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG14_ENBL                      ((uint8_t)1 << 7)      // DMA Channel Enable

    uint8_t              CHCFG15;                                       // Channel Configuration register
                                                                        // DMA Channel Source (Slot)
#define DMAMUX_CHCFG15_SOURCE(_n)                (((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG15_SOURCE_INSERT(_v, _n)         (((_v) & ~0x3f) | ((uint8_t)(_n) & 0x3f) << 0)
#define DMAMUX_CHCFG15_SOURCE_EXTRACT(_v)            (((_v) >> 0) & 0x3f)
#define DMAMUX_CHCFG15_TRIG                      ((uint8_t)1 << 6)      // DMA Channel Trigger Enable
#define DMAMUX_CHCFG15_ENBL                      ((uint8_t)1 << 7)      // DMA Channel Enable

} DMAMUX_regs_t;
                                                                        // --------------------
                                                                        // Flex Controller Area Network module
typedef struct                                                          // --------------------
{
    uint32_t             MCR;                                           // Module Configuration Register
                                                                        // Number Of The Last Message Buffer
#define CAN_MCR_MAXMB(_n)                        (((uint32_t)(_n) & 0x7f) << 0)
#define CAN_MCR_MAXMB_INSERT(_v, _n)                 (((_v) & ~0x7f) | ((uint32_t)(_n) & 0x7f) << 0)
#define CAN_MCR_MAXMB_EXTRACT(_v)                    (((_v) >> 0) & 0x7f)
                                                                        // ID Acceptance Mode
#define CAN_MCR_IDAM(_n)                         (((uint32_t)(_n) & 0x3) << 8)
#define CAN_MCR_IDAM_INSERT(_v, _n)                  (((_v) & ~0x300) | ((uint32_t)(_n) & 0x3) << 8)
#define CAN_MCR_IDAM_EXTRACT(_v)                     (((_v) >> 8) & 0x3)
#define CAN_MCR_FDEN                             ((uint32_t)1 << 11)    // CAN FD operation enable
#define CAN_MCR_AEN                              ((uint32_t)1 << 12)    // Abort Enable
#define CAN_MCR_LPRIOEN                          ((uint32_t)1 << 13)    // Local Priority Enable
#define CAN_MCR_PNET_EN                          ((uint32_t)1 << 14)    // Pretended Networking Enable
#define CAN_MCR_DMA                              ((uint32_t)1 << 15)    // DMA Enable
#define CAN_MCR_IRMQ                             ((uint32_t)1 << 16)    // Individual Rx Masking And Queue Enable
#define CAN_MCR_SRXDIS                           ((uint32_t)1 << 17)    // Self Reception Disable
#define CAN_MCR_LPMACK                           ((uint32_t)1 << 20)    // Low-Power Mode Acknowledge
#define CAN_MCR_WRNEN                            ((uint32_t)1 << 21)    // Warning Interrupt Enable
#define CAN_MCR_SUPV                             ((uint32_t)1 << 23)    // Supervisor Mode
#define CAN_MCR_FRZACK                           ((uint32_t)1 << 24)    // Freeze Mode Acknowledge
#define CAN_MCR_SOFTRST                          ((uint32_t)1 << 25)    // Soft Reset
#define CAN_MCR_NOTRDY                           ((uint32_t)1 << 27)    // FlexCAN Not Ready
#define CAN_MCR_HALT                             ((uint32_t)1 << 28)    // Halt FlexCAN
#define CAN_MCR_RFEN                             ((uint32_t)1 << 29)    // Rx FIFO Enable
#define CAN_MCR_FRZ                              ((uint32_t)1 << 30)    // Freeze Enable
#define CAN_MCR_MDIS                             ((uint32_t)1 << 31)    // Module Disable

    uint32_t             CTRL1;                                         // Control 1 register
                                                                        // Propagation Segment
#define CAN_CTRL1_PROPSEG(_n)                    (((uint32_t)(_n) & 0x7) << 0)
#define CAN_CTRL1_PROPSEG_INSERT(_v, _n)             (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define CAN_CTRL1_PROPSEG_EXTRACT(_v)                (((_v) >> 0) & 0x7)
#define CAN_CTRL1_LOM                            ((uint32_t)1 << 3)     // Listen-Only Mode
#define CAN_CTRL1_LBUF                           ((uint32_t)1 << 4)     // Lowest Buffer Transmitted First
#define CAN_CTRL1_TSYN                           ((uint32_t)1 << 5)     // Timer Sync
#define CAN_CTRL1_BOFFREC                        ((uint32_t)1 << 6)     // Bus Off Recovery
#define CAN_CTRL1_SMP                            ((uint32_t)1 << 7)     // CAN Bit Sampling
#define CAN_CTRL1_RWRNMSK                        ((uint32_t)1 << 10)    // Rx Warning Interrupt Mask
#define CAN_CTRL1_TWRNMSK                        ((uint32_t)1 << 11)    // Tx Warning Interrupt Mask
#define CAN_CTRL1_LPB                            ((uint32_t)1 << 12)    // Loop Back Mode
#define CAN_CTRL1_CLKSRC                         ((uint32_t)1 << 13)    // CAN Engine Clock Source
#define CAN_CTRL1_ERRMSK                         ((uint32_t)1 << 14)    // Error Interrupt Mask
#define CAN_CTRL1_BOFFMSK                        ((uint32_t)1 << 15)    // Bus Off Interrupt Mask
                                                                        // Phase Segment 2
#define CAN_CTRL1_PSEG2(_n)                      (((uint32_t)(_n) & 0x7) << 16)
#define CAN_CTRL1_PSEG2_INSERT(_v, _n)               (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define CAN_CTRL1_PSEG2_EXTRACT(_v)                  (((_v) >> 16) & 0x7)
                                                                        // Phase Segment 1
#define CAN_CTRL1_PSEG1(_n)                      (((uint32_t)(_n) & 0x7) << 19)
#define CAN_CTRL1_PSEG1_INSERT(_v, _n)               (((_v) & ~0x380000) | ((uint32_t)(_n) & 0x7) << 19)
#define CAN_CTRL1_PSEG1_EXTRACT(_v)                  (((_v) >> 19) & 0x7)
                                                                        // Resync Jump Width
#define CAN_CTRL1_RJW(_n)                        (((uint32_t)(_n) & 0x3) << 22)
#define CAN_CTRL1_RJW_INSERT(_v, _n)                 (((_v) & ~0xc00000) | ((uint32_t)(_n) & 0x3) << 22)
#define CAN_CTRL1_RJW_EXTRACT(_v)                    (((_v) >> 22) & 0x3)
                                                                        // Prescaler Division Factor
#define CAN_CTRL1_PRESDIV(_n)                    (((uint32_t)(_n) & 0xff) << 24)
#define CAN_CTRL1_PRESDIV_INSERT(_v, _n)             (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_CTRL1_PRESDIV_EXTRACT(_v)                (((_v) >> 24) & 0xff)

    uint32_t             TIMER;                                         // Free Running Timer
                                                                        // Timer Value
#define CAN_TIMER_TIMER(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define CAN_TIMER_TIMER_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define CAN_TIMER_TIMER_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint8_t _res0[4];
    uint32_t             RXMGMASK;                                      // Rx Mailboxes Global Mask Register
    uint32_t             RX14MASK;                                      // Rx 14 Mask register
    uint32_t             RX15MASK;                                      // Rx 15 Mask register
    uint32_t             ECR;                                           // Error Counter
                                                                        // Transmit Error Counter
#define CAN_ECR_TXERRCNT(_n)                     (((uint32_t)(_n) & 0xff) << 0)
#define CAN_ECR_TXERRCNT_INSERT(_v, _n)              (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_ECR_TXERRCNT_EXTRACT(_v)                 (((_v) >> 0) & 0xff)
                                                                        // Receive Error Counter
#define CAN_ECR_RXERRCNT(_n)                     (((uint32_t)(_n) & 0xff) << 8)
#define CAN_ECR_RXERRCNT_INSERT(_v, _n)              (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_ECR_RXERRCNT_EXTRACT(_v)                 (((_v) >> 8) & 0xff)
                                                                        // Transmit Error Counter for fast bits
#define CAN_ECR_TXERRCNT_FAST(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_ECR_TXERRCNT_FAST_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_ECR_TXERRCNT_FAST_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Receive Error Counter for fast bits
#define CAN_ECR_RXERRCNT_FAST(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_ECR_RXERRCNT_FAST_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_ECR_RXERRCNT_FAST_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             ESR1;                                          // Error and Status 1 register
#define CAN_ESR1_ERRINT                          ((uint32_t)1 << 1)     // Error Interrupt
#define CAN_ESR1_BOFFINT                         ((uint32_t)1 << 2)     // Bus Off Interrupt
#define CAN_ESR1_RX                              ((uint32_t)1 << 3)     // FlexCAN In Reception
                                                                        // Fault Confinement State
#define CAN_ESR1_FLTCONF(_n)                     (((uint32_t)(_n) & 0x3) << 4)
#define CAN_ESR1_FLTCONF_INSERT(_v, _n)              (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define CAN_ESR1_FLTCONF_EXTRACT(_v)                 (((_v) >> 4) & 0x3)
#define CAN_ESR1_TX                              ((uint32_t)1 << 6)     // FlexCAN In Transmission
#define CAN_ESR1_IDLE                            ((uint32_t)1 << 7)     // IDLE
#define CAN_ESR1_RXWRN                           ((uint32_t)1 << 8)     // Rx Error Warning
#define CAN_ESR1_TXWRN                           ((uint32_t)1 << 9)     // TX Error Warning
#define CAN_ESR1_STFERR                          ((uint32_t)1 << 10)    // Stuffing Error
#define CAN_ESR1_FRMERR                          ((uint32_t)1 << 11)    // Form Error
#define CAN_ESR1_CRCERR                          ((uint32_t)1 << 12)    // Cyclic Redundancy Check Error
#define CAN_ESR1_ACKERR                          ((uint32_t)1 << 13)    // Acknowledge Error
#define CAN_ESR1_BIT0ERR                         ((uint32_t)1 << 14)    // Bit0 Error
#define CAN_ESR1_BIT1ERR                         ((uint32_t)1 << 15)    // Bit1 Error
#define CAN_ESR1_RWRNINT                         ((uint32_t)1 << 16)    // Rx Warning Interrupt Flag
#define CAN_ESR1_TWRNINT                         ((uint32_t)1 << 17)    // Tx Warning Interrupt Flag
#define CAN_ESR1_SYNCH                           ((uint32_t)1 << 18)    // CAN Synchronization Status
#define CAN_ESR1_BOFFDONEINT                     ((uint32_t)1 << 19)    // Bus Off Done Interrupt
#define CAN_ESR1_ERRINT_FAST                     ((uint32_t)1 << 20)    // Error Interrupt for errors detected in the Data Phase of CAN FD frames with the BRS bit set
#define CAN_ESR1_ERROVR                          ((uint32_t)1 << 21)    // Error Overrun bit
#define CAN_ESR1_STFERR_FAST                     ((uint32_t)1 << 26)    // Stuffing Error in the Data Phase of CAN FD frames with the BRS bit set
#define CAN_ESR1_FRMERR_FAST                     ((uint32_t)1 << 27)    // Form Error in the Data Phase of CAN FD frames with the BRS bit set
#define CAN_ESR1_CRCERR_FAST                     ((uint32_t)1 << 28)    // Cyclic Redundancy Check Error in the CRC field of CAN FD frames with the BRS bit set
#define CAN_ESR1_BIT0ERR_FAST                    ((uint32_t)1 << 30)    // Bit0 Error in the Data Phase of CAN FD frames with the BRS bit set
#define CAN_ESR1_BIT1ERR_FAST                    ((uint32_t)1 << 31)    // Bit1 Error in the Data Phase of CAN FD frames with the BRS bit set

    uint8_t _res1[4];
    uint32_t             IMASK1;                                        // Interrupt Masks 1 register
    uint8_t _res2[4];
    uint32_t             IFLAG1;                                        // Interrupt Flags 1 register
#define CAN_IFLAG1_BUF0I                         ((uint32_t)1 << 0)     // Buffer MB0 Interrupt Or Clear FIFO bit
                                                                        // Buffer MB i Interrupt Or "reserved"
#define CAN_IFLAG1_BUF4TO1I(_n)                  (((uint32_t)(_n) & 0xf) << 1)
#define CAN_IFLAG1_BUF4TO1I_INSERT(_v, _n)           (((_v) & ~0x1e) | ((uint32_t)(_n) & 0xf) << 1)
#define CAN_IFLAG1_BUF4TO1I_EXTRACT(_v)              (((_v) >> 1) & 0xf)
#define CAN_IFLAG1_BUF5I                         ((uint32_t)1 << 5)     // Buffer MB5 Interrupt Or "Frames available in Rx FIFO"
#define CAN_IFLAG1_BUF6I                         ((uint32_t)1 << 6)     // Buffer MB6 Interrupt Or "Rx FIFO Warning"
#define CAN_IFLAG1_BUF7I                         ((uint32_t)1 << 7)     // Buffer MB7 Interrupt Or "Rx FIFO Overflow"
                                                                        // Buffer MBi Interrupt
#define CAN_IFLAG1_BUF31TO8I(_n)                 (((uint32_t)(_n) & 0xffffff) << 8)
#define CAN_IFLAG1_BUF31TO8I_INSERT(_v, _n)          (((_v) & ~0xffffff00) | ((uint32_t)(_n) & 0xffffff) << 8)
#define CAN_IFLAG1_BUF31TO8I_EXTRACT(_v)             (((_v) >> 8) & 0xffffff)

    uint32_t             CTRL2;                                         // Control 2 register
#define CAN_CTRL2_EDFLTDIS                       ((uint32_t)1 << 11)    // Edge Filter Disable
#define CAN_CTRL2_ISOCANFDEN                     ((uint32_t)1 << 12)    // ISO CAN FD Enable
#define CAN_CTRL2_PREXCEN                        ((uint32_t)1 << 14)    // Protocol Exception Enable
#define CAN_CTRL2_TIMER_SRC                      ((uint32_t)1 << 15)    // Timer Source
#define CAN_CTRL2_EACEN                          ((uint32_t)1 << 16)    // Entire Frame Arbitration Field Comparison Enable For Rx Mailboxes
#define CAN_CTRL2_RRS                            ((uint32_t)1 << 17)    // Remote Request Storing
#define CAN_CTRL2_MRP                            ((uint32_t)1 << 18)    // Mailboxes Reception Priority
                                                                        // Tx Arbitration Start Delay
#define CAN_CTRL2_TASD(_n)                       (((uint32_t)(_n) & 0x1f) << 19)
#define CAN_CTRL2_TASD_INSERT(_v, _n)                (((_v) & ~0xf80000) | ((uint32_t)(_n) & 0x1f) << 19)
#define CAN_CTRL2_TASD_EXTRACT(_v)                   (((_v) >> 19) & 0x1f)
                                                                        // Number Of Rx FIFO Filters
#define CAN_CTRL2_RFFN(_n)                       (((uint32_t)(_n) & 0xf) << 24)
#define CAN_CTRL2_RFFN_INSERT(_v, _n)                (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define CAN_CTRL2_RFFN_EXTRACT(_v)                   (((_v) >> 24) & 0xf)
#define CAN_CTRL2_BOFFDONEMSK                    ((uint32_t)1 << 30)    // Bus Off Done Interrupt Mask
#define CAN_CTRL2_ERRMSK_FAST                    ((uint32_t)1 << 31)    // Error Interrupt Mask for errors detected in the Data Phase of fast CAN FD frames

    const uint32_t       ESR2;                                          // Error and Status 2 register
#define CAN_ESR2_IMB                             ((uint32_t)1 << 13)    // Inactive Mailbox
#define CAN_ESR2_VPS                             ((uint32_t)1 << 14)    // Valid Priority Status
                                                                        // Lowest Priority Tx Mailbox
#define CAN_ESR2_LPTM_EXTRACT(_v)                    (((_v) >> 16) & 0x7f)

    uint8_t _res3[8];
    const uint32_t       CRCR;                                          // CRC Register
                                                                        // Transmitted CRC value
#define CAN_CRCR_TXCRC_EXTRACT(_v)                   (((_v) >> 0) & 0x7fff)
                                                                        // CRC Mailbox
#define CAN_CRCR_MBCRC_EXTRACT(_v)                   (((_v) >> 16) & 0x7f)

    uint32_t             RXFGMASK;                                      // Rx FIFO Global Mask register
    const uint32_t       RXFIR;                                         // Rx FIFO Information Register
                                                                        // Identifier Acceptance Filter Hit Indicator
#define CAN_RXFIR_IDHIT_EXTRACT(_v)                  (((_v) >> 0) & 0x1ff)

    uint32_t             CBT;                                           // CAN Bit Timing Register
                                                                        // Extended Phase Segment 2
#define CAN_CBT_EPSEG2(_n)                       (((uint32_t)(_n) & 0x1f) << 0)
#define CAN_CBT_EPSEG2_INSERT(_v, _n)                (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define CAN_CBT_EPSEG2_EXTRACT(_v)                   (((_v) >> 0) & 0x1f)
                                                                        // Extended Phase Segment 1
#define CAN_CBT_EPSEG1(_n)                       (((uint32_t)(_n) & 0x1f) << 5)
#define CAN_CBT_EPSEG1_INSERT(_v, _n)                (((_v) & ~0x3e0) | ((uint32_t)(_n) & 0x1f) << 5)
#define CAN_CBT_EPSEG1_EXTRACT(_v)                   (((_v) >> 5) & 0x1f)
                                                                        // Extended Propagation Segment
#define CAN_CBT_EPROPSEG(_n)                     (((uint32_t)(_n) & 0x3f) << 10)
#define CAN_CBT_EPROPSEG_INSERT(_v, _n)              (((_v) & ~0xfc00) | ((uint32_t)(_n) & 0x3f) << 10)
#define CAN_CBT_EPROPSEG_EXTRACT(_v)                 (((_v) >> 10) & 0x3f)
                                                                        // Extended Resync Jump Width
#define CAN_CBT_ERJW(_n)                         (((uint32_t)(_n) & 0x1f) << 16)
#define CAN_CBT_ERJW_INSERT(_v, _n)                  (((_v) & ~0x1f0000) | ((uint32_t)(_n) & 0x1f) << 16)
#define CAN_CBT_ERJW_EXTRACT(_v)                     (((_v) >> 16) & 0x1f)
                                                                        // Extended Prescaler Division Factor
#define CAN_CBT_EPRESDIV(_n)                     (((uint32_t)(_n) & 0x3ff) << 21)
#define CAN_CBT_EPRESDIV_INSERT(_v, _n)              (((_v) & ~0x7fe00000) | ((uint32_t)(_n) & 0x3ff) << 21)
#define CAN_CBT_EPRESDIV_EXTRACT(_v)                 (((_v) >> 21) & 0x3ff)
#define CAN_CBT_BTF                              ((uint32_t)1 << 31)    // Bit Timing Format Enable

    uint8_t _res4[44];
    uint32_t             RAMn0;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn0_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn0_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn0_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn0_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn0_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn0_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn0_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn0_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn0_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn0_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn0_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn0_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn1;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn1_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn1_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn1_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn1_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn1_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn1_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn1_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn1_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn1_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn1_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn1_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn1_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn2;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn2_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn2_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn2_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn2_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn2_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn2_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn2_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn2_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn2_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn2_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn2_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn2_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn3;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn3_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn3_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn3_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn3_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn3_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn3_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn3_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn3_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn3_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn3_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn3_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn3_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn4;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn4_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn4_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn4_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn4_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn4_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn4_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn4_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn4_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn4_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn4_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn4_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn4_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn5;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn5_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn5_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn5_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn5_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn5_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn5_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn5_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn5_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn5_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn5_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn5_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn5_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn6;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn6_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn6_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn6_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn6_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn6_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn6_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn6_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn6_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn6_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn6_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn6_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn6_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn7;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn7_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn7_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn7_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn7_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn7_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn7_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn7_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn7_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn7_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn7_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn7_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn7_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn8;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn8_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn8_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn8_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn8_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn8_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn8_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn8_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn8_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn8_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn8_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn8_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn8_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn9;                                         // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn9_DATA_BYTE_3(_n)                (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn9_DATA_BYTE_3_INSERT(_v, _n)         (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn9_DATA_BYTE_3_EXTRACT(_v)            (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn9_DATA_BYTE_2(_n)                (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn9_DATA_BYTE_2_INSERT(_v, _n)         (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn9_DATA_BYTE_2_EXTRACT(_v)            (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn9_DATA_BYTE_1(_n)                (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn9_DATA_BYTE_1_INSERT(_v, _n)         (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn9_DATA_BYTE_1_EXTRACT(_v)            (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn9_DATA_BYTE_0(_n)                (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn9_DATA_BYTE_0_INSERT(_v, _n)         (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn9_DATA_BYTE_0_EXTRACT(_v)            (((_v) >> 24) & 0xff)

    uint32_t             RAMn10;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn10_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn10_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn10_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn10_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn10_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn10_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn10_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn10_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn10_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn10_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn10_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn10_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn11;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn11_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn11_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn11_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn11_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn11_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn11_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn11_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn11_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn11_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn11_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn11_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn11_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn12;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn12_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn12_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn12_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn12_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn12_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn12_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn12_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn12_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn12_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn12_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn12_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn12_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn13;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn13_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn13_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn13_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn13_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn13_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn13_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn13_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn13_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn13_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn13_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn13_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn13_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn14;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn14_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn14_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn14_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn14_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn14_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn14_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn14_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn14_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn14_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn14_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn14_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn14_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn15;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn15_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn15_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn15_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn15_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn15_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn15_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn15_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn15_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn15_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn15_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn15_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn15_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn16;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn16_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn16_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn16_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn16_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn16_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn16_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn16_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn16_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn16_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn16_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn16_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn16_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn17;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn17_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn17_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn17_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn17_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn17_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn17_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn17_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn17_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn17_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn17_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn17_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn17_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn18;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn18_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn18_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn18_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn18_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn18_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn18_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn18_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn18_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn18_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn18_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn18_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn18_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn19;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn19_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn19_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn19_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn19_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn19_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn19_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn19_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn19_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn19_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn19_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn19_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn19_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn20;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn20_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn20_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn20_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn20_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn20_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn20_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn20_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn20_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn20_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn20_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn20_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn20_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn21;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn21_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn21_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn21_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn21_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn21_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn21_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn21_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn21_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn21_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn21_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn21_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn21_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn22;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn22_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn22_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn22_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn22_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn22_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn22_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn22_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn22_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn22_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn22_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn22_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn22_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn23;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn23_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn23_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn23_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn23_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn23_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn23_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn23_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn23_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn23_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn23_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn23_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn23_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn24;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn24_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn24_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn24_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn24_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn24_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn24_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn24_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn24_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn24_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn24_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn24_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn24_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn25;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn25_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn25_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn25_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn25_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn25_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn25_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn25_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn25_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn25_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn25_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn25_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn25_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn26;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn26_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn26_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn26_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn26_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn26_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn26_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn26_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn26_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn26_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn26_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn26_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn26_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn27;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn27_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn27_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn27_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn27_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn27_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn27_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn27_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn27_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn27_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn27_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn27_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn27_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn28;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn28_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn28_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn28_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn28_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn28_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn28_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn28_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn28_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn28_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn28_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn28_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn28_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn29;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn29_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn29_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn29_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn29_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn29_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn29_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn29_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn29_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn29_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn29_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn29_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn29_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn30;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn30_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn30_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn30_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn30_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn30_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn30_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn30_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn30_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn30_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn30_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn30_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn30_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn31;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn31_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn31_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn31_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn31_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn31_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn31_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn31_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn31_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn31_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn31_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn31_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn31_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn32;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn32_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn32_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn32_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn32_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn32_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn32_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn32_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn32_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn32_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn32_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn32_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn32_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn33;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn33_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn33_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn33_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn33_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn33_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn33_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn33_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn33_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn33_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn33_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn33_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn33_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn34;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn34_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn34_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn34_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn34_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn34_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn34_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn34_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn34_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn34_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn34_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn34_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn34_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn35;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn35_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn35_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn35_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn35_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn35_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn35_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn35_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn35_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn35_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn35_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn35_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn35_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn36;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn36_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn36_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn36_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn36_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn36_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn36_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn36_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn36_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn36_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn36_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn36_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn36_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn37;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn37_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn37_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn37_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn37_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn37_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn37_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn37_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn37_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn37_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn37_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn37_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn37_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn38;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn38_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn38_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn38_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn38_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn38_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn38_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn38_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn38_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn38_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn38_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn38_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn38_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn39;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn39_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn39_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn39_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn39_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn39_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn39_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn39_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn39_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn39_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn39_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn39_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn39_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn40;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn40_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn40_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn40_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn40_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn40_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn40_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn40_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn40_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn40_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn40_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn40_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn40_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn41;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn41_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn41_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn41_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn41_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn41_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn41_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn41_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn41_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn41_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn41_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn41_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn41_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn42;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn42_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn42_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn42_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn42_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn42_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn42_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn42_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn42_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn42_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn42_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn42_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn42_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn43;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn43_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn43_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn43_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn43_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn43_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn43_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn43_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn43_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn43_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn43_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn43_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn43_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn44;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn44_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn44_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn44_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn44_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn44_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn44_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn44_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn44_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn44_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn44_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn44_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn44_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn45;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn45_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn45_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn45_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn45_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn45_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn45_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn45_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn45_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn45_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn45_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn45_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn45_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn46;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn46_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn46_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn46_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn46_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn46_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn46_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn46_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn46_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn46_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn46_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn46_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn46_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn47;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn47_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn47_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn47_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn47_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn47_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn47_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn47_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn47_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn47_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn47_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn47_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn47_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn48;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn48_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn48_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn48_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn48_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn48_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn48_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn48_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn48_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn48_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn48_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn48_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn48_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn49;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn49_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn49_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn49_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn49_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn49_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn49_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn49_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn49_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn49_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn49_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn49_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn49_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn50;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn50_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn50_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn50_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn50_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn50_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn50_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn50_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn50_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn50_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn50_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn50_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn50_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn51;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn51_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn51_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn51_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn51_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn51_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn51_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn51_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn51_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn51_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn51_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn51_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn51_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn52;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn52_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn52_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn52_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn52_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn52_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn52_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn52_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn52_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn52_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn52_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn52_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn52_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn53;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn53_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn53_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn53_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn53_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn53_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn53_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn53_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn53_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn53_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn53_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn53_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn53_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn54;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn54_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn54_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn54_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn54_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn54_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn54_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn54_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn54_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn54_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn54_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn54_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn54_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn55;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn55_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn55_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn55_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn55_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn55_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn55_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn55_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn55_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn55_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn55_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn55_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn55_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn56;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn56_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn56_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn56_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn56_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn56_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn56_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn56_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn56_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn56_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn56_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn56_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn56_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn57;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn57_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn57_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn57_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn57_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn57_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn57_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn57_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn57_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn57_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn57_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn57_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn57_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn58;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn58_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn58_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn58_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn58_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn58_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn58_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn58_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn58_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn58_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn58_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn58_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn58_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn59;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn59_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn59_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn59_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn59_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn59_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn59_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn59_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn59_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn59_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn59_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn59_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn59_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn60;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn60_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn60_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn60_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn60_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn60_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn60_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn60_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn60_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn60_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn60_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn60_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn60_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn61;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn61_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn61_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn61_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn61_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn61_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn61_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn61_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn61_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn61_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn61_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn61_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn61_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn62;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn62_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn62_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn62_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn62_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn62_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn62_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn62_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn62_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn62_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn62_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn62_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn62_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn63;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn63_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn63_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn63_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn63_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn63_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn63_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn63_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn63_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn63_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn63_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn63_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn63_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn64;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn64_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn64_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn64_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn64_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn64_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn64_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn64_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn64_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn64_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn64_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn64_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn64_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn65;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn65_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn65_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn65_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn65_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn65_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn65_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn65_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn65_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn65_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn65_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn65_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn65_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn66;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn66_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn66_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn66_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn66_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn66_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn66_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn66_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn66_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn66_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn66_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn66_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn66_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn67;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn67_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn67_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn67_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn67_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn67_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn67_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn67_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn67_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn67_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn67_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn67_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn67_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn68;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn68_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn68_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn68_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn68_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn68_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn68_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn68_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn68_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn68_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn68_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn68_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn68_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn69;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn69_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn69_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn69_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn69_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn69_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn69_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn69_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn69_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn69_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn69_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn69_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn69_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn70;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn70_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn70_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn70_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn70_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn70_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn70_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn70_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn70_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn70_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn70_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn70_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn70_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn71;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn71_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn71_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn71_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn71_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn71_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn71_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn71_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn71_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn71_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn71_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn71_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn71_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn72;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn72_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn72_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn72_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn72_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn72_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn72_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn72_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn72_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn72_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn72_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn72_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn72_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn73;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn73_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn73_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn73_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn73_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn73_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn73_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn73_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn73_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn73_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn73_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn73_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn73_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn74;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn74_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn74_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn74_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn74_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn74_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn74_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn74_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn74_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn74_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn74_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn74_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn74_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn75;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn75_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn75_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn75_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn75_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn75_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn75_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn75_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn75_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn75_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn75_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn75_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn75_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn76;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn76_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn76_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn76_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn76_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn76_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn76_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn76_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn76_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn76_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn76_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn76_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn76_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn77;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn77_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn77_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn77_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn77_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn77_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn77_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn77_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn77_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn77_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn77_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn77_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn77_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn78;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn78_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn78_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn78_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn78_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn78_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn78_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn78_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn78_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn78_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn78_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn78_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn78_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn79;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn79_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn79_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn79_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn79_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn79_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn79_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn79_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn79_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn79_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn79_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn79_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn79_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn80;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn80_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn80_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn80_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn80_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn80_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn80_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn80_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn80_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn80_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn80_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn80_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn80_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn81;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn81_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn81_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn81_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn81_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn81_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn81_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn81_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn81_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn81_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn81_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn81_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn81_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn82;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn82_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn82_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn82_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn82_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn82_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn82_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn82_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn82_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn82_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn82_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn82_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn82_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn83;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn83_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn83_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn83_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn83_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn83_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn83_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn83_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn83_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn83_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn83_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn83_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn83_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn84;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn84_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn84_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn84_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn84_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn84_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn84_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn84_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn84_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn84_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn84_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn84_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn84_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn85;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn85_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn85_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn85_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn85_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn85_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn85_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn85_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn85_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn85_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn85_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn85_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn85_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn86;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn86_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn86_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn86_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn86_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn86_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn86_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn86_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn86_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn86_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn86_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn86_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn86_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn87;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn87_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn87_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn87_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn87_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn87_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn87_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn87_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn87_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn87_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn87_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn87_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn87_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn88;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn88_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn88_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn88_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn88_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn88_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn88_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn88_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn88_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn88_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn88_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn88_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn88_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn89;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn89_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn89_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn89_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn89_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn89_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn89_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn89_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn89_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn89_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn89_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn89_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn89_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn90;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn90_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn90_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn90_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn90_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn90_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn90_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn90_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn90_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn90_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn90_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn90_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn90_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn91;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn91_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn91_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn91_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn91_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn91_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn91_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn91_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn91_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn91_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn91_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn91_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn91_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn92;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn92_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn92_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn92_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn92_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn92_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn92_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn92_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn92_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn92_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn92_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn92_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn92_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn93;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn93_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn93_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn93_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn93_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn93_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn93_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn93_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn93_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn93_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn93_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn93_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn93_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn94;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn94_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn94_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn94_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn94_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn94_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn94_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn94_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn94_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn94_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn94_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn94_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn94_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn95;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn95_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn95_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn95_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn95_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn95_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn95_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn95_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn95_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn95_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn95_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn95_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn95_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn96;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn96_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn96_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn96_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn96_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn96_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn96_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn96_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn96_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn96_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn96_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn96_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn96_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn97;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn97_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn97_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn97_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn97_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn97_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn97_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn97_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn97_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn97_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn97_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn97_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn97_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn98;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn98_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn98_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn98_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn98_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn98_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn98_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn98_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn98_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn98_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn98_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn98_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn98_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn99;                                        // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn99_DATA_BYTE_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn99_DATA_BYTE_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn99_DATA_BYTE_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn99_DATA_BYTE_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn99_DATA_BYTE_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn99_DATA_BYTE_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn99_DATA_BYTE_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn99_DATA_BYTE_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn99_DATA_BYTE_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn99_DATA_BYTE_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn99_DATA_BYTE_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn99_DATA_BYTE_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             RAMn100;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn100_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn100_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn100_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn100_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn100_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn100_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn100_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn100_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn100_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn100_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn100_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn100_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn101;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn101_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn101_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn101_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn101_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn101_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn101_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn101_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn101_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn101_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn101_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn101_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn101_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn102;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn102_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn102_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn102_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn102_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn102_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn102_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn102_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn102_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn102_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn102_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn102_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn102_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn103;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn103_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn103_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn103_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn103_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn103_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn103_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn103_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn103_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn103_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn103_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn103_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn103_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn104;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn104_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn104_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn104_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn104_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn104_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn104_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn104_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn104_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn104_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn104_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn104_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn104_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn105;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn105_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn105_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn105_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn105_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn105_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn105_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn105_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn105_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn105_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn105_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn105_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn105_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn106;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn106_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn106_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn106_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn106_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn106_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn106_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn106_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn106_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn106_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn106_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn106_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn106_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn107;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn107_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn107_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn107_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn107_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn107_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn107_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn107_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn107_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn107_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn107_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn107_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn107_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn108;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn108_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn108_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn108_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn108_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn108_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn108_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn108_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn108_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn108_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn108_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn108_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn108_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn109;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn109_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn109_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn109_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn109_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn109_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn109_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn109_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn109_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn109_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn109_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn109_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn109_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn110;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn110_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn110_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn110_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn110_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn110_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn110_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn110_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn110_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn110_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn110_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn110_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn110_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn111;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn111_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn111_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn111_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn111_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn111_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn111_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn111_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn111_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn111_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn111_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn111_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn111_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn112;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn112_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn112_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn112_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn112_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn112_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn112_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn112_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn112_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn112_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn112_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn112_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn112_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn113;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn113_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn113_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn113_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn113_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn113_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn113_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn113_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn113_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn113_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn113_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn113_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn113_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn114;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn114_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn114_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn114_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn114_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn114_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn114_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn114_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn114_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn114_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn114_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn114_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn114_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn115;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn115_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn115_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn115_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn115_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn115_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn115_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn115_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn115_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn115_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn115_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn115_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn115_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn116;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn116_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn116_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn116_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn116_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn116_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn116_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn116_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn116_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn116_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn116_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn116_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn116_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn117;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn117_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn117_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn117_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn117_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn117_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn117_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn117_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn117_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn117_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn117_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn117_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn117_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn118;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn118_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn118_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn118_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn118_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn118_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn118_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn118_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn118_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn118_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn118_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn118_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn118_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn119;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn119_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn119_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn119_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn119_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn119_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn119_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn119_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn119_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn119_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn119_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn119_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn119_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn120;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn120_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn120_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn120_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn120_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn120_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn120_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn120_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn120_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn120_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn120_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn120_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn120_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn121;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn121_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn121_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn121_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn121_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn121_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn121_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn121_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn121_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn121_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn121_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn121_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn121_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn122;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn122_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn122_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn122_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn122_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn122_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn122_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn122_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn122_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn122_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn122_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn122_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn122_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn123;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn123_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn123_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn123_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn123_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn123_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn123_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn123_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn123_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn123_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn123_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn123_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn123_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn124;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn124_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn124_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn124_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn124_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn124_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn124_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn124_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn124_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn124_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn124_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn124_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn124_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn125;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn125_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn125_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn125_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn125_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn125_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn125_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn125_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn125_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn125_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn125_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn125_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn125_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn126;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn126_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn126_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn126_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn126_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn126_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn126_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn126_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn126_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn126_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn126_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn126_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn126_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             RAMn127;                                       // Embedded RAM
                                                                        // Data byte 3 of Rx/Tx frame.
#define CAN_RAMn127_DATA_BYTE_3(_n)              (((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn127_DATA_BYTE_3_INSERT(_v, _n)       (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_RAMn127_DATA_BYTE_3_EXTRACT(_v)          (((_v) >> 0) & 0xff)
                                                                        // Data byte 2 of Rx/Tx frame.
#define CAN_RAMn127_DATA_BYTE_2(_n)              (((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn127_DATA_BYTE_2_INSERT(_v, _n)       (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_RAMn127_DATA_BYTE_2_EXTRACT(_v)          (((_v) >> 8) & 0xff)
                                                                        // Data byte 1 of Rx/Tx frame.
#define CAN_RAMn127_DATA_BYTE_1(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn127_DATA_BYTE_1_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_RAMn127_DATA_BYTE_1_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // Data byte 0 of Rx/Tx frame.
#define CAN_RAMn127_DATA_BYTE_0(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn127_DATA_BYTE_0_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_RAMn127_DATA_BYTE_0_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint8_t _res5[1536];
    uint32_t             RXIMR0;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR1;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR2;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR3;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR4;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR5;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR6;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR7;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR8;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR9;                                        // Rx Individual Mask Registers
    uint32_t             RXIMR10;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR11;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR12;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR13;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR14;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR15;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR16;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR17;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR18;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR19;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR20;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR21;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR22;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR23;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR24;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR25;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR26;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR27;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR28;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR29;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR30;                                       // Rx Individual Mask Registers
    uint32_t             RXIMR31;                                       // Rx Individual Mask Registers
    uint8_t _res6[512];
    uint32_t             CTRL1_PN;                                      // Pretended Networking Control 1 Register
                                                                        // Filtering Combination Selection
#define CAN_CTRL1_PN_FCS(_n)                     (((uint32_t)(_n) & 0x3) << 0)
#define CAN_CTRL1_PN_FCS_INSERT(_v, _n)              (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define CAN_CTRL1_PN_FCS_EXTRACT(_v)                 (((_v) >> 0) & 0x3)
                                                                        // ID Filtering Selection
#define CAN_CTRL1_PN_IDFS(_n)                    (((uint32_t)(_n) & 0x3) << 2)
#define CAN_CTRL1_PN_IDFS_INSERT(_v, _n)             (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define CAN_CTRL1_PN_IDFS_EXTRACT(_v)                (((_v) >> 2) & 0x3)
                                                                        // Payload Filtering Selection
#define CAN_CTRL1_PN_PLFS(_n)                    (((uint32_t)(_n) & 0x3) << 4)
#define CAN_CTRL1_PN_PLFS_INSERT(_v, _n)             (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define CAN_CTRL1_PN_PLFS_EXTRACT(_v)                (((_v) >> 4) & 0x3)
                                                                        // Number of Messages Matching the Same Filtering Criteria
#define CAN_CTRL1_PN_NMATCH(_n)                  (((uint32_t)(_n) & 0xff) << 8)
#define CAN_CTRL1_PN_NMATCH_INSERT(_v, _n)           (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_CTRL1_PN_NMATCH_EXTRACT(_v)              (((_v) >> 8) & 0xff)
#define CAN_CTRL1_PN_WUMF_MSK                    ((uint32_t)1 << 16)    // Wake Up by Match Flag Mask Bit
#define CAN_CTRL1_PN_WTOF_MSK                    ((uint32_t)1 << 17)    // Wake Up by Timeout Flag Mask Bit

    uint32_t             CTRL2_PN;                                      // Pretended Networking Control 2 Register
                                                                        // Timeout for No Message Matching the Filtering Criteria
#define CAN_CTRL2_PN_MATCHTO(_n)                 (((uint32_t)(_n) & 0xffff) << 0)
#define CAN_CTRL2_PN_MATCHTO_INSERT(_v, _n)          (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define CAN_CTRL2_PN_MATCHTO_EXTRACT(_v)             (((_v) >> 0) & 0xffff)

    uint32_t             WU_MTC;                                        // Pretended Networking Wake Up Match Register
                                                                        // Number of Matches while in Pretended Networking
#define CAN_WU_MTC_MCOUNTER(_n)                  (((uint32_t)(_n) & 0xff) << 8)
#define CAN_WU_MTC_MCOUNTER_INSERT(_v, _n)           (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_WU_MTC_MCOUNTER_EXTRACT(_v)              (((_v) >> 8) & 0xff)
#define CAN_WU_MTC_WUMF                          ((uint32_t)1 << 16)    // Wake Up by Match Flag Bit
#define CAN_WU_MTC_WTOF                          ((uint32_t)1 << 17)    // Wake Up by Timeout Flag Bit

    uint32_t             FLT_ID1;                                       // Pretended Networking ID Filter 1 Register
                                                                        // ID Filter 1 for Pretended Networking filtering
#define CAN_FLT_ID1_FLT_ID1(_n)                  (((uint32_t)(_n) & 0x1fffffff) << 0)
#define CAN_FLT_ID1_FLT_ID1_INSERT(_v, _n)           (((_v) & ~0x1fffffff) | ((uint32_t)(_n) & 0x1fffffff) << 0)
#define CAN_FLT_ID1_FLT_ID1_EXTRACT(_v)              (((_v) >> 0) & 0x1fffffff)
#define CAN_FLT_ID1_FLT_RTR                      ((uint32_t)1 << 29)    // Remote Transmission Request Filter
#define CAN_FLT_ID1_FLT_IDE                      ((uint32_t)1 << 30)    // ID Extended Filter

    uint32_t             FLT_DLC;                                       // Pretended Networking DLC Filter Register
                                                                        // Upper Limit for Length of Data Bytes Filter
#define CAN_FLT_DLC_FLT_DLC_HI(_n)               (((uint32_t)(_n) & 0xf) << 0)
#define CAN_FLT_DLC_FLT_DLC_HI_INSERT(_v, _n)        (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define CAN_FLT_DLC_FLT_DLC_HI_EXTRACT(_v)           (((_v) >> 0) & 0xf)
                                                                        // Lower Limit for Length of Data Bytes Filter
#define CAN_FLT_DLC_FLT_DLC_LO(_n)               (((uint32_t)(_n) & 0xf) << 16)
#define CAN_FLT_DLC_FLT_DLC_LO_INSERT(_v, _n)        (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define CAN_FLT_DLC_FLT_DLC_LO_EXTRACT(_v)           (((_v) >> 16) & 0xf)

    uint32_t             PL1_LO;                                        // Pretended Networking Payload Low Filter 1 Register
                                                                        // Payload Filter 1 low order bits for Pretended Networking payload filtering corresponding to the data byte 3.
#define CAN_PL1_LO_Data_byte_3(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_PL1_LO_Data_byte_3_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_PL1_LO_Data_byte_3_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Payload Filter 1 low order bits for Pretended Networking payload filtering corresponding to the data byte 2.
#define CAN_PL1_LO_Data_byte_2(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_PL1_LO_Data_byte_2_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_PL1_LO_Data_byte_2_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Payload Filter 1 low order bits for Pretended Networking payload filtering corresponding to the data byte 1.
#define CAN_PL1_LO_Data_byte_1(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_PL1_LO_Data_byte_1_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_PL1_LO_Data_byte_1_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Payload Filter 1 low order bits for Pretended Networking payload filtering corresponding to the data byte 0.
#define CAN_PL1_LO_Data_byte_0(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_PL1_LO_Data_byte_0_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_PL1_LO_Data_byte_0_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             PL1_HI;                                        // Pretended Networking Payload High Filter 1 Register
                                                                        // Payload Filter 1 high order bits for Pretended Networking payload filtering corresponding to the data byte 7.
#define CAN_PL1_HI_Data_byte_7(_n)               (((uint32_t)(_n) & 0xff) << 0)
#define CAN_PL1_HI_Data_byte_7_INSERT(_v, _n)        (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_PL1_HI_Data_byte_7_EXTRACT(_v)           (((_v) >> 0) & 0xff)
                                                                        // Payload Filter 1 high order bits for Pretended Networking payload filtering corresponding to the data byte 6.
#define CAN_PL1_HI_Data_byte_6(_n)               (((uint32_t)(_n) & 0xff) << 8)
#define CAN_PL1_HI_Data_byte_6_INSERT(_v, _n)        (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_PL1_HI_Data_byte_6_EXTRACT(_v)           (((_v) >> 8) & 0xff)
                                                                        // Payload Filter 1 high order bits for Pretended Networking payload filtering corresponding to the data byte 5.
#define CAN_PL1_HI_Data_byte_5(_n)               (((uint32_t)(_n) & 0xff) << 16)
#define CAN_PL1_HI_Data_byte_5_INSERT(_v, _n)        (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_PL1_HI_Data_byte_5_EXTRACT(_v)           (((_v) >> 16) & 0xff)
                                                                        // Payload Filter 1 high order bits for Pretended Networking payload filtering corresponding to the data byte 4.
#define CAN_PL1_HI_Data_byte_4(_n)               (((uint32_t)(_n) & 0xff) << 24)
#define CAN_PL1_HI_Data_byte_4_INSERT(_v, _n)        (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_PL1_HI_Data_byte_4_EXTRACT(_v)           (((_v) >> 24) & 0xff)

    uint32_t             FLT_ID2_IDMASK;                                // Pretended Networking ID Filter 2 Register / ID Mask Register
                                                                        // ID Filter 2 for Pretended Networking Filtering / ID Mask Bits for Pretended Networking ID Filtering
#define CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK(_n)    (((uint32_t)(_n) & 0x1fffffff) << 0)
#define CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK_INSERT(_v, _n) (((_v) & ~0x1fffffff) | ((uint32_t)(_n) & 0x1fffffff) << 0)
#define CAN_FLT_ID2_IDMASK_FLT_ID2_IDMASK_EXTRACT(_v) (((_v) >> 0) & 0x1fffffff)
#define CAN_FLT_ID2_IDMASK_RTR_MSK               ((uint32_t)1 << 29)    // Remote Transmission Request Mask Bit
#define CAN_FLT_ID2_IDMASK_IDE_MSK               ((uint32_t)1 << 30)    // ID Extended Mask Bit

    uint32_t             PL2_PLMASK_LO;                                 // Pretended Networking Payload Low Filter 2 Register / Payload Low Mask Register
                                                                        // Payload Filter 2 low order bits / Payload Mask low order bits for Pretended Networking payload filtering corresponding to the data byte 3.
#define CAN_PL2_PLMASK_LO_Data_byte_3(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CAN_PL2_PLMASK_LO_Data_byte_3_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_PL2_PLMASK_LO_Data_byte_3_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Payload Filter 2 low order bits / Payload Mask low order bits for Pretended Networking payload filtering corresponding to the data byte 2.
#define CAN_PL2_PLMASK_LO_Data_byte_2(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CAN_PL2_PLMASK_LO_Data_byte_2_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_PL2_PLMASK_LO_Data_byte_2_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Payload Filter 2 low order bits / Payload Mask low order bits for Pretended Networking payload filtering corresponding to the data byte 1.
#define CAN_PL2_PLMASK_LO_Data_byte_1(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CAN_PL2_PLMASK_LO_Data_byte_1_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_PL2_PLMASK_LO_Data_byte_1_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Payload Filter 2 low order bits / Payload Mask low order bits for Pretended Networking payload filtering corresponding to the data byte 0.
#define CAN_PL2_PLMASK_LO_Data_byte_0(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CAN_PL2_PLMASK_LO_Data_byte_0_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_PL2_PLMASK_LO_Data_byte_0_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint32_t             PL2_PLMASK_HI;                                 // Pretended Networking Payload High Filter 2 low order bits / Payload High Mask Register
                                                                        // Payload Filter 2 high order bits / Payload Mask high order bits for Pretended Networking payload filtering corresponding to the data byte 7.
#define CAN_PL2_PLMASK_HI_Data_byte_7(_n)        (((uint32_t)(_n) & 0xff) << 0)
#define CAN_PL2_PLMASK_HI_Data_byte_7_INSERT(_v, _n) (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CAN_PL2_PLMASK_HI_Data_byte_7_EXTRACT(_v)    (((_v) >> 0) & 0xff)
                                                                        // Payload Filter 2 high order bits / Payload Mask high order bits for Pretended Networking payload filtering corresponding to the data byte 6.
#define CAN_PL2_PLMASK_HI_Data_byte_6(_n)        (((uint32_t)(_n) & 0xff) << 8)
#define CAN_PL2_PLMASK_HI_Data_byte_6_INSERT(_v, _n) (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CAN_PL2_PLMASK_HI_Data_byte_6_EXTRACT(_v)    (((_v) >> 8) & 0xff)
                                                                        // Payload Filter 2 high order bits / Payload Mask high order bits for Pretended Networking payload filtering corresponding to the data byte 5.
#define CAN_PL2_PLMASK_HI_Data_byte_5(_n)        (((uint32_t)(_n) & 0xff) << 16)
#define CAN_PL2_PLMASK_HI_Data_byte_5_INSERT(_v, _n) (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CAN_PL2_PLMASK_HI_Data_byte_5_EXTRACT(_v)    (((_v) >> 16) & 0xff)
                                                                        // Payload Filter 2 high order bits / Payload Mask high order bits for Pretended Networking payload filtering corresponding to the data byte 4.
#define CAN_PL2_PLMASK_HI_Data_byte_4(_n)        (((uint32_t)(_n) & 0xff) << 24)
#define CAN_PL2_PLMASK_HI_Data_byte_4_INSERT(_v, _n) (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CAN_PL2_PLMASK_HI_Data_byte_4_EXTRACT(_v)    (((_v) >> 24) & 0xff)

    uint8_t _res7[24];
    const uint32_t       WMB0_CS;                                       // Wake Up Message Buffer Register for C/S
                                                                        // Length of Data in Bytes
#define CAN_WMB0_CS_DLC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define CAN_WMB0_CS_RTR                          ((uint32_t)1 << 20)    // Remote Transmission Request Bit
#define CAN_WMB0_CS_IDE                          ((uint32_t)1 << 21)    // ID Extended Bit
#define CAN_WMB0_CS_SRR                          ((uint32_t)1 << 22)    // Substitute Remote Request

    const uint32_t       WMB0_ID;                                       // Wake Up Message Buffer Register for ID
                                                                        // Received ID under Pretended Networking mode
#define CAN_WMB0_ID_ID_EXTRACT(_v)                   (((_v) >> 0) & 0x1fffffff)

    const uint32_t       WMB0_D03;                                      // Wake Up Message Buffer Register for Data 0-3
                                                                        // Received payload corresponding to the data byte 3 under Pretended Networking mode
#define CAN_WMB0_D03_Data_byte_3_EXTRACT(_v)         (((_v) >> 0) & 0xff)
                                                                        // Received payload corresponding to the data byte 2 under Pretended Networking mode
#define CAN_WMB0_D03_Data_byte_2_EXTRACT(_v)         (((_v) >> 8) & 0xff)
                                                                        // Received payload corresponding to the data byte 1 under Pretended Networking mode
#define CAN_WMB0_D03_Data_byte_1_EXTRACT(_v)         (((_v) >> 16) & 0xff)
                                                                        // Received payload corresponding to the data byte 0 under Pretended Networking mode
#define CAN_WMB0_D03_Data_byte_0_EXTRACT(_v)         (((_v) >> 24) & 0xff)

    const uint32_t       WMB0_D47;                                      // Wake Up Message Buffer Register Data 4-7
                                                                        // Received payload corresponding to the data byte 7 under Pretended Networking mode
#define CAN_WMB0_D47_Data_byte_7_EXTRACT(_v)         (((_v) >> 0) & 0xff)
                                                                        // Received payload corresponding to the data byte 6 under Pretended Networking mode
#define CAN_WMB0_D47_Data_byte_6_EXTRACT(_v)         (((_v) >> 8) & 0xff)
                                                                        // Received payload corresponding to the data byte 5 under Pretended Networking mode
#define CAN_WMB0_D47_Data_byte_5_EXTRACT(_v)         (((_v) >> 16) & 0xff)
                                                                        // Received payload corresponding to the data byte 4 under Pretended Networking mode
#define CAN_WMB0_D47_Data_byte_4_EXTRACT(_v)         (((_v) >> 24) & 0xff)

    const uint32_t       WMB1_CS;                                       // Wake Up Message Buffer Register for C/S
                                                                        // Length of Data in Bytes
#define CAN_WMB1_CS_DLC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define CAN_WMB1_CS_RTR                          ((uint32_t)1 << 20)    // Remote Transmission Request Bit
#define CAN_WMB1_CS_IDE                          ((uint32_t)1 << 21)    // ID Extended Bit
#define CAN_WMB1_CS_SRR                          ((uint32_t)1 << 22)    // Substitute Remote Request

    const uint32_t       WMB1_ID;                                       // Wake Up Message Buffer Register for ID
                                                                        // Received ID under Pretended Networking mode
#define CAN_WMB1_ID_ID_EXTRACT(_v)                   (((_v) >> 0) & 0x1fffffff)

    const uint32_t       WMB1_D03;                                      // Wake Up Message Buffer Register for Data 0-3
                                                                        // Received payload corresponding to the data byte 3 under Pretended Networking mode
#define CAN_WMB1_D03_Data_byte_3_EXTRACT(_v)         (((_v) >> 0) & 0xff)
                                                                        // Received payload corresponding to the data byte 2 under Pretended Networking mode
#define CAN_WMB1_D03_Data_byte_2_EXTRACT(_v)         (((_v) >> 8) & 0xff)
                                                                        // Received payload corresponding to the data byte 1 under Pretended Networking mode
#define CAN_WMB1_D03_Data_byte_1_EXTRACT(_v)         (((_v) >> 16) & 0xff)
                                                                        // Received payload corresponding to the data byte 0 under Pretended Networking mode
#define CAN_WMB1_D03_Data_byte_0_EXTRACT(_v)         (((_v) >> 24) & 0xff)

    const uint32_t       WMB1_D47;                                      // Wake Up Message Buffer Register Data 4-7
                                                                        // Received payload corresponding to the data byte 7 under Pretended Networking mode
#define CAN_WMB1_D47_Data_byte_7_EXTRACT(_v)         (((_v) >> 0) & 0xff)
                                                                        // Received payload corresponding to the data byte 6 under Pretended Networking mode
#define CAN_WMB1_D47_Data_byte_6_EXTRACT(_v)         (((_v) >> 8) & 0xff)
                                                                        // Received payload corresponding to the data byte 5 under Pretended Networking mode
#define CAN_WMB1_D47_Data_byte_5_EXTRACT(_v)         (((_v) >> 16) & 0xff)
                                                                        // Received payload corresponding to the data byte 4 under Pretended Networking mode
#define CAN_WMB1_D47_Data_byte_4_EXTRACT(_v)         (((_v) >> 24) & 0xff)

    const uint32_t       WMB2_CS;                                       // Wake Up Message Buffer Register for C/S
                                                                        // Length of Data in Bytes
#define CAN_WMB2_CS_DLC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define CAN_WMB2_CS_RTR                          ((uint32_t)1 << 20)    // Remote Transmission Request Bit
#define CAN_WMB2_CS_IDE                          ((uint32_t)1 << 21)    // ID Extended Bit
#define CAN_WMB2_CS_SRR                          ((uint32_t)1 << 22)    // Substitute Remote Request

    const uint32_t       WMB2_ID;                                       // Wake Up Message Buffer Register for ID
                                                                        // Received ID under Pretended Networking mode
#define CAN_WMB2_ID_ID_EXTRACT(_v)                   (((_v) >> 0) & 0x1fffffff)

    const uint32_t       WMB2_D03;                                      // Wake Up Message Buffer Register for Data 0-3
                                                                        // Received payload corresponding to the data byte 3 under Pretended Networking mode
#define CAN_WMB2_D03_Data_byte_3_EXTRACT(_v)         (((_v) >> 0) & 0xff)
                                                                        // Received payload corresponding to the data byte 2 under Pretended Networking mode
#define CAN_WMB2_D03_Data_byte_2_EXTRACT(_v)         (((_v) >> 8) & 0xff)
                                                                        // Received payload corresponding to the data byte 1 under Pretended Networking mode
#define CAN_WMB2_D03_Data_byte_1_EXTRACT(_v)         (((_v) >> 16) & 0xff)
                                                                        // Received payload corresponding to the data byte 0 under Pretended Networking mode
#define CAN_WMB2_D03_Data_byte_0_EXTRACT(_v)         (((_v) >> 24) & 0xff)

    const uint32_t       WMB2_D47;                                      // Wake Up Message Buffer Register Data 4-7
                                                                        // Received payload corresponding to the data byte 7 under Pretended Networking mode
#define CAN_WMB2_D47_Data_byte_7_EXTRACT(_v)         (((_v) >> 0) & 0xff)
                                                                        // Received payload corresponding to the data byte 6 under Pretended Networking mode
#define CAN_WMB2_D47_Data_byte_6_EXTRACT(_v)         (((_v) >> 8) & 0xff)
                                                                        // Received payload corresponding to the data byte 5 under Pretended Networking mode
#define CAN_WMB2_D47_Data_byte_5_EXTRACT(_v)         (((_v) >> 16) & 0xff)
                                                                        // Received payload corresponding to the data byte 4 under Pretended Networking mode
#define CAN_WMB2_D47_Data_byte_4_EXTRACT(_v)         (((_v) >> 24) & 0xff)

    const uint32_t       WMB3_CS;                                       // Wake Up Message Buffer Register for C/S
                                                                        // Length of Data in Bytes
#define CAN_WMB3_CS_DLC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define CAN_WMB3_CS_RTR                          ((uint32_t)1 << 20)    // Remote Transmission Request Bit
#define CAN_WMB3_CS_IDE                          ((uint32_t)1 << 21)    // ID Extended Bit
#define CAN_WMB3_CS_SRR                          ((uint32_t)1 << 22)    // Substitute Remote Request

    const uint32_t       WMB3_ID;                                       // Wake Up Message Buffer Register for ID
                                                                        // Received ID under Pretended Networking mode
#define CAN_WMB3_ID_ID_EXTRACT(_v)                   (((_v) >> 0) & 0x1fffffff)

    const uint32_t       WMB3_D03;                                      // Wake Up Message Buffer Register for Data 0-3
                                                                        // Received payload corresponding to the data byte 3 under Pretended Networking mode
#define CAN_WMB3_D03_Data_byte_3_EXTRACT(_v)         (((_v) >> 0) & 0xff)
                                                                        // Received payload corresponding to the data byte 2 under Pretended Networking mode
#define CAN_WMB3_D03_Data_byte_2_EXTRACT(_v)         (((_v) >> 8) & 0xff)
                                                                        // Received payload corresponding to the data byte 1 under Pretended Networking mode
#define CAN_WMB3_D03_Data_byte_1_EXTRACT(_v)         (((_v) >> 16) & 0xff)
                                                                        // Received payload corresponding to the data byte 0 under Pretended Networking mode
#define CAN_WMB3_D03_Data_byte_0_EXTRACT(_v)         (((_v) >> 24) & 0xff)

    const uint32_t       WMB3_D47;                                      // Wake Up Message Buffer Register Data 4-7
                                                                        // Received payload corresponding to the data byte 7 under Pretended Networking mode
#define CAN_WMB3_D47_Data_byte_7_EXTRACT(_v)         (((_v) >> 0) & 0xff)
                                                                        // Received payload corresponding to the data byte 6 under Pretended Networking mode
#define CAN_WMB3_D47_Data_byte_6_EXTRACT(_v)         (((_v) >> 8) & 0xff)
                                                                        // Received payload corresponding to the data byte 5 under Pretended Networking mode
#define CAN_WMB3_D47_Data_byte_5_EXTRACT(_v)         (((_v) >> 16) & 0xff)
                                                                        // Received payload corresponding to the data byte 4 under Pretended Networking mode
#define CAN_WMB3_D47_Data_byte_4_EXTRACT(_v)         (((_v) >> 24) & 0xff)

    uint8_t _res8[128];
    uint32_t             FDCTRL;                                        // CAN FD Control Register
                                                                        // Transceiver Delay Compensation Value
#define CAN_FDCTRL_TDCVAL(_n)                    (((uint32_t)(_n) & 0x3f) << 0)
#define CAN_FDCTRL_TDCVAL_INSERT(_v, _n)             (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define CAN_FDCTRL_TDCVAL_EXTRACT(_v)                (((_v) >> 0) & 0x3f)
                                                                        // Transceiver Delay Compensation Offset
#define CAN_FDCTRL_TDCOFF(_n)                    (((uint32_t)(_n) & 0x1f) << 8)
#define CAN_FDCTRL_TDCOFF_INSERT(_v, _n)             (((_v) & ~0x1f00) | ((uint32_t)(_n) & 0x1f) << 8)
#define CAN_FDCTRL_TDCOFF_EXTRACT(_v)                (((_v) >> 8) & 0x1f)
#define CAN_FDCTRL_TDCFAIL                       ((uint32_t)1 << 14)    // Transceiver Delay Compensation Fail
#define CAN_FDCTRL_TDCEN                         ((uint32_t)1 << 15)    // Transceiver Delay Compensation Enable
                                                                        // Message Buffer Data Size for Region 0
#define CAN_FDCTRL_MBDSR0(_n)                    (((uint32_t)(_n) & 0x3) << 16)
#define CAN_FDCTRL_MBDSR0_INSERT(_v, _n)             (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define CAN_FDCTRL_MBDSR0_EXTRACT(_v)                (((_v) >> 16) & 0x3)
#define CAN_FDCTRL_FDRATE                        ((uint32_t)1 << 31)    // Bit Rate Switch Enable

    uint32_t             FDCBT;                                         // CAN FD Bit Timing Register
                                                                        // Fast Phase Segment 2
#define CAN_FDCBT_FPSEG2(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define CAN_FDCBT_FPSEG2_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define CAN_FDCBT_FPSEG2_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
                                                                        // Fast Phase Segment 1
#define CAN_FDCBT_FPSEG1(_n)                     (((uint32_t)(_n) & 0x7) << 5)
#define CAN_FDCBT_FPSEG1_INSERT(_v, _n)              (((_v) & ~0xe0) | ((uint32_t)(_n) & 0x7) << 5)
#define CAN_FDCBT_FPSEG1_EXTRACT(_v)                 (((_v) >> 5) & 0x7)
                                                                        // Fast Propagation Segment
#define CAN_FDCBT_FPROPSEG(_n)                   (((uint32_t)(_n) & 0x1f) << 10)
#define CAN_FDCBT_FPROPSEG_INSERT(_v, _n)            (((_v) & ~0x7c00) | ((uint32_t)(_n) & 0x1f) << 10)
#define CAN_FDCBT_FPROPSEG_EXTRACT(_v)               (((_v) >> 10) & 0x1f)
                                                                        // Fast Resync Jump Width
#define CAN_FDCBT_FRJW(_n)                       (((uint32_t)(_n) & 0x7) << 16)
#define CAN_FDCBT_FRJW_INSERT(_v, _n)                (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define CAN_FDCBT_FRJW_EXTRACT(_v)                   (((_v) >> 16) & 0x7)
                                                                        // Fast Prescaler Division Factor
#define CAN_FDCBT_FPRESDIV(_n)                   (((uint32_t)(_n) & 0x3ff) << 20)
#define CAN_FDCBT_FPRESDIV_INSERT(_v, _n)            (((_v) & ~0x3ff00000) | ((uint32_t)(_n) & 0x3ff) << 20)
#define CAN_FDCBT_FPRESDIV_EXTRACT(_v)               (((_v) >> 20) & 0x3ff)

    const uint32_t       FDCRC;                                         // CAN FD CRC Register
                                                                        // Extended Transmitted CRC value
#define CAN_FDCRC_FD_TXCRC_EXTRACT(_v)               (((_v) >> 0) & 0x1fffff)
                                                                        // CRC Mailbox Number for FD_TXCRC
#define CAN_FDCRC_FD_MBCRC_EXTRACT(_v)               (((_v) >> 24) & 0x7f)

} CAN_regs_t;
                                                                        // --------------------
                                                                        // FlexTimer Module
typedef struct                                                          // --------------------
{
    uint32_t             SC;                                            // Status And Control
                                                                        // Prescale Factor Selection
#define FTM_SC_PS(_n)                            (((uint32_t)(_n) & 0x7) << 0)
#define FTM_SC_PS_INSERT(_v, _n)                     (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define FTM_SC_PS_EXTRACT(_v)                        (((_v) >> 0) & 0x7)
                                                                        // Clock Source Selection
#define FTM_SC_CLKS(_n)                          (((uint32_t)(_n) & 0x3) << 3)
#define FTM_SC_CLKS_INSERT(_v, _n)                   (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define FTM_SC_CLKS_EXTRACT(_v)                      (((_v) >> 3) & 0x3)
#define FTM_SC_CPWMS                             ((uint32_t)1 << 5)     // Center-Aligned PWM Select
#define FTM_SC_RIE                               ((uint32_t)1 << 6)     // Reload Point Interrupt Enable
#define FTM_SC_RF                                ((uint32_t)1 << 7)     // Reload Flag
#define FTM_SC_TOIE                              ((uint32_t)1 << 8)     // Timer Overflow Interrupt Enable
#define FTM_SC_TOF                               ((uint32_t)1 << 9)     // Timer Overflow Flag
#define FTM_SC_PWMEN0                            ((uint32_t)1 << 16)    // Channel 0 PWM enable bit
#define FTM_SC_PWMEN1                            ((uint32_t)1 << 17)    // Channel 1 PWM enable bit
#define FTM_SC_PWMEN2                            ((uint32_t)1 << 18)    // Channel 2 PWM enable bit
#define FTM_SC_PWMEN3                            ((uint32_t)1 << 19)    // Channel 3 PWM enable bit
#define FTM_SC_PWMEN4                            ((uint32_t)1 << 20)    // Channel 4 PWM enable bit
#define FTM_SC_PWMEN5                            ((uint32_t)1 << 21)    // Channel 5 PWM enable bit
#define FTM_SC_PWMEN6                            ((uint32_t)1 << 22)    // Channel 6 PWM enable bit
#define FTM_SC_PWMEN7                            ((uint32_t)1 << 23)    // Channel 7 PWM enable bit
                                                                        // Filter Prescaler
#define FTM_SC_FLTPS(_n)                         (((uint32_t)(_n) & 0xf) << 24)
#define FTM_SC_FLTPS_INSERT(_v, _n)                  (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define FTM_SC_FLTPS_EXTRACT(_v)                     (((_v) >> 24) & 0xf)

    uint32_t             CNT;                                           // Counter
                                                                        // Counter Value
#define FTM_CNT_COUNT(_n)                        (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_CNT_COUNT_INSERT(_v, _n)                 (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_CNT_COUNT_EXTRACT(_v)                    (((_v) >> 0) & 0xffff)

    uint32_t             MOD;                                           // Modulo
                                                                        // MOD
#define FTM_MOD_MOD(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_MOD_MOD_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_MOD_MOD_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             C0SC;                                          // Channel (n) Status And Control
#define FTM_C0SC_DMA                             ((uint32_t)1 << 0)     // DMA Enable
#define FTM_C0SC_ICRST                           ((uint32_t)1 << 1)     // FTM counter reset by the selected input capture event.
#define FTM_C0SC_ELSA                            ((uint32_t)1 << 2)     // Channel (n) Edge or Level Select
#define FTM_C0SC_ELSB                            ((uint32_t)1 << 3)     // Channel (n) Edge or Level Select
#define FTM_C0SC_MSA                             ((uint32_t)1 << 4)     // Channel (n) Mode Select
#define FTM_C0SC_MSB                             ((uint32_t)1 << 5)     // Channel (n) Mode Select
#define FTM_C0SC_CHIE                            ((uint32_t)1 << 6)     // Channel (n) Interrupt Enable
#define FTM_C0SC_CHF                             ((uint32_t)1 << 7)     // Channel (n) Flag
#define FTM_C0SC_TRIGMODE                        ((uint32_t)1 << 8)     // Trigger mode control
#define FTM_C0SC_CHIS                            ((uint32_t)1 << 9)     // Channel (n) Input State
#define FTM_C0SC_CHOV                            ((uint32_t)1 << 10)    // Channel (n) Output Value

    uint32_t             C0V;                                           // Channel (n) Value
                                                                        // Channel Value
#define FTM_C0V_VAL(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C0V_VAL_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C0V_VAL_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             C1SC;                                          // Channel (n) Status And Control
#define FTM_C1SC_DMA                             ((uint32_t)1 << 0)     // DMA Enable
#define FTM_C1SC_ICRST                           ((uint32_t)1 << 1)     // FTM counter reset by the selected input capture event.
#define FTM_C1SC_ELSA                            ((uint32_t)1 << 2)     // Channel (n) Edge or Level Select
#define FTM_C1SC_ELSB                            ((uint32_t)1 << 3)     // Channel (n) Edge or Level Select
#define FTM_C1SC_MSA                             ((uint32_t)1 << 4)     // Channel (n) Mode Select
#define FTM_C1SC_MSB                             ((uint32_t)1 << 5)     // Channel (n) Mode Select
#define FTM_C1SC_CHIE                            ((uint32_t)1 << 6)     // Channel (n) Interrupt Enable
#define FTM_C1SC_CHF                             ((uint32_t)1 << 7)     // Channel (n) Flag
#define FTM_C1SC_TRIGMODE                        ((uint32_t)1 << 8)     // Trigger mode control
#define FTM_C1SC_CHIS                            ((uint32_t)1 << 9)     // Channel (n) Input State
#define FTM_C1SC_CHOV                            ((uint32_t)1 << 10)    // Channel (n) Output Value

    uint32_t             C1V;                                           // Channel (n) Value
                                                                        // Channel Value
#define FTM_C1V_VAL(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C1V_VAL_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C1V_VAL_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             C2SC;                                          // Channel (n) Status And Control
#define FTM_C2SC_DMA                             ((uint32_t)1 << 0)     // DMA Enable
#define FTM_C2SC_ICRST                           ((uint32_t)1 << 1)     // FTM counter reset by the selected input capture event.
#define FTM_C2SC_ELSA                            ((uint32_t)1 << 2)     // Channel (n) Edge or Level Select
#define FTM_C2SC_ELSB                            ((uint32_t)1 << 3)     // Channel (n) Edge or Level Select
#define FTM_C2SC_MSA                             ((uint32_t)1 << 4)     // Channel (n) Mode Select
#define FTM_C2SC_MSB                             ((uint32_t)1 << 5)     // Channel (n) Mode Select
#define FTM_C2SC_CHIE                            ((uint32_t)1 << 6)     // Channel (n) Interrupt Enable
#define FTM_C2SC_CHF                             ((uint32_t)1 << 7)     // Channel (n) Flag
#define FTM_C2SC_TRIGMODE                        ((uint32_t)1 << 8)     // Trigger mode control
#define FTM_C2SC_CHIS                            ((uint32_t)1 << 9)     // Channel (n) Input State
#define FTM_C2SC_CHOV                            ((uint32_t)1 << 10)    // Channel (n) Output Value

    uint32_t             C2V;                                           // Channel (n) Value
                                                                        // Channel Value
#define FTM_C2V_VAL(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C2V_VAL_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C2V_VAL_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             C3SC;                                          // Channel (n) Status And Control
#define FTM_C3SC_DMA                             ((uint32_t)1 << 0)     // DMA Enable
#define FTM_C3SC_ICRST                           ((uint32_t)1 << 1)     // FTM counter reset by the selected input capture event.
#define FTM_C3SC_ELSA                            ((uint32_t)1 << 2)     // Channel (n) Edge or Level Select
#define FTM_C3SC_ELSB                            ((uint32_t)1 << 3)     // Channel (n) Edge or Level Select
#define FTM_C3SC_MSA                             ((uint32_t)1 << 4)     // Channel (n) Mode Select
#define FTM_C3SC_MSB                             ((uint32_t)1 << 5)     // Channel (n) Mode Select
#define FTM_C3SC_CHIE                            ((uint32_t)1 << 6)     // Channel (n) Interrupt Enable
#define FTM_C3SC_CHF                             ((uint32_t)1 << 7)     // Channel (n) Flag
#define FTM_C3SC_TRIGMODE                        ((uint32_t)1 << 8)     // Trigger mode control
#define FTM_C3SC_CHIS                            ((uint32_t)1 << 9)     // Channel (n) Input State
#define FTM_C3SC_CHOV                            ((uint32_t)1 << 10)    // Channel (n) Output Value

    uint32_t             C3V;                                           // Channel (n) Value
                                                                        // Channel Value
#define FTM_C3V_VAL(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C3V_VAL_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C3V_VAL_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             C4SC;                                          // Channel (n) Status And Control
#define FTM_C4SC_DMA                             ((uint32_t)1 << 0)     // DMA Enable
#define FTM_C4SC_ICRST                           ((uint32_t)1 << 1)     // FTM counter reset by the selected input capture event.
#define FTM_C4SC_ELSA                            ((uint32_t)1 << 2)     // Channel (n) Edge or Level Select
#define FTM_C4SC_ELSB                            ((uint32_t)1 << 3)     // Channel (n) Edge or Level Select
#define FTM_C4SC_MSA                             ((uint32_t)1 << 4)     // Channel (n) Mode Select
#define FTM_C4SC_MSB                             ((uint32_t)1 << 5)     // Channel (n) Mode Select
#define FTM_C4SC_CHIE                            ((uint32_t)1 << 6)     // Channel (n) Interrupt Enable
#define FTM_C4SC_CHF                             ((uint32_t)1 << 7)     // Channel (n) Flag
#define FTM_C4SC_TRIGMODE                        ((uint32_t)1 << 8)     // Trigger mode control
#define FTM_C4SC_CHIS                            ((uint32_t)1 << 9)     // Channel (n) Input State
#define FTM_C4SC_CHOV                            ((uint32_t)1 << 10)    // Channel (n) Output Value

    uint32_t             C4V;                                           // Channel (n) Value
                                                                        // Channel Value
#define FTM_C4V_VAL(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C4V_VAL_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C4V_VAL_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             C5SC;                                          // Channel (n) Status And Control
#define FTM_C5SC_DMA                             ((uint32_t)1 << 0)     // DMA Enable
#define FTM_C5SC_ICRST                           ((uint32_t)1 << 1)     // FTM counter reset by the selected input capture event.
#define FTM_C5SC_ELSA                            ((uint32_t)1 << 2)     // Channel (n) Edge or Level Select
#define FTM_C5SC_ELSB                            ((uint32_t)1 << 3)     // Channel (n) Edge or Level Select
#define FTM_C5SC_MSA                             ((uint32_t)1 << 4)     // Channel (n) Mode Select
#define FTM_C5SC_MSB                             ((uint32_t)1 << 5)     // Channel (n) Mode Select
#define FTM_C5SC_CHIE                            ((uint32_t)1 << 6)     // Channel (n) Interrupt Enable
#define FTM_C5SC_CHF                             ((uint32_t)1 << 7)     // Channel (n) Flag
#define FTM_C5SC_TRIGMODE                        ((uint32_t)1 << 8)     // Trigger mode control
#define FTM_C5SC_CHIS                            ((uint32_t)1 << 9)     // Channel (n) Input State
#define FTM_C5SC_CHOV                            ((uint32_t)1 << 10)    // Channel (n) Output Value

    uint32_t             C5V;                                           // Channel (n) Value
                                                                        // Channel Value
#define FTM_C5V_VAL(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C5V_VAL_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C5V_VAL_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             C6SC;                                          // Channel (n) Status And Control
#define FTM_C6SC_DMA                             ((uint32_t)1 << 0)     // DMA Enable
#define FTM_C6SC_ICRST                           ((uint32_t)1 << 1)     // FTM counter reset by the selected input capture event.
#define FTM_C6SC_ELSA                            ((uint32_t)1 << 2)     // Channel (n) Edge or Level Select
#define FTM_C6SC_ELSB                            ((uint32_t)1 << 3)     // Channel (n) Edge or Level Select
#define FTM_C6SC_MSA                             ((uint32_t)1 << 4)     // Channel (n) Mode Select
#define FTM_C6SC_MSB                             ((uint32_t)1 << 5)     // Channel (n) Mode Select
#define FTM_C6SC_CHIE                            ((uint32_t)1 << 6)     // Channel (n) Interrupt Enable
#define FTM_C6SC_CHF                             ((uint32_t)1 << 7)     // Channel (n) Flag
#define FTM_C6SC_TRIGMODE                        ((uint32_t)1 << 8)     // Trigger mode control
#define FTM_C6SC_CHIS                            ((uint32_t)1 << 9)     // Channel (n) Input State
#define FTM_C6SC_CHOV                            ((uint32_t)1 << 10)    // Channel (n) Output Value

    uint32_t             C6V;                                           // Channel (n) Value
                                                                        // Channel Value
#define FTM_C6V_VAL(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C6V_VAL_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C6V_VAL_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             C7SC;                                          // Channel (n) Status And Control
#define FTM_C7SC_DMA                             ((uint32_t)1 << 0)     // DMA Enable
#define FTM_C7SC_ICRST                           ((uint32_t)1 << 1)     // FTM counter reset by the selected input capture event.
#define FTM_C7SC_ELSA                            ((uint32_t)1 << 2)     // Channel (n) Edge or Level Select
#define FTM_C7SC_ELSB                            ((uint32_t)1 << 3)     // Channel (n) Edge or Level Select
#define FTM_C7SC_MSA                             ((uint32_t)1 << 4)     // Channel (n) Mode Select
#define FTM_C7SC_MSB                             ((uint32_t)1 << 5)     // Channel (n) Mode Select
#define FTM_C7SC_CHIE                            ((uint32_t)1 << 6)     // Channel (n) Interrupt Enable
#define FTM_C7SC_CHF                             ((uint32_t)1 << 7)     // Channel (n) Flag
#define FTM_C7SC_TRIGMODE                        ((uint32_t)1 << 8)     // Trigger mode control
#define FTM_C7SC_CHIS                            ((uint32_t)1 << 9)     // Channel (n) Input State
#define FTM_C7SC_CHOV                            ((uint32_t)1 << 10)    // Channel (n) Output Value

    uint32_t             C7V;                                           // Channel (n) Value
                                                                        // Channel Value
#define FTM_C7V_VAL(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C7V_VAL_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_C7V_VAL_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             CNTIN;                                         // Counter Initial Value
                                                                        // INIT
#define FTM_CNTIN_INIT(_n)                       (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_CNTIN_INIT_INSERT(_v, _n)                (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_CNTIN_INIT_EXTRACT(_v)                   (((_v) >> 0) & 0xffff)

    const uint32_t       STATUS;                                        // Capture And Compare Status
#define FTM_STATUS_CH0F                          ((uint32_t)1 << 0)     // Channel 0 Flag
#define FTM_STATUS_CH1F                          ((uint32_t)1 << 1)     // Channel 1 Flag
#define FTM_STATUS_CH2F                          ((uint32_t)1 << 2)     // Channel 2 Flag
#define FTM_STATUS_CH3F                          ((uint32_t)1 << 3)     // Channel 3 Flag
#define FTM_STATUS_CH4F                          ((uint32_t)1 << 4)     // Channel 4 Flag
#define FTM_STATUS_CH5F                          ((uint32_t)1 << 5)     // Channel 5 Flag
#define FTM_STATUS_CH6F                          ((uint32_t)1 << 6)     // Channel 6 Flag
#define FTM_STATUS_CH7F                          ((uint32_t)1 << 7)     // Channel 7 Flag

    uint32_t             MODE;                                          // Features Mode Selection
#define FTM_MODE_FTMEN                           ((uint32_t)1 << 0)     // FTM Enable
#define FTM_MODE_INIT                            ((uint32_t)1 << 1)     // Initialize The Channels Output
#define FTM_MODE_WPDIS                           ((uint32_t)1 << 2)     // Write Protection Disable
#define FTM_MODE_PWMSYNC                         ((uint32_t)1 << 3)     // PWM Synchronization Mode
#define FTM_MODE_CAPTEST                         ((uint32_t)1 << 4)     // Capture Test Mode Enable
                                                                        // Fault Control Mode
#define FTM_MODE_FAULTM(_n)                      (((uint32_t)(_n) & 0x3) << 5)
#define FTM_MODE_FAULTM_INSERT(_v, _n)               (((_v) & ~0x60) | ((uint32_t)(_n) & 0x3) << 5)
#define FTM_MODE_FAULTM_EXTRACT(_v)                  (((_v) >> 5) & 0x3)
#define FTM_MODE_FAULTIE                         ((uint32_t)1 << 7)     // Fault Interrupt Enable

    uint32_t             SYNC;                                          // Synchronization
#define FTM_SYNC_CNTMIN                          ((uint32_t)1 << 0)     // Minimum Loading Point Enable
#define FTM_SYNC_CNTMAX                          ((uint32_t)1 << 1)     // Maximum Loading Point Enable
#define FTM_SYNC_REINIT                          ((uint32_t)1 << 2)     // FTM Counter Reinitialization by Synchronization
#define FTM_SYNC_SYNCHOM                         ((uint32_t)1 << 3)     // Output Mask Synchronization
#define FTM_SYNC_TRIG0                           ((uint32_t)1 << 4)     // PWM Synchronization Hardware Trigger 0
#define FTM_SYNC_TRIG1                           ((uint32_t)1 << 5)     // PWM Synchronization Hardware Trigger 1
#define FTM_SYNC_TRIG2                           ((uint32_t)1 << 6)     // PWM Synchronization Hardware Trigger 2
#define FTM_SYNC_SWSYNC                          ((uint32_t)1 << 7)     // PWM Synchronization Software Trigger

    uint32_t             OUTINIT;                                       // Initial State For Channels Output
#define FTM_OUTINIT_CH0OI                        ((uint32_t)1 << 0)     // Channel 0 Output Initialization Value
#define FTM_OUTINIT_CH1OI                        ((uint32_t)1 << 1)     // Channel 1 Output Initialization Value
#define FTM_OUTINIT_CH2OI                        ((uint32_t)1 << 2)     // Channel 2 Output Initialization Value
#define FTM_OUTINIT_CH3OI                        ((uint32_t)1 << 3)     // Channel 3 Output Initialization Value
#define FTM_OUTINIT_CH4OI                        ((uint32_t)1 << 4)     // Channel 4 Output Initialization Value
#define FTM_OUTINIT_CH5OI                        ((uint32_t)1 << 5)     // Channel 5 Output Initialization Value
#define FTM_OUTINIT_CH6OI                        ((uint32_t)1 << 6)     // Channel 6 Output Initialization Value
#define FTM_OUTINIT_CH7OI                        ((uint32_t)1 << 7)     // Channel 7 Output Initialization Value

    uint32_t             OUTMASK;                                       // Output Mask
#define FTM_OUTMASK_CH0OM                        ((uint32_t)1 << 0)     // Channel 0 Output Mask
#define FTM_OUTMASK_CH1OM                        ((uint32_t)1 << 1)     // Channel 1 Output Mask
#define FTM_OUTMASK_CH2OM                        ((uint32_t)1 << 2)     // Channel 2 Output Mask
#define FTM_OUTMASK_CH3OM                        ((uint32_t)1 << 3)     // Channel 3 Output Mask
#define FTM_OUTMASK_CH4OM                        ((uint32_t)1 << 4)     // Channel 4 Output Mask
#define FTM_OUTMASK_CH5OM                        ((uint32_t)1 << 5)     // Channel 5 Output Mask
#define FTM_OUTMASK_CH6OM                        ((uint32_t)1 << 6)     // Channel 6 Output Mask
#define FTM_OUTMASK_CH7OM                        ((uint32_t)1 << 7)     // Channel 7 Output Mask

    uint32_t             COMBINE;                                       // Function For Linked Channels
#define FTM_COMBINE_COMBINE0                     ((uint32_t)1 << 0)     // Combine Channels For n = 0
#define FTM_COMBINE_COMP0                        ((uint32_t)1 << 1)     // Complement Of Channel (n) For n = 0
#define FTM_COMBINE_DECAPEN0                     ((uint32_t)1 << 2)     // Dual Edge Capture Mode Enable For n = 0
#define FTM_COMBINE_DECAP0                       ((uint32_t)1 << 3)     // Dual Edge Capture Mode Captures For n = 0
#define FTM_COMBINE_DTEN0                        ((uint32_t)1 << 4)     // Deadtime Enable For n = 0
#define FTM_COMBINE_SYNCEN0                      ((uint32_t)1 << 5)     // Synchronization Enable For n = 0
#define FTM_COMBINE_FAULTEN0                     ((uint32_t)1 << 6)     // Fault Control Enable For n = 0
#define FTM_COMBINE_MCOMBINE0                    ((uint32_t)1 << 7)     // Modified Combine Mode For n = 0
#define FTM_COMBINE_COMBINE1                     ((uint32_t)1 << 8)     // Combine Channels For n = 2
#define FTM_COMBINE_COMP1                        ((uint32_t)1 << 9)     // Complement Of Channel (n) For n = 2
#define FTM_COMBINE_DECAPEN1                     ((uint32_t)1 << 10)    // Dual Edge Capture Mode Enable For n = 2
#define FTM_COMBINE_DECAP1                       ((uint32_t)1 << 11)    // Dual Edge Capture Mode Captures For n = 2
#define FTM_COMBINE_DTEN1                        ((uint32_t)1 << 12)    // Deadtime Enable For n = 2
#define FTM_COMBINE_SYNCEN1                      ((uint32_t)1 << 13)    // Synchronization Enable For n = 2
#define FTM_COMBINE_FAULTEN1                     ((uint32_t)1 << 14)    // Fault Control Enable For n = 2
#define FTM_COMBINE_MCOMBINE1                    ((uint32_t)1 << 15)    // Modified Combine Mode For n = 2
#define FTM_COMBINE_COMBINE2                     ((uint32_t)1 << 16)    // Combine Channels For n = 4
#define FTM_COMBINE_COMP2                        ((uint32_t)1 << 17)    // Complement Of Channel (n) For n = 4
#define FTM_COMBINE_DECAPEN2                     ((uint32_t)1 << 18)    // Dual Edge Capture Mode Enable For n = 4
#define FTM_COMBINE_DECAP2                       ((uint32_t)1 << 19)    // Dual Edge Capture Mode Captures For n = 4
#define FTM_COMBINE_DTEN2                        ((uint32_t)1 << 20)    // Deadtime Enable For n = 4
#define FTM_COMBINE_SYNCEN2                      ((uint32_t)1 << 21)    // Synchronization Enable For n = 4
#define FTM_COMBINE_FAULTEN2                     ((uint32_t)1 << 22)    // Fault Control Enable For n = 4
#define FTM_COMBINE_MCOMBINE2                    ((uint32_t)1 << 23)    // Modified Combine Mode For n = 4
#define FTM_COMBINE_COMBINE3                     ((uint32_t)1 << 24)    // Combine Channels For n = 6
#define FTM_COMBINE_COMP3                        ((uint32_t)1 << 25)    // Complement Of Channel (n) for n = 6
#define FTM_COMBINE_DECAPEN3                     ((uint32_t)1 << 26)    // Dual Edge Capture Mode Enable For n = 6
#define FTM_COMBINE_DECAP3                       ((uint32_t)1 << 27)    // Dual Edge Capture Mode Captures For n = 6
#define FTM_COMBINE_DTEN3                        ((uint32_t)1 << 28)    // Deadtime Enable For n = 6
#define FTM_COMBINE_SYNCEN3                      ((uint32_t)1 << 29)    // Synchronization Enable For n = 6
#define FTM_COMBINE_FAULTEN3                     ((uint32_t)1 << 30)    // Fault Control Enable For n = 6
#define FTM_COMBINE_MCOMBINE3                    ((uint32_t)1 << 31)    // Modified Combine Mode For n = 6

    uint32_t             DEADTIME;                                      // Deadtime Configuration
                                                                        // Deadtime Value
#define FTM_DEADTIME_DTVAL(_n)                   (((uint32_t)(_n) & 0x3f) << 0)
#define FTM_DEADTIME_DTVAL_INSERT(_v, _n)            (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define FTM_DEADTIME_DTVAL_EXTRACT(_v)               (((_v) >> 0) & 0x3f)
                                                                        // Deadtime Prescaler Value
#define FTM_DEADTIME_DTPS(_n)                    (((uint32_t)(_n) & 0x3) << 6)
#define FTM_DEADTIME_DTPS_INSERT(_v, _n)             (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define FTM_DEADTIME_DTPS_EXTRACT(_v)                (((_v) >> 6) & 0x3)
                                                                        // Extended Deadtime Value
#define FTM_DEADTIME_DTVALEX(_n)                 (((uint32_t)(_n) & 0xf) << 16)
#define FTM_DEADTIME_DTVALEX_INSERT(_v, _n)          (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define FTM_DEADTIME_DTVALEX_EXTRACT(_v)             (((_v) >> 16) & 0xf)

    uint32_t             EXTTRIG;                                       // FTM External Trigger
#define FTM_EXTTRIG_CH2TRIG                      ((uint32_t)1 << 0)     // Channel 2 External Trigger Enable
#define FTM_EXTTRIG_CH3TRIG                      ((uint32_t)1 << 1)     // Channel 3 External Trigger Enable
#define FTM_EXTTRIG_CH4TRIG                      ((uint32_t)1 << 2)     // Channel 4 External Trigger Enable
#define FTM_EXTTRIG_CH5TRIG                      ((uint32_t)1 << 3)     // Channel 5 External Trigger Enable
#define FTM_EXTTRIG_CH0TRIG                      ((uint32_t)1 << 4)     // Channel 0 External Trigger Enable
#define FTM_EXTTRIG_CH1TRIG                      ((uint32_t)1 << 5)     // Channel 1 External Trigger Enable
#define FTM_EXTTRIG_INITTRIGEN                   ((uint32_t)1 << 6)     // Initialization Trigger Enable
#define FTM_EXTTRIG_TRIGF                        ((uint32_t)1 << 7)     // Channel Trigger Flag
#define FTM_EXTTRIG_CH6TRIG                      ((uint32_t)1 << 8)     // Channel 6 External Trigger Enable
#define FTM_EXTTRIG_CH7TRIG                      ((uint32_t)1 << 9)     // Channel 7 External Trigger Enable

    uint32_t             POL;                                           // Channels Polarity
#define FTM_POL_POL0                             ((uint32_t)1 << 0)     // Channel 0 Polarity
#define FTM_POL_POL1                             ((uint32_t)1 << 1)     // Channel 1 Polarity
#define FTM_POL_POL2                             ((uint32_t)1 << 2)     // Channel 2 Polarity
#define FTM_POL_POL3                             ((uint32_t)1 << 3)     // Channel 3 Polarity
#define FTM_POL_POL4                             ((uint32_t)1 << 4)     // Channel 4 Polarity
#define FTM_POL_POL5                             ((uint32_t)1 << 5)     // Channel 5 Polarity
#define FTM_POL_POL6                             ((uint32_t)1 << 6)     // Channel 6 Polarity
#define FTM_POL_POL7                             ((uint32_t)1 << 7)     // Channel 7 Polarity

    uint32_t             FMS;                                           // Fault Mode Status
#define FTM_FMS_FAULTF0                          ((uint32_t)1 << 0)     // Fault Detection Flag 0
#define FTM_FMS_FAULTF1                          ((uint32_t)1 << 1)     // Fault Detection Flag 1
#define FTM_FMS_FAULTF2                          ((uint32_t)1 << 2)     // Fault Detection Flag 2
#define FTM_FMS_FAULTF3                          ((uint32_t)1 << 3)     // Fault Detection Flag 3
#define FTM_FMS_FAULTIN                          ((uint32_t)1 << 5)     // Fault Inputs
#define FTM_FMS_WPEN                             ((uint32_t)1 << 6)     // Write Protection Enable
#define FTM_FMS_FAULTF                           ((uint32_t)1 << 7)     // Fault Detection Flag

    uint32_t             FILTER;                                        // Input Capture Filter Control
                                                                        // Channel 0 Input Filter
#define FTM_FILTER_CH0FVAL(_n)                   (((uint32_t)(_n) & 0xf) << 0)
#define FTM_FILTER_CH0FVAL_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define FTM_FILTER_CH0FVAL_EXTRACT(_v)               (((_v) >> 0) & 0xf)
                                                                        // Channel 1 Input Filter
#define FTM_FILTER_CH1FVAL(_n)                   (((uint32_t)(_n) & 0xf) << 4)
#define FTM_FILTER_CH1FVAL_INSERT(_v, _n)            (((_v) & ~0xf0) | ((uint32_t)(_n) & 0xf) << 4)
#define FTM_FILTER_CH1FVAL_EXTRACT(_v)               (((_v) >> 4) & 0xf)
                                                                        // Channel 2 Input Filter
#define FTM_FILTER_CH2FVAL(_n)                   (((uint32_t)(_n) & 0xf) << 8)
#define FTM_FILTER_CH2FVAL_INSERT(_v, _n)            (((_v) & ~0xf00) | ((uint32_t)(_n) & 0xf) << 8)
#define FTM_FILTER_CH2FVAL_EXTRACT(_v)               (((_v) >> 8) & 0xf)
                                                                        // Channel 3 Input Filter
#define FTM_FILTER_CH3FVAL(_n)                   (((uint32_t)(_n) & 0xf) << 12)
#define FTM_FILTER_CH3FVAL_INSERT(_v, _n)            (((_v) & ~0xf000) | ((uint32_t)(_n) & 0xf) << 12)
#define FTM_FILTER_CH3FVAL_EXTRACT(_v)               (((_v) >> 12) & 0xf)

    uint32_t             FLTCTRL;                                       // Fault Control
#define FTM_FLTCTRL_FAULT0EN                     ((uint32_t)1 << 0)     // Fault Input 0 Enable
#define FTM_FLTCTRL_FAULT1EN                     ((uint32_t)1 << 1)     // Fault Input 1 Enable
#define FTM_FLTCTRL_FAULT2EN                     ((uint32_t)1 << 2)     // Fault Input 2 Enable
#define FTM_FLTCTRL_FAULT3EN                     ((uint32_t)1 << 3)     // Fault Input 3 Enable
#define FTM_FLTCTRL_FFLTR0EN                     ((uint32_t)1 << 4)     // Fault Input 0 Filter Enable
#define FTM_FLTCTRL_FFLTR1EN                     ((uint32_t)1 << 5)     // Fault Input 1 Filter Enable
#define FTM_FLTCTRL_FFLTR2EN                     ((uint32_t)1 << 6)     // Fault Input 2 Filter Enable
#define FTM_FLTCTRL_FFLTR3EN                     ((uint32_t)1 << 7)     // Fault Input 3 Filter Enable
                                                                        // Fault Input Filter
#define FTM_FLTCTRL_FFVAL(_n)                    (((uint32_t)(_n) & 0xf) << 8)
#define FTM_FLTCTRL_FFVAL_INSERT(_v, _n)             (((_v) & ~0xf00) | ((uint32_t)(_n) & 0xf) << 8)
#define FTM_FLTCTRL_FFVAL_EXTRACT(_v)                (((_v) >> 8) & 0xf)
#define FTM_FLTCTRL_FSTATE                       ((uint32_t)1 << 15)    // Fault output state

    uint32_t             QDCTRL;                                        // Quadrature Decoder Control And Status
#define FTM_QDCTRL_QUADEN                        ((uint32_t)1 << 0)     // Quadrature Decoder Mode Enable
#define FTM_QDCTRL_TOFDIR                        ((uint32_t)1 << 1)     // Timer Overflow Direction In Quadrature Decoder Mode
#define FTM_QDCTRL_QUADIR                        ((uint32_t)1 << 2)     // FTM Counter Direction In Quadrature Decoder Mode
#define FTM_QDCTRL_QUADMODE                      ((uint32_t)1 << 3)     // Quadrature Decoder Mode
#define FTM_QDCTRL_PHBPOL                        ((uint32_t)1 << 4)     // Phase B Input Polarity
#define FTM_QDCTRL_PHAPOL                        ((uint32_t)1 << 5)     // Phase A Input Polarity
#define FTM_QDCTRL_PHBFLTREN                     ((uint32_t)1 << 6)     // Phase B Input Filter Enable
#define FTM_QDCTRL_PHAFLTREN                     ((uint32_t)1 << 7)     // Phase A Input Filter Enable

    uint32_t             CONF;                                          // Configuration
                                                                        // Frequency of the Reload Opportunities
#define FTM_CONF_LDFQ(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define FTM_CONF_LDFQ_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define FTM_CONF_LDFQ_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
                                                                        // Debug Mode
#define FTM_CONF_BDMMODE(_n)                     (((uint32_t)(_n) & 0x3) << 6)
#define FTM_CONF_BDMMODE_INSERT(_v, _n)              (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define FTM_CONF_BDMMODE_EXTRACT(_v)                 (((_v) >> 6) & 0x3)
#define FTM_CONF_GTBEEN                          ((uint32_t)1 << 9)     // Global Time Base Enable
#define FTM_CONF_GTBEOUT                         ((uint32_t)1 << 10)    // Global Time Base Output
#define FTM_CONF_ITRIGR                          ((uint32_t)1 << 11)    // Initialization trigger on Reload Point

    uint32_t             FLTPOL;                                        // FTM Fault Input Polarity
#define FTM_FLTPOL_FLT0POL                       ((uint32_t)1 << 0)     // Fault Input 0 Polarity
#define FTM_FLTPOL_FLT1POL                       ((uint32_t)1 << 1)     // Fault Input 1 Polarity
#define FTM_FLTPOL_FLT2POL                       ((uint32_t)1 << 2)     // Fault Input 2 Polarity
#define FTM_FLTPOL_FLT3POL                       ((uint32_t)1 << 3)     // Fault Input 3 Polarity

    uint32_t             SYNCONF;                                       // Synchronization Configuration
#define FTM_SYNCONF_HWTRIGMODE                   ((uint32_t)1 << 0)     // Hardware Trigger Mode
#define FTM_SYNCONF_CNTINC                       ((uint32_t)1 << 2)     // CNTIN Register Synchronization
#define FTM_SYNCONF_INVC                         ((uint32_t)1 << 4)     // INVCTRL Register Synchronization
#define FTM_SYNCONF_SWOC                         ((uint32_t)1 << 5)     // SWOCTRL Register Synchronization
#define FTM_SYNCONF_SYNCMODE                     ((uint32_t)1 << 7)     // Synchronization Mode
#define FTM_SYNCONF_SWRSTCNT                     ((uint32_t)1 << 8)     // FTM counter synchronization is activated by the software trigger
#define FTM_SYNCONF_SWWRBUF                      ((uint32_t)1 << 9)     // MOD, HCR, CNTIN, and CV registers synchronization is activated by the software trigger
#define FTM_SYNCONF_SWOM                         ((uint32_t)1 << 10)    // Output mask synchronization is activated by the software trigger
#define FTM_SYNCONF_SWINVC                       ((uint32_t)1 << 11)    // Inverting control synchronization is activated by the software trigger
#define FTM_SYNCONF_SWSOC                        ((uint32_t)1 << 12)    // Software output control synchronization is activated by the software trigger
#define FTM_SYNCONF_HWRSTCNT                     ((uint32_t)1 << 16)    // FTM counter synchronization is activated by a hardware trigger
#define FTM_SYNCONF_HWWRBUF                      ((uint32_t)1 << 17)    // MOD, HCR, CNTIN, and CV registers synchronization is activated by a hardware trigger
#define FTM_SYNCONF_HWOM                         ((uint32_t)1 << 18)    // Output mask synchronization is activated by a hardware trigger
#define FTM_SYNCONF_HWINVC                       ((uint32_t)1 << 19)    // Inverting control synchronization is activated by a hardware trigger
#define FTM_SYNCONF_HWSOC                        ((uint32_t)1 << 20)    // Software output control synchronization is activated by a hardware trigger

    uint32_t             INVCTRL;                                       // FTM Inverting Control
#define FTM_INVCTRL_INV0EN                       ((uint32_t)1 << 0)     // Pair Channels 0 Inverting Enable
#define FTM_INVCTRL_INV1EN                       ((uint32_t)1 << 1)     // Pair Channels 1 Inverting Enable
#define FTM_INVCTRL_INV2EN                       ((uint32_t)1 << 2)     // Pair Channels 2 Inverting Enable
#define FTM_INVCTRL_INV3EN                       ((uint32_t)1 << 3)     // Pair Channels 3 Inverting Enable

    uint32_t             SWOCTRL;                                       // FTM Software Output Control
#define FTM_SWOCTRL_CH0OC                        ((uint32_t)1 << 0)     // Channel 0 Software Output Control Enable
#define FTM_SWOCTRL_CH1OC                        ((uint32_t)1 << 1)     // Channel 1 Software Output Control Enable
#define FTM_SWOCTRL_CH2OC                        ((uint32_t)1 << 2)     // Channel 2 Software Output Control Enable
#define FTM_SWOCTRL_CH3OC                        ((uint32_t)1 << 3)     // Channel 3 Software Output Control Enable
#define FTM_SWOCTRL_CH4OC                        ((uint32_t)1 << 4)     // Channel 4 Software Output Control Enable
#define FTM_SWOCTRL_CH5OC                        ((uint32_t)1 << 5)     // Channel 5 Software Output Control Enable
#define FTM_SWOCTRL_CH6OC                        ((uint32_t)1 << 6)     // Channel 6 Software Output Control Enable
#define FTM_SWOCTRL_CH7OC                        ((uint32_t)1 << 7)     // Channel 7 Software Output Control Enable
#define FTM_SWOCTRL_CH0OCV                       ((uint32_t)1 << 8)     // Channel 0 Software Output Control Value
#define FTM_SWOCTRL_CH1OCV                       ((uint32_t)1 << 9)     // Channel 1 Software Output Control Value
#define FTM_SWOCTRL_CH2OCV                       ((uint32_t)1 << 10)    // Channel 2 Software Output Control Value
#define FTM_SWOCTRL_CH3OCV                       ((uint32_t)1 << 11)    // Channel 3 Software Output Control Value
#define FTM_SWOCTRL_CH4OCV                       ((uint32_t)1 << 12)    // Channel 4 Software Output Control Value
#define FTM_SWOCTRL_CH5OCV                       ((uint32_t)1 << 13)    // Channel 5 Software Output Control Value
#define FTM_SWOCTRL_CH6OCV                       ((uint32_t)1 << 14)    // Channel 6 Software Output Control Value
#define FTM_SWOCTRL_CH7OCV                       ((uint32_t)1 << 15)    // Channel 7 Software Output Control Value

    uint32_t             PWMLOAD;                                       // FTM PWM Load
#define FTM_PWMLOAD_CH0SEL                       ((uint32_t)1 << 0)     // Channel 0 Select
#define FTM_PWMLOAD_CH1SEL                       ((uint32_t)1 << 1)     // Channel 1 Select
#define FTM_PWMLOAD_CH2SEL                       ((uint32_t)1 << 2)     // Channel 2 Select
#define FTM_PWMLOAD_CH3SEL                       ((uint32_t)1 << 3)     // Channel 3 Select
#define FTM_PWMLOAD_CH4SEL                       ((uint32_t)1 << 4)     // Channel 4 Select
#define FTM_PWMLOAD_CH5SEL                       ((uint32_t)1 << 5)     // Channel 5 Select
#define FTM_PWMLOAD_CH6SEL                       ((uint32_t)1 << 6)     // Channel 6 Select
#define FTM_PWMLOAD_CH7SEL                       ((uint32_t)1 << 7)     // Channel 7 Select
#define FTM_PWMLOAD_HCSEL                        ((uint32_t)1 << 8)     // Half Cycle Select
#define FTM_PWMLOAD_LDOK                         ((uint32_t)1 << 9)     // Load Enable
#define FTM_PWMLOAD_GLEN                         ((uint32_t)1 << 10)    // Global Load Enable
#define FTM_PWMLOAD_GLDOK                        ((uint32_t)1 << 11)    // Global Load OK

    uint32_t             HCR;                                           // Half Cycle Register
                                                                        // Half Cycle Value
#define FTM_HCR_HCVAL(_n)                        (((uint32_t)(_n) & 0xffff) << 0)
#define FTM_HCR_HCVAL_INSERT(_v, _n)                 (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FTM_HCR_HCVAL_EXTRACT(_v)                    (((_v) >> 0) & 0xffff)

    uint32_t             PAIR0DEADTIME;                                 // Pair 0 Deadtime Configuration
                                                                        // Deadtime Value
#define FTM_PAIR0DEADTIME_DTVAL(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define FTM_PAIR0DEADTIME_DTVAL_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define FTM_PAIR0DEADTIME_DTVAL_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Deadtime Prescaler Value
#define FTM_PAIR0DEADTIME_DTPS(_n)               (((uint32_t)(_n) & 0x3) << 6)
#define FTM_PAIR0DEADTIME_DTPS_INSERT(_v, _n)        (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define FTM_PAIR0DEADTIME_DTPS_EXTRACT(_v)           (((_v) >> 6) & 0x3)
                                                                        // Extended Deadtime Value
#define FTM_PAIR0DEADTIME_DTVALEX(_n)            (((uint32_t)(_n) & 0xf) << 16)
#define FTM_PAIR0DEADTIME_DTVALEX_INSERT(_v, _n)     (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define FTM_PAIR0DEADTIME_DTVALEX_EXTRACT(_v)        (((_v) >> 16) & 0xf)

    uint8_t _res0[4];
    uint32_t             PAIR1DEADTIME;                                 // Pair 1 Deadtime Configuration
                                                                        // Deadtime Value
#define FTM_PAIR1DEADTIME_DTVAL(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define FTM_PAIR1DEADTIME_DTVAL_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define FTM_PAIR1DEADTIME_DTVAL_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Deadtime Prescaler Value
#define FTM_PAIR1DEADTIME_DTPS(_n)               (((uint32_t)(_n) & 0x3) << 6)
#define FTM_PAIR1DEADTIME_DTPS_INSERT(_v, _n)        (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define FTM_PAIR1DEADTIME_DTPS_EXTRACT(_v)           (((_v) >> 6) & 0x3)
                                                                        // Extended Deadtime Value
#define FTM_PAIR1DEADTIME_DTVALEX(_n)            (((uint32_t)(_n) & 0xf) << 16)
#define FTM_PAIR1DEADTIME_DTVALEX_INSERT(_v, _n)     (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define FTM_PAIR1DEADTIME_DTVALEX_EXTRACT(_v)        (((_v) >> 16) & 0xf)

    uint8_t _res1[4];
    uint32_t             PAIR2DEADTIME;                                 // Pair 2 Deadtime Configuration
                                                                        // Deadtime Value
#define FTM_PAIR2DEADTIME_DTVAL(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define FTM_PAIR2DEADTIME_DTVAL_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define FTM_PAIR2DEADTIME_DTVAL_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Deadtime Prescaler Value
#define FTM_PAIR2DEADTIME_DTPS(_n)               (((uint32_t)(_n) & 0x3) << 6)
#define FTM_PAIR2DEADTIME_DTPS_INSERT(_v, _n)        (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define FTM_PAIR2DEADTIME_DTPS_EXTRACT(_v)           (((_v) >> 6) & 0x3)
                                                                        // Extended Deadtime Value
#define FTM_PAIR2DEADTIME_DTVALEX(_n)            (((uint32_t)(_n) & 0xf) << 16)
#define FTM_PAIR2DEADTIME_DTVALEX_INSERT(_v, _n)     (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define FTM_PAIR2DEADTIME_DTVALEX_EXTRACT(_v)        (((_v) >> 16) & 0xf)

    uint8_t _res2[4];
    uint32_t             PAIR3DEADTIME;                                 // Pair 3 Deadtime Configuration
                                                                        // Deadtime Value
#define FTM_PAIR3DEADTIME_DTVAL(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define FTM_PAIR3DEADTIME_DTVAL_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define FTM_PAIR3DEADTIME_DTVAL_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Deadtime Prescaler Value
#define FTM_PAIR3DEADTIME_DTPS(_n)               (((uint32_t)(_n) & 0x3) << 6)
#define FTM_PAIR3DEADTIME_DTPS_INSERT(_v, _n)        (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define FTM_PAIR3DEADTIME_DTPS_EXTRACT(_v)           (((_v) >> 6) & 0x3)
                                                                        // Extended Deadtime Value
#define FTM_PAIR3DEADTIME_DTVALEX(_n)            (((uint32_t)(_n) & 0xf) << 16)
#define FTM_PAIR3DEADTIME_DTVALEX_INSERT(_v, _n)     (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define FTM_PAIR3DEADTIME_DTVALEX_EXTRACT(_v)        (((_v) >> 16) & 0xf)

} FTM_regs_t;
                                                                        // --------------------
                                                                        // Analog-to-Digital Converter
typedef struct                                                          // --------------------
{
    uint8_t _res0[64];
    uint32_t             CFG1;                                          // ADC Configuration Register 1
                                                                        // Input Clock Select
#define ADC_CFG1_ADICLK(_n)                      (((uint32_t)(_n) & 0x3) << 0)
#define ADC_CFG1_ADICLK_INSERT(_v, _n)               (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define ADC_CFG1_ADICLK_EXTRACT(_v)                  (((_v) >> 0) & 0x3)
                                                                        // Conversion mode selection
#define ADC_CFG1_MODE(_n)                        (((uint32_t)(_n) & 0x3) << 2)
#define ADC_CFG1_MODE_INSERT(_v, _n)                 (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define ADC_CFG1_MODE_EXTRACT(_v)                    (((_v) >> 2) & 0x3)
                                                                        // Clock Divide Select
#define ADC_CFG1_ADIV(_n)                        (((uint32_t)(_n) & 0x3) << 5)
#define ADC_CFG1_ADIV_INSERT(_v, _n)                 (((_v) & ~0x60) | ((uint32_t)(_n) & 0x3) << 5)
#define ADC_CFG1_ADIV_EXTRACT(_v)                    (((_v) >> 5) & 0x3)
#define ADC_CFG1_CLRLTRG                         ((uint32_t)1 << 8)     // Clear Latch Trigger in Trigger Handler Block

    uint32_t             CFG2;                                          // ADC Configuration Register 2
                                                                        // Sample Time Select
#define ADC_CFG2_SMPLTS(_n)                      (((uint32_t)(_n) & 0xff) << 0)
#define ADC_CFG2_SMPLTS_INSERT(_v, _n)               (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define ADC_CFG2_SMPLTS_EXTRACT(_v)                  (((_v) >> 0) & 0xff)

    uint8_t _res1[72];
    uint32_t             SC2;                                           // Status and Control Register 2
                                                                        // Voltage Reference Selection
#define ADC_SC2_REFSEL(_n)                       (((uint32_t)(_n) & 0x3) << 0)
#define ADC_SC2_REFSEL_INSERT(_v, _n)                (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define ADC_SC2_REFSEL_EXTRACT(_v)                   (((_v) >> 0) & 0x3)
#define ADC_SC2_DMAEN                            ((uint32_t)1 << 2)     // DMA Enable
#define ADC_SC2_ACREN                            ((uint32_t)1 << 3)     // Compare Function Range Enable
#define ADC_SC2_ACFGT                            ((uint32_t)1 << 4)     // Compare Function Greater Than Enable
#define ADC_SC2_ACFE                             ((uint32_t)1 << 5)     // Compare Function Enable
#define ADC_SC2_ADTRG                            ((uint32_t)1 << 6)     // Conversion Trigger Select
#define ADC_SC2_ADACT                            ((uint32_t)1 << 7)     // Conversion Active
                                                                        // Trigger Process Number
#define ADC_SC2_TRGPRNUM(_n)                     (((uint32_t)(_n) & 0x3) << 13)
#define ADC_SC2_TRGPRNUM_INSERT(_v, _n)              (((_v) & ~0x6000) | ((uint32_t)(_n) & 0x3) << 13)
#define ADC_SC2_TRGPRNUM_EXTRACT(_v)                 (((_v) >> 13) & 0x3)
                                                                        // Trigger Status
#define ADC_SC2_TRGSTLAT(_n)                     (((uint32_t)(_n) & 0xf) << 16)
#define ADC_SC2_TRGSTLAT_INSERT(_v, _n)              (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define ADC_SC2_TRGSTLAT_EXTRACT(_v)                 (((_v) >> 16) & 0xf)
                                                                        // Error in Multiplexed Trigger Request
#define ADC_SC2_TRGSTERR(_n)                     (((uint32_t)(_n) & 0xf) << 24)
#define ADC_SC2_TRGSTERR_INSERT(_v, _n)              (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define ADC_SC2_TRGSTERR_EXTRACT(_v)                 (((_v) >> 24) & 0xf)

    uint32_t             SC3;                                           // Status and Control Register 3
                                                                        // Hardware Average Select
#define ADC_SC3_AVGS(_n)                         (((uint32_t)(_n) & 0x3) << 0)
#define ADC_SC3_AVGS_INSERT(_v, _n)                  (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define ADC_SC3_AVGS_EXTRACT(_v)                     (((_v) >> 0) & 0x3)
#define ADC_SC3_AVGE                             ((uint32_t)1 << 2)     // Hardware Average Enable
#define ADC_SC3_ADCO                             ((uint32_t)1 << 3)     // Continuous Conversion Enable
#define ADC_SC3_CAL                              ((uint32_t)1 << 7)     // Calibration

    uint32_t             BASE_OFS;                                      // BASE Offset Register
                                                                        // Base Offset Error Correction Value
#define ADC_BASE_OFS_BA_OFS(_n)                  (((uint32_t)(_n) & 0xff) << 0)
#define ADC_BASE_OFS_BA_OFS_INSERT(_v, _n)           (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define ADC_BASE_OFS_BA_OFS_EXTRACT(_v)              (((_v) >> 0) & 0xff)

    uint32_t             OFS;                                           // ADC Offset Correction Register
                                                                        // Offset Error Correction Value
#define ADC_OFS_OFS(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define ADC_OFS_OFS_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define ADC_OFS_OFS_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             USR_OFS;                                       // USER Offset Correction Register
                                                                        // USER Offset Error Correction Value
#define ADC_USR_OFS_USR_OFS(_n)                  (((uint32_t)(_n) & 0xff) << 0)
#define ADC_USR_OFS_USR_OFS_INSERT(_v, _n)           (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define ADC_USR_OFS_USR_OFS_EXTRACT(_v)              (((_v) >> 0) & 0xff)

    uint32_t             XOFS;                                          // ADC X Offset Correction Register
                                                                        // X offset error correction value
#define ADC_XOFS_XOFS(_n)                        (((uint32_t)(_n) & 0x3f) << 0)
#define ADC_XOFS_XOFS_INSERT(_v, _n)                 (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define ADC_XOFS_XOFS_EXTRACT(_v)                    (((_v) >> 0) & 0x3f)

    uint32_t             YOFS;                                          // ADC Y Offset Correction Register
                                                                        // Y offset error correction value
#define ADC_YOFS_YOFS(_n)                        (((uint32_t)(_n) & 0xff) << 0)
#define ADC_YOFS_YOFS_INSERT(_v, _n)                 (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define ADC_YOFS_YOFS_EXTRACT(_v)                    (((_v) >> 0) & 0xff)

    uint32_t             G;                                             // ADC Gain Register
                                                                        // Gain error adjustment factor for the overall conversion
#define ADC_G_G(_n)                              (((uint32_t)(_n) & 0x7ff) << 0)
#define ADC_G_G_INSERT(_v, _n)                       (((_v) & ~0x7ff) | ((uint32_t)(_n) & 0x7ff) << 0)
#define ADC_G_G_EXTRACT(_v)                          (((_v) >> 0) & 0x7ff)

    uint32_t             UG;                                            // ADC User Gain Register
                                                                        // User gain error correction value
#define ADC_UG_UG(_n)                            (((uint32_t)(_n) & 0x3ff) << 0)
#define ADC_UG_UG_INSERT(_v, _n)                     (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define ADC_UG_UG_EXTRACT(_v)                        (((_v) >> 0) & 0x3ff)

    uint32_t             CLPS;                                          // ADC General Calibration Value Register S
                                                                        // Calibration Value
#define ADC_CLPS_CLPS(_n)                        (((uint32_t)(_n) & 0x7f) << 0)
#define ADC_CLPS_CLPS_INSERT(_v, _n)                 (((_v) & ~0x7f) | ((uint32_t)(_n) & 0x7f) << 0)
#define ADC_CLPS_CLPS_EXTRACT(_v)                    (((_v) >> 0) & 0x7f)

    uint32_t             CLP3;                                          // ADC Plus-Side General Calibration Value Register 3
                                                                        // Calibration Value
#define ADC_CLP3_CLP3(_n)                        (((uint32_t)(_n) & 0x3ff) << 0)
#define ADC_CLP3_CLP3_INSERT(_v, _n)                 (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define ADC_CLP3_CLP3_EXTRACT(_v)                    (((_v) >> 0) & 0x3ff)

    uint32_t             CLP2;                                          // ADC Plus-Side General Calibration Value Register 2
                                                                        // Calibration Value
#define ADC_CLP2_CLP2(_n)                        (((uint32_t)(_n) & 0x3ff) << 0)
#define ADC_CLP2_CLP2_INSERT(_v, _n)                 (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define ADC_CLP2_CLP2_EXTRACT(_v)                    (((_v) >> 0) & 0x3ff)

    uint32_t             CLP1;                                          // ADC Plus-Side General Calibration Value Register 1
                                                                        // Calibration Value
#define ADC_CLP1_CLP1(_n)                        (((uint32_t)(_n) & 0x1ff) << 0)
#define ADC_CLP1_CLP1_INSERT(_v, _n)                 (((_v) & ~0x1ff) | ((uint32_t)(_n) & 0x1ff) << 0)
#define ADC_CLP1_CLP1_EXTRACT(_v)                    (((_v) >> 0) & 0x1ff)

    uint32_t             CLP0;                                          // ADC Plus-Side General Calibration Value Register 0
                                                                        // Calibration Value
#define ADC_CLP0_CLP0(_n)                        (((uint32_t)(_n) & 0xff) << 0)
#define ADC_CLP0_CLP0_INSERT(_v, _n)                 (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define ADC_CLP0_CLP0_EXTRACT(_v)                    (((_v) >> 0) & 0xff)

    uint32_t             CLPX;                                          // ADC Plus-Side General Calibration Value Register X
                                                                        // Calibration Value
#define ADC_CLPX_CLPX(_n)                        (((uint32_t)(_n) & 0x7f) << 0)
#define ADC_CLPX_CLPX_INSERT(_v, _n)                 (((_v) & ~0x7f) | ((uint32_t)(_n) & 0x7f) << 0)
#define ADC_CLPX_CLPX_EXTRACT(_v)                    (((_v) >> 0) & 0x7f)

    uint32_t             CLP9;                                          // ADC Plus-Side General Calibration Value Register 9
                                                                        // Calibration Value
#define ADC_CLP9_CLP9(_n)                        (((uint32_t)(_n) & 0x7f) << 0)
#define ADC_CLP9_CLP9_INSERT(_v, _n)                 (((_v) & ~0x7f) | ((uint32_t)(_n) & 0x7f) << 0)
#define ADC_CLP9_CLP9_EXTRACT(_v)                    (((_v) >> 0) & 0x7f)

    uint32_t             CLPS_OFS;                                      // ADC General Calibration Offset Value Register S
                                                                        // CLPS Offset
#define ADC_CLPS_OFS_CLPS_OFS(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLPS_OFS_CLPS_OFS_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLPS_OFS_CLPS_OFS_EXTRACT(_v)            (((_v) >> 0) & 0xf)

    uint32_t             CLP3_OFS;                                      // ADC Plus-Side General Calibration Offset Value Register 3
                                                                        // CLP3 Offset
#define ADC_CLP3_OFS_CLP3_OFS(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLP3_OFS_CLP3_OFS_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLP3_OFS_CLP3_OFS_EXTRACT(_v)            (((_v) >> 0) & 0xf)

    uint32_t             CLP2_OFS;                                      // ADC Plus-Side General Calibration Offset Value Register 2
                                                                        // CLP2 Offset
#define ADC_CLP2_OFS_CLP2_OFS(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLP2_OFS_CLP2_OFS_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLP2_OFS_CLP2_OFS_EXTRACT(_v)            (((_v) >> 0) & 0xf)

    uint32_t             CLP1_OFS;                                      // ADC Plus-Side General Calibration Offset Value Register 1
                                                                        // CLP1 Offset
#define ADC_CLP1_OFS_CLP1_OFS(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLP1_OFS_CLP1_OFS_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLP1_OFS_CLP1_OFS_EXTRACT(_v)            (((_v) >> 0) & 0xf)

    uint32_t             CLP0_OFS;                                      // ADC Plus-Side General Calibration Offset Value Register 0
                                                                        // CLP0 Offset
#define ADC_CLP0_OFS_CLP0_OFS(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLP0_OFS_CLP0_OFS_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define ADC_CLP0_OFS_CLP0_OFS_EXTRACT(_v)            (((_v) >> 0) & 0xf)

    uint32_t             CLPX_OFS;                                      // ADC Plus-Side General Calibration Offset Value Register X
                                                                        // CLPX Offset
#define ADC_CLPX_OFS_CLPX_OFS(_n)                (((uint32_t)(_n) & 0xfff) << 0)
#define ADC_CLPX_OFS_CLPX_OFS_INSERT(_v, _n)         (((_v) & ~0xfff) | ((uint32_t)(_n) & 0xfff) << 0)
#define ADC_CLPX_OFS_CLPX_OFS_EXTRACT(_v)            (((_v) >> 0) & 0xfff)

    uint32_t             CLP9_OFS;                                      // ADC Plus-Side General Calibration Offset Value Register 9
                                                                        // CLP9 Offset
#define ADC_CLP9_OFS_CLP9_OFS(_n)                (((uint32_t)(_n) & 0xfff) << 0)
#define ADC_CLP9_OFS_CLP9_OFS_INSERT(_v, _n)         (((_v) & ~0xfff) | ((uint32_t)(_n) & 0xfff) << 0)
#define ADC_CLP9_OFS_CLP9_OFS_EXTRACT(_v)            (((_v) >> 0) & 0xfff)

    uint32_t             SC1A;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1A_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1A_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1A_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1A_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1A_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1B;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1B_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1B_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1B_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1B_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1B_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1C;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1C_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1C_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1C_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1C_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1C_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1D;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1D_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1D_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1D_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1D_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1D_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1E;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1E_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1E_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1E_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1E_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1E_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1F;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1F_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1F_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1F_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1F_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1F_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1G;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1G_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1G_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1G_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1G_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1G_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1H;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1H_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1H_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1H_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1H_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1H_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1I;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1I_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1I_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1I_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1I_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1I_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1J;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1J_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1J_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1J_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1J_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1J_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1K;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1K_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1K_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1K_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1K_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1K_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1L;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1L_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1L_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1L_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1L_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1L_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1M;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1M_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1M_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1M_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1M_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1M_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1N;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1N_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1N_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1N_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1N_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1N_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1O;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1O_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1O_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1O_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1O_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1O_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    uint32_t             SC1P;                                          // ADC Status and Control Register 1
                                                                        // Input channel select
#define ADC_SC1P_ADCH(_n)                        (((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1P_ADCH_INSERT(_v, _n)                 (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define ADC_SC1P_ADCH_EXTRACT(_v)                    (((_v) >> 0) & 0x1f)
#define ADC_SC1P_AIEN                            ((uint32_t)1 << 6)     // Interrupt Enable
#define ADC_SC1P_COCO                            ((uint32_t)1 << 7)     // Conversion Complete Flag

    const uint32_t       RA;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RA_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RB;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RB_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RC;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RC_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RD;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RD_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RE;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RE_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RF;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RF_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RG;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RG_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RH;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RH_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RI;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RI_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RJ;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RJ_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RK;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RK_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RL;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RL_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RM;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RM_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RN;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RN_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RO;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RO_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    const uint32_t       RP;                                            // ADC Data Result Registers
                                                                        // Data result
#define ADC_RP_D_EXTRACT(_v)                         (((_v) >> 0) & 0xfff)

    uint32_t             CV1;                                           // Compare Value Registers
                                                                        // Compare Value.
#define ADC_CV1_CV(_n)                           (((uint32_t)(_n) & 0xffff) << 0)
#define ADC_CV1_CV_INSERT(_v, _n)                    (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define ADC_CV1_CV_EXTRACT(_v)                       (((_v) >> 0) & 0xffff)

    uint32_t             CV2;                                           // Compare Value Registers
                                                                        // Compare Value.
#define ADC_CV2_CV(_n)                           (((uint32_t)(_n) & 0xffff) << 0)
#define ADC_CV2_CV_INSERT(_v, _n)                    (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define ADC_CV2_CV_EXTRACT(_v)                       (((_v) >> 0) & 0xffff)

} ADC_regs_t;
                                                                        // --------------------
                                                                        // The LPSPI Memory Map/Register Definition can be found here.
typedef struct                                                          // --------------------
{
    const uint32_t       VERID;                                         // Version ID Register
                                                                        // Module Identification Number
#define LPSPI_VERID_FEATURE_EXTRACT(_v)              (((_v) >> 0) & 0xffff)
                                                                        // Minor Version Number
#define LPSPI_VERID_MINOR_EXTRACT(_v)                (((_v) >> 16) & 0xff)
                                                                        // Major Version Number
#define LPSPI_VERID_MAJOR_EXTRACT(_v)                (((_v) >> 24) & 0xff)

    const uint32_t       PARAM;                                         // Parameter Register
                                                                        // Transmit FIFO Size
#define LPSPI_PARAM_TXFIFO_EXTRACT(_v)               (((_v) >> 0) & 0xff)
                                                                        // Receive FIFO Size
#define LPSPI_PARAM_RXFIFO_EXTRACT(_v)               (((_v) >> 8) & 0xff)

    uint8_t _res0[8];
    uint32_t             CR;                                            // Control Register
#define LPSPI_CR_MEN                             ((uint32_t)1 << 0)     // Module Enable
#define LPSPI_CR_RST                             ((uint32_t)1 << 1)     // Software Reset
#define LPSPI_CR_DOZEN                           ((uint32_t)1 << 2)     // Doze mode enable
#define LPSPI_CR_DBGEN                           ((uint32_t)1 << 3)     // Debug Enable
#define LPSPI_CR_RTF                             ((uint32_t)1 << 8)     // Reset Transmit FIFO
#define LPSPI_CR_RRF                             ((uint32_t)1 << 9)     // Reset Receive FIFO

    uint32_t             SR;                                            // Status Register
#define LPSPI_SR_TDF                             ((uint32_t)1 << 0)     // Transmit Data Flag
#define LPSPI_SR_RDF                             ((uint32_t)1 << 1)     // Receive Data Flag
#define LPSPI_SR_WCF                             ((uint32_t)1 << 8)     // Word Complete Flag
#define LPSPI_SR_FCF                             ((uint32_t)1 << 9)     // Frame Complete Flag
#define LPSPI_SR_TCF                             ((uint32_t)1 << 10)    // Transfer Complete Flag
#define LPSPI_SR_TEF                             ((uint32_t)1 << 11)    // Transmit Error Flag
#define LPSPI_SR_REF                             ((uint32_t)1 << 12)    // Receive Error Flag
#define LPSPI_SR_DMF                             ((uint32_t)1 << 13)    // Data Match Flag
#define LPSPI_SR_MBF                             ((uint32_t)1 << 24)    // Module Busy Flag

    uint32_t             IER;                                           // Interrupt Enable Register
#define LPSPI_IER_TDIE                           ((uint32_t)1 << 0)     // Transmit Data Interrupt Enable
#define LPSPI_IER_RDIE                           ((uint32_t)1 << 1)     // Receive Data Interrupt Enable
#define LPSPI_IER_WCIE                           ((uint32_t)1 << 8)     // Word Complete Interrupt Enable
#define LPSPI_IER_FCIE                           ((uint32_t)1 << 9)     // Frame Complete Interrupt Enable
#define LPSPI_IER_TCIE                           ((uint32_t)1 << 10)    // Transfer Complete Interrupt Enable
#define LPSPI_IER_TEIE                           ((uint32_t)1 << 11)    // Transmit Error Interrupt Enable
#define LPSPI_IER_REIE                           ((uint32_t)1 << 12)    // Receive Error Interrupt Enable
#define LPSPI_IER_DMIE                           ((uint32_t)1 << 13)    // Data Match Interrupt Enable

    uint32_t             DER;                                           // DMA Enable Register
#define LPSPI_DER_TDDE                           ((uint32_t)1 << 0)     // Transmit Data DMA Enable
#define LPSPI_DER_RDDE                           ((uint32_t)1 << 1)     // Receive Data DMA Enable

    uint32_t             CFGR0;                                         // Configuration Register 0
#define LPSPI_CFGR0_HREN                         ((uint32_t)1 << 0)     // Host Request Enable
#define LPSPI_CFGR0_HRPOL                        ((uint32_t)1 << 1)     // Host Request Polarity
#define LPSPI_CFGR0_HRSEL                        ((uint32_t)1 << 2)     // Host Request Select
#define LPSPI_CFGR0_CIRFIFO                      ((uint32_t)1 << 8)     // Circular FIFO Enable
#define LPSPI_CFGR0_RDMO                         ((uint32_t)1 << 9)     // Receive Data Match Only

    uint32_t             CFGR1;                                         // Configuration Register 1
#define LPSPI_CFGR1_MASTER                       ((uint32_t)1 << 0)     // Master Mode
#define LPSPI_CFGR1_SAMPLE                       ((uint32_t)1 << 1)     // Sample Point
#define LPSPI_CFGR1_AUTOPCS                      ((uint32_t)1 << 2)     // Automatic PCS
#define LPSPI_CFGR1_NOSTALL                      ((uint32_t)1 << 3)     // No Stall
                                                                        // Peripheral Chip Select Polarity
#define LPSPI_CFGR1_PCSPOL(_n)                   (((uint32_t)(_n) & 0xf) << 8)
#define LPSPI_CFGR1_PCSPOL_INSERT(_v, _n)            (((_v) & ~0xf00) | ((uint32_t)(_n) & 0xf) << 8)
#define LPSPI_CFGR1_PCSPOL_EXTRACT(_v)               (((_v) >> 8) & 0xf)
                                                                        // Match Configuration
#define LPSPI_CFGR1_MATCFG(_n)                   (((uint32_t)(_n) & 0x7) << 16)
#define LPSPI_CFGR1_MATCFG_INSERT(_v, _n)            (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define LPSPI_CFGR1_MATCFG_EXTRACT(_v)               (((_v) >> 16) & 0x7)
                                                                        // Pin Configuration
#define LPSPI_CFGR1_PINCFG(_n)                   (((uint32_t)(_n) & 0x3) << 24)
#define LPSPI_CFGR1_PINCFG_INSERT(_v, _n)            (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define LPSPI_CFGR1_PINCFG_EXTRACT(_v)               (((_v) >> 24) & 0x3)
#define LPSPI_CFGR1_OUTCFG                       ((uint32_t)1 << 26)    // Output Config
#define LPSPI_CFGR1_PCSCFG                       ((uint32_t)1 << 27)    // Peripheral Chip Select Configuration

    uint8_t _res1[8];
    uint32_t             DMR0;                                          // Data Match Register 0
    uint32_t             DMR1;                                          // Data Match Register 1
    uint8_t _res2[8];
    uint32_t             CCR;                                           // Clock Configuration Register
                                                                        // SCK Divider
#define LPSPI_CCR_SCKDIV(_n)                     (((uint32_t)(_n) & 0xff) << 0)
#define LPSPI_CCR_SCKDIV_INSERT(_v, _n)              (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define LPSPI_CCR_SCKDIV_EXTRACT(_v)                 (((_v) >> 0) & 0xff)
                                                                        // Delay Between Transfers
#define LPSPI_CCR_DBT(_n)                        (((uint32_t)(_n) & 0xff) << 8)
#define LPSPI_CCR_DBT_INSERT(_v, _n)                 (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define LPSPI_CCR_DBT_EXTRACT(_v)                    (((_v) >> 8) & 0xff)
                                                                        // PCS to SCK Delay
#define LPSPI_CCR_PCSSCK(_n)                     (((uint32_t)(_n) & 0xff) << 16)
#define LPSPI_CCR_PCSSCK_INSERT(_v, _n)              (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define LPSPI_CCR_PCSSCK_EXTRACT(_v)                 (((_v) >> 16) & 0xff)
                                                                        // SCK to PCS Delay
#define LPSPI_CCR_SCKPCS(_n)                     (((uint32_t)(_n) & 0xff) << 24)
#define LPSPI_CCR_SCKPCS_INSERT(_v, _n)              (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define LPSPI_CCR_SCKPCS_EXTRACT(_v)                 (((_v) >> 24) & 0xff)

    uint8_t _res3[20];
    uint32_t             FCR;                                           // FIFO Control Register
                                                                        // Transmit FIFO Watermark
#define LPSPI_FCR_TXWATER(_n)                    (((uint32_t)(_n) & 0x3) << 0)
#define LPSPI_FCR_TXWATER_INSERT(_v, _n)             (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define LPSPI_FCR_TXWATER_EXTRACT(_v)                (((_v) >> 0) & 0x3)
                                                                        // Receive FIFO Watermark
#define LPSPI_FCR_RXWATER(_n)                    (((uint32_t)(_n) & 0x3) << 16)
#define LPSPI_FCR_RXWATER_INSERT(_v, _n)             (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define LPSPI_FCR_RXWATER_EXTRACT(_v)                (((_v) >> 16) & 0x3)

    const uint32_t       FSR;                                           // FIFO Status Register
                                                                        // Transmit FIFO Count
#define LPSPI_FSR_TXCOUNT_EXTRACT(_v)                (((_v) >> 0) & 0x7)
                                                                        // Receive FIFO Count
#define LPSPI_FSR_RXCOUNT_EXTRACT(_v)                (((_v) >> 16) & 0x7)

    uint32_t             TCR;                                           // Transmit Command Register
                                                                        // Frame Size
#define LPSPI_TCR_FRAMESZ(_n)                    (((uint32_t)(_n) & 0xfff) << 0)
#define LPSPI_TCR_FRAMESZ_INSERT(_v, _n)             (((_v) & ~0xfff) | ((uint32_t)(_n) & 0xfff) << 0)
#define LPSPI_TCR_FRAMESZ_EXTRACT(_v)                (((_v) >> 0) & 0xfff)
                                                                        // Transfer Width
#define LPSPI_TCR_WIDTH(_n)                      (((uint32_t)(_n) & 0x3) << 16)
#define LPSPI_TCR_WIDTH_INSERT(_v, _n)               (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define LPSPI_TCR_WIDTH_EXTRACT(_v)                  (((_v) >> 16) & 0x3)
#define LPSPI_TCR_TXMSK                          ((uint32_t)1 << 18)    // Transmit Data Mask
#define LPSPI_TCR_RXMSK                          ((uint32_t)1 << 19)    // Receive Data Mask
#define LPSPI_TCR_CONTC                          ((uint32_t)1 << 20)    // Continuing Command
#define LPSPI_TCR_CONT                           ((uint32_t)1 << 21)    // Continuous Transfer
#define LPSPI_TCR_BYSW                           ((uint32_t)1 << 22)    // Byte Swap
#define LPSPI_TCR_LSBF                           ((uint32_t)1 << 23)    // LSB First
                                                                        // Peripheral Chip Select
#define LPSPI_TCR_PCS(_n)                        (((uint32_t)(_n) & 0x3) << 24)
#define LPSPI_TCR_PCS_INSERT(_v, _n)                 (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define LPSPI_TCR_PCS_EXTRACT(_v)                    (((_v) >> 24) & 0x3)
                                                                        // Prescaler Value
#define LPSPI_TCR_PRESCALE(_n)                   (((uint32_t)(_n) & 0x7) << 27)
#define LPSPI_TCR_PRESCALE_INSERT(_v, _n)            (((_v) & ~0x38000000) | ((uint32_t)(_n) & 0x7) << 27)
#define LPSPI_TCR_PRESCALE_EXTRACT(_v)               (((_v) >> 27) & 0x7)
#define LPSPI_TCR_CPHA                           ((uint32_t)1 << 30)    // Clock Phase
#define LPSPI_TCR_CPOL                           ((uint32_t)1 << 31)    // Clock Polarity

    uint32_t             TDR;                                           // Transmit Data Register
    uint8_t _res4[8];
    const uint32_t       RSR;                                           // Receive Status Register
#define LPSPI_RSR_SOF                            ((uint32_t)1 << 0)     // Start Of Frame
#define LPSPI_RSR_RXEMPTY                        ((uint32_t)1 << 1)     // RX FIFO Empty

    const uint32_t       RDR;                                           // Receive Data Register
} LPSPI_regs_t;
                                                                        // --------------------
                                                                        // Programmable Delay Block
typedef struct                                                          // --------------------
{
    uint32_t             SC;                                            // Status and Control register
#define PDB_SC_LDOK                              ((uint32_t)1 << 0)     // Load OK
#define PDB_SC_CONT                              ((uint32_t)1 << 1)     // Continuous Mode Enable
                                                                        // Multiplication Factor Select for Prescaler
#define PDB_SC_MULT(_n)                          (((uint32_t)(_n) & 0x3) << 2)
#define PDB_SC_MULT_INSERT(_v, _n)                   (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define PDB_SC_MULT_EXTRACT(_v)                      (((_v) >> 2) & 0x3)
#define PDB_SC_PDBIE                             ((uint32_t)1 << 5)     // PDB Interrupt Enable
#define PDB_SC_PDBIF                             ((uint32_t)1 << 6)     // PDB Interrupt Flag
#define PDB_SC_PDBEN                             ((uint32_t)1 << 7)     // PDB Enable
                                                                        // Trigger Input Source Select
#define PDB_SC_TRGSEL(_n)                        (((uint32_t)(_n) & 0xf) << 8)
#define PDB_SC_TRGSEL_INSERT(_v, _n)                 (((_v) & ~0xf00) | ((uint32_t)(_n) & 0xf) << 8)
#define PDB_SC_TRGSEL_EXTRACT(_v)                    (((_v) >> 8) & 0xf)
                                                                        // Prescaler Divider Select
#define PDB_SC_PRESCALER(_n)                     (((uint32_t)(_n) & 0x7) << 12)
#define PDB_SC_PRESCALER_INSERT(_v, _n)              (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define PDB_SC_PRESCALER_EXTRACT(_v)                 (((_v) >> 12) & 0x7)
#define PDB_SC_DMAEN                             ((uint32_t)1 << 15)    // DMA Enable
#define PDB_SC_SWTRIG                            ((uint32_t)1 << 16)    // Software Trigger
#define PDB_SC_PDBEIE                            ((uint32_t)1 << 17)    // PDB Sequence Error Interrupt Enable
                                                                        // Load Mode Select
#define PDB_SC_LDMOD(_n)                         (((uint32_t)(_n) & 0x3) << 18)
#define PDB_SC_LDMOD_INSERT(_v, _n)                  (((_v) & ~0xc0000) | ((uint32_t)(_n) & 0x3) << 18)
#define PDB_SC_LDMOD_EXTRACT(_v)                     (((_v) >> 18) & 0x3)

    uint32_t             MOD;                                           // Modulus register
                                                                        // PDB Modulus
#define PDB_MOD_MOD(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_MOD_MOD_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_MOD_MOD_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    const uint32_t       CNT;                                           // Counter register
                                                                        // PDB Counter
#define PDB_CNT_CNT_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             IDLY;                                          // Interrupt Delay register
                                                                        // PDB Interrupt Delay
#define PDB_IDLY_IDLY(_n)                        (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_IDLY_IDLY_INSERT(_v, _n)                 (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_IDLY_IDLY_EXTRACT(_v)                    (((_v) >> 0) & 0xffff)

    uint8_t _res0[384];
    uint32_t             POEN;                                          // Pulse-Out n Enable register
                                                                        // PDB Pulse-Out Enable
#define PDB_POEN_POEN(_n)                        (((uint32_t)(_n) & 0xff) << 0)
#define PDB_POEN_POEN_INSERT(_v, _n)                 (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define PDB_POEN_POEN_EXTRACT(_v)                    (((_v) >> 0) & 0xff)

    uint32_t             PODLY;                                         // Pulse-Out n Delay register
                                                                        // PDB Pulse-Out Delay 2
#define PDB_PODLY_DLY2(_n)                       (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_PODLY_DLY2_INSERT(_v, _n)                (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_PODLY_DLY2_EXTRACT(_v)                   (((_v) >> 0) & 0xffff)
                                                                        // PDB Pulse-Out Delay 1
#define PDB_PODLY_DLY1(_n)                       (((uint32_t)(_n) & 0xffff) << 16)
#define PDB_PODLY_DLY1_INSERT(_v, _n)                (((_v) & ~0xffff0000) | ((uint32_t)(_n) & 0xffff) << 16)
#define PDB_PODLY_DLY1_EXTRACT(_v)                   (((_v) >> 16) & 0xffff)

    uint16_t             DLY2;                                          // PDB0_DLY2 register.
    uint16_t             DLY1;                                          // PDB0_DLY1 register.
    uint32_t             CH0C1;                                         // Channel n Control register 1
                                                                        // PDB Channel Pre-Trigger Enable
#define PDB_CH0C1_EN(_n)                         (((uint32_t)(_n) & 0xff) << 0)
#define PDB_CH0C1_EN_INSERT(_v, _n)                  (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define PDB_CH0C1_EN_EXTRACT(_v)                     (((_v) >> 0) & 0xff)
                                                                        // PDB Channel Pre-Trigger Output Select
#define PDB_CH0C1_TOS(_n)                        (((uint32_t)(_n) & 0xff) << 8)
#define PDB_CH0C1_TOS_INSERT(_v, _n)                 (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define PDB_CH0C1_TOS_EXTRACT(_v)                    (((_v) >> 8) & 0xff)
                                                                        // PDB Channel Pre-Trigger Back-to-Back Operation Enable
#define PDB_CH0C1_BB(_n)                         (((uint32_t)(_n) & 0xff) << 16)
#define PDB_CH0C1_BB_INSERT(_v, _n)                  (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define PDB_CH0C1_BB_EXTRACT(_v)                     (((_v) >> 16) & 0xff)

    uint32_t             CH1C1;                                         // Channel n Control register 1
                                                                        // PDB Channel Pre-Trigger Enable
#define PDB_CH1C1_EN(_n)                         (((uint32_t)(_n) & 0xff) << 0)
#define PDB_CH1C1_EN_INSERT(_v, _n)                  (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define PDB_CH1C1_EN_EXTRACT(_v)                     (((_v) >> 0) & 0xff)
                                                                        // PDB Channel Pre-Trigger Output Select
#define PDB_CH1C1_TOS(_n)                        (((uint32_t)(_n) & 0xff) << 8)
#define PDB_CH1C1_TOS_INSERT(_v, _n)                 (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define PDB_CH1C1_TOS_EXTRACT(_v)                    (((_v) >> 8) & 0xff)
                                                                        // PDB Channel Pre-Trigger Back-to-Back Operation Enable
#define PDB_CH1C1_BB(_n)                         (((uint32_t)(_n) & 0xff) << 16)
#define PDB_CH1C1_BB_INSERT(_v, _n)                  (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define PDB_CH1C1_BB_EXTRACT(_v)                     (((_v) >> 16) & 0xff)

    uint32_t             CH0S;                                          // Channel n Status register
                                                                        // PDB Channel Sequence Error Flags
#define PDB_CH0S_ERR(_n)                         (((uint32_t)(_n) & 0xff) << 0)
#define PDB_CH0S_ERR_INSERT(_v, _n)                  (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define PDB_CH0S_ERR_EXTRACT(_v)                     (((_v) >> 0) & 0xff)
                                                                        // PDB Channel Flags
#define PDB_CH0S_CF(_n)                          (((uint32_t)(_n) & 0xff) << 16)
#define PDB_CH0S_CF_INSERT(_v, _n)                   (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define PDB_CH0S_CF_EXTRACT(_v)                      (((_v) >> 16) & 0xff)

    uint32_t             CH1S;                                          // Channel n Status register
                                                                        // PDB Channel Sequence Error Flags
#define PDB_CH1S_ERR(_n)                         (((uint32_t)(_n) & 0xff) << 0)
#define PDB_CH1S_ERR_INSERT(_v, _n)                  (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define PDB_CH1S_ERR_EXTRACT(_v)                     (((_v) >> 0) & 0xff)
                                                                        // PDB Channel Flags
#define PDB_CH1S_CF(_n)                          (((uint32_t)(_n) & 0xff) << 16)
#define PDB_CH1S_CF_INSERT(_v, _n)                   (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define PDB_CH1S_CF_EXTRACT(_v)                      (((_v) >> 16) & 0xff)

    uint32_t             CH0DLY0;                                       // Channel n Delay 0 register
                                                                        // PDB Channel Delay
#define PDB_CH0DLY0_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY0_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY0_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH1DLY0;                                       // Channel n Delay 0 register
                                                                        // PDB Channel Delay
#define PDB_CH1DLY0_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY0_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY0_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH0DLY1;                                       // Channel n Delay 1 register
                                                                        // PDB Channel Delay
#define PDB_CH0DLY1_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY1_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY1_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH1DLY1;                                       // Channel n Delay 1 register
                                                                        // PDB Channel Delay
#define PDB_CH1DLY1_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY1_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY1_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH0DLY2;                                       // Channel n Delay 2 register
                                                                        // PDB Channel Delay
#define PDB_CH0DLY2_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY2_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY2_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH1DLY2;                                       // Channel n Delay 2 register
                                                                        // PDB Channel Delay
#define PDB_CH1DLY2_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY2_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY2_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH0DLY3;                                       // Channel n Delay 3 register
                                                                        // PDB Channel Delay
#define PDB_CH0DLY3_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY3_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY3_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH1DLY3;                                       // Channel n Delay 3 register
                                                                        // PDB Channel Delay
#define PDB_CH1DLY3_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY3_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY3_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH0DLY4;                                       // Channel n Delay 4 register
                                                                        // PDB Channel Delay
#define PDB_CH0DLY4_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY4_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY4_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH1DLY4;                                       // Channel n Delay 4 register
                                                                        // PDB Channel Delay
#define PDB_CH1DLY4_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY4_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY4_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH0DLY5;                                       // Channel n Delay 5 register
                                                                        // PDB Channel Delay
#define PDB_CH0DLY5_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY5_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY5_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH1DLY5;                                       // Channel n Delay 5 register
                                                                        // PDB Channel Delay
#define PDB_CH1DLY5_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY5_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY5_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH0DLY6;                                       // Channel n Delay 6 register
                                                                        // PDB Channel Delay
#define PDB_CH0DLY6_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY6_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY6_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH1DLY6;                                       // Channel n Delay 6 register
                                                                        // PDB Channel Delay
#define PDB_CH1DLY6_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY6_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY6_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH0DLY7;                                       // Channel n Delay 7 register
                                                                        // PDB Channel Delay
#define PDB_CH0DLY7_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY7_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH0DLY7_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

    uint32_t             CH1DLY7;                                       // Channel n Delay 7 register
                                                                        // PDB Channel Delay
#define PDB_CH1DLY7_DLY(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY7_DLY_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define PDB_CH1DLY7_DLY_EXTRACT(_v)                  (((_v) >> 0) & 0xffff)

} PDB_regs_t;
                                                                        // --------------------
                                                                        // Cyclic Redundancy Check
typedef struct                                                          // --------------------
{
    uint32_t             DATA;                                          // CRC Data register
                                                                        // CRC Low Lower Byte
#define CRC_DATA_LL(_n)                          (((uint32_t)(_n) & 0xff) << 0)
#define CRC_DATA_LL_INSERT(_v, _n)                   (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CRC_DATA_LL_EXTRACT(_v)                      (((_v) >> 0) & 0xff)
                                                                        // CRC Low Upper Byte
#define CRC_DATA_LU(_n)                          (((uint32_t)(_n) & 0xff) << 8)
#define CRC_DATA_LU_INSERT(_v, _n)                   (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define CRC_DATA_LU_EXTRACT(_v)                      (((_v) >> 8) & 0xff)
                                                                        // CRC High Lower Byte
#define CRC_DATA_HL(_n)                          (((uint32_t)(_n) & 0xff) << 16)
#define CRC_DATA_HL_INSERT(_v, _n)                   (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CRC_DATA_HL_EXTRACT(_v)                      (((_v) >> 16) & 0xff)
                                                                        // CRC High Upper Byte
#define CRC_DATA_HU(_n)                          (((uint32_t)(_n) & 0xff) << 24)
#define CRC_DATA_HU_INSERT(_v, _n)                   (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define CRC_DATA_HU_EXTRACT(_v)                      (((_v) >> 24) & 0xff)

    uint16_t             DATAL;                                         // CRC_DATAL register.
    uint8_t              DATALL;                                        // CRC_DATALL register.
    uint8_t              DATALU;                                        // CRC_DATALU register.
    uint16_t             DATAH;                                         // CRC_DATAH register.
    uint8_t              DATAHL;                                        // CRC_DATAHL register.
    uint8_t              DATAHU;                                        // CRC_DATAHU register.
    uint32_t             GPOLY;                                         // CRC Polynomial register
                                                                        // Low Polynominal Half-word
#define CRC_GPOLY_LOW(_n)                        (((uint32_t)(_n) & 0xffff) << 0)
#define CRC_GPOLY_LOW_INSERT(_v, _n)                 (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define CRC_GPOLY_LOW_EXTRACT(_v)                    (((_v) >> 0) & 0xffff)
                                                                        // High Polynominal Half-word
#define CRC_GPOLY_HIGH(_n)                       (((uint32_t)(_n) & 0xffff) << 16)
#define CRC_GPOLY_HIGH_INSERT(_v, _n)                (((_v) & ~0xffff0000) | ((uint32_t)(_n) & 0xffff) << 16)
#define CRC_GPOLY_HIGH_EXTRACT(_v)                   (((_v) >> 16) & 0xffff)

    uint32_t             CTRL;                                          // CRC Control register
#define CRC_CTRL_TCRC                            ((uint32_t)1 << 24)    // TCRC
#define CRC_CTRL_WAS                             ((uint32_t)1 << 25)    // Write CRC Data Register As Seed
#define CRC_CTRL_FXOR                            ((uint32_t)1 << 26)    // Complement Read Of CRC Data Register
                                                                        // Type Of Transpose For Read
#define CRC_CTRL_TOTR(_n)                        (((uint32_t)(_n) & 0x3) << 28)
#define CRC_CTRL_TOTR_INSERT(_v, _n)                 (((_v) & ~0x30000000) | ((uint32_t)(_n) & 0x3) << 28)
#define CRC_CTRL_TOTR_EXTRACT(_v)                    (((_v) >> 28) & 0x3)
                                                                        // Type Of Transpose For Writes
#define CRC_CTRL_TOT(_n)                         (((uint32_t)(_n) & 0x3) << 30)
#define CRC_CTRL_TOT_INSERT(_v, _n)                  (((_v) & ~0xc0000000) | ((uint32_t)(_n) & 0x3) << 30)
#define CRC_CTRL_TOT_EXTRACT(_v)                     (((_v) >> 30) & 0x3)

} CRC_regs_t;
                                                                        // --------------------
                                                                        // Low Power Periodic Interrupt Timer (LPIT)
typedef struct                                                          // --------------------
{
    const uint32_t       VERID;                                         // Version ID Register
                                                                        // Feature Number
#define LPIT0_VERID_FEATURE_EXTRACT(_v)              (((_v) >> 0) & 0xffff)
                                                                        // Minor Version Number
#define LPIT0_VERID_MINOR_EXTRACT(_v)                (((_v) >> 16) & 0xff)
                                                                        // Major Version Number
#define LPIT0_VERID_MAJOR_EXTRACT(_v)                (((_v) >> 24) & 0xff)

    const uint32_t       PARAM;                                         // Parameter Register
                                                                        // Number of Timer Channels
#define LPIT0_PARAM_CHANNEL_EXTRACT(_v)              (((_v) >> 0) & 0xff)
                                                                        // Number of External Trigger Inputs
#define LPIT0_PARAM_EXT_TRIG_EXTRACT(_v)             (((_v) >> 8) & 0xff)

    uint32_t             MCR;                                           // Module Control Register
#define LPIT0_MCR_M_CEN                          ((uint32_t)1 << 0)     // Module Clock Enable
#define LPIT0_MCR_SW_RST                         ((uint32_t)1 << 1)     // Software Reset Bit
#define LPIT0_MCR_DOZE_EN                        ((uint32_t)1 << 2)     // DOZE Mode Enable Bit
#define LPIT0_MCR_DBG_EN                         ((uint32_t)1 << 3)     // Debug Enable Bit

    uint32_t             MSR;                                           // Module Status Register
#define LPIT0_MSR_TIF0                           ((uint32_t)1 << 0)     // Channel 0 Timer Interrupt Flag
#define LPIT0_MSR_TIF1                           ((uint32_t)1 << 1)     // Channel 1 Timer Interrupt Flag
#define LPIT0_MSR_TIF2                           ((uint32_t)1 << 2)     // Channel 2 Timer Interrupt Flag
#define LPIT0_MSR_TIF3                           ((uint32_t)1 << 3)     // Channel 3 Timer Interrupt Flag

    uint32_t             MIER;                                          // Module Interrupt Enable Register
#define LPIT0_MIER_TIE0                          ((uint32_t)1 << 0)     // Channel 0 Timer Interrupt Enable
#define LPIT0_MIER_TIE1                          ((uint32_t)1 << 1)     // Channel 1 Timer Interrupt Enable
#define LPIT0_MIER_TIE2                          ((uint32_t)1 << 2)     // Channel 2 Timer Interrupt Enable
#define LPIT0_MIER_TIE3                          ((uint32_t)1 << 3)     // Channel 3 Timer Interrupt Enable

    uint32_t             SETTEN;                                        // Set Timer Enable Register
#define LPIT0_SETTEN_SET_T_EN_0                  ((uint32_t)1 << 0)     // Set Timer 0 Enable
#define LPIT0_SETTEN_SET_T_EN_1                  ((uint32_t)1 << 1)     // Set Timer 1 Enable
#define LPIT0_SETTEN_SET_T_EN_2                  ((uint32_t)1 << 2)     // Set Timer 2 Enable
#define LPIT0_SETTEN_SET_T_EN_3                  ((uint32_t)1 << 3)     // Set Timer 3 Enable

    uint32_t             CLRTEN;                                        // Clear Timer Enable Register
#define LPIT0_CLRTEN_CLR_T_EN_0                  ((uint32_t)1 << 0)     // Clear Timer 0 Enable
#define LPIT0_CLRTEN_CLR_T_EN_1                  ((uint32_t)1 << 1)     // Clear Timer 1 Enable
#define LPIT0_CLRTEN_CLR_T_EN_2                  ((uint32_t)1 << 2)     // Clear Timer 2 Enable
#define LPIT0_CLRTEN_CLR_T_EN_3                  ((uint32_t)1 << 3)     // Clear Timer 3 Enable

    uint8_t _res0[4];
    uint32_t             TVAL0;                                         // Timer Value Register
    const uint32_t       CVAL0;                                         // Current Timer Value
    uint32_t             TCTRL0;                                        // Timer Control Register
#define LPIT0_TCTRL0_T_EN                        ((uint32_t)1 << 0)     // Timer Enable
#define LPIT0_TCTRL0_CHAIN                       ((uint32_t)1 << 1)     // Chain Channel
                                                                        // Timer Operation Mode
#define LPIT0_TCTRL0_MODE(_n)                    (((uint32_t)(_n) & 0x3) << 2)
#define LPIT0_TCTRL0_MODE_INSERT(_v, _n)             (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define LPIT0_TCTRL0_MODE_EXTRACT(_v)                (((_v) >> 2) & 0x3)
#define LPIT0_TCTRL0_TSOT                        ((uint32_t)1 << 16)    // Timer Start On Trigger
#define LPIT0_TCTRL0_TSOI                        ((uint32_t)1 << 17)    // Timer Stop On Interrupt
#define LPIT0_TCTRL0_TROT                        ((uint32_t)1 << 18)    // Timer Reload On Trigger
#define LPIT0_TCTRL0_TRG_SRC                     ((uint32_t)1 << 23)    // Trigger Source
                                                                        // Trigger Select
#define LPIT0_TCTRL0_TRG_SEL(_n)                 (((uint32_t)(_n) & 0xf) << 24)
#define LPIT0_TCTRL0_TRG_SEL_INSERT(_v, _n)          (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define LPIT0_TCTRL0_TRG_SEL_EXTRACT(_v)             (((_v) >> 24) & 0xf)

    uint8_t _res1[4];
    uint32_t             TVAL1;                                         // Timer Value Register
    const uint32_t       CVAL1;                                         // Current Timer Value
    uint32_t             TCTRL1;                                        // Timer Control Register
#define LPIT0_TCTRL1_T_EN                        ((uint32_t)1 << 0)     // Timer Enable
#define LPIT0_TCTRL1_CHAIN                       ((uint32_t)1 << 1)     // Chain Channel
                                                                        // Timer Operation Mode
#define LPIT0_TCTRL1_MODE(_n)                    (((uint32_t)(_n) & 0x3) << 2)
#define LPIT0_TCTRL1_MODE_INSERT(_v, _n)             (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define LPIT0_TCTRL1_MODE_EXTRACT(_v)                (((_v) >> 2) & 0x3)
#define LPIT0_TCTRL1_TSOT                        ((uint32_t)1 << 16)    // Timer Start On Trigger
#define LPIT0_TCTRL1_TSOI                        ((uint32_t)1 << 17)    // Timer Stop On Interrupt
#define LPIT0_TCTRL1_TROT                        ((uint32_t)1 << 18)    // Timer Reload On Trigger
#define LPIT0_TCTRL1_TRG_SRC                     ((uint32_t)1 << 23)    // Trigger Source
                                                                        // Trigger Select
#define LPIT0_TCTRL1_TRG_SEL(_n)                 (((uint32_t)(_n) & 0xf) << 24)
#define LPIT0_TCTRL1_TRG_SEL_INSERT(_v, _n)          (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define LPIT0_TCTRL1_TRG_SEL_EXTRACT(_v)             (((_v) >> 24) & 0xf)

    uint8_t _res2[4];
    uint32_t             TVAL2;                                         // Timer Value Register
    const uint32_t       CVAL2;                                         // Current Timer Value
    uint32_t             TCTRL2;                                        // Timer Control Register
#define LPIT0_TCTRL2_T_EN                        ((uint32_t)1 << 0)     // Timer Enable
#define LPIT0_TCTRL2_CHAIN                       ((uint32_t)1 << 1)     // Chain Channel
                                                                        // Timer Operation Mode
#define LPIT0_TCTRL2_MODE(_n)                    (((uint32_t)(_n) & 0x3) << 2)
#define LPIT0_TCTRL2_MODE_INSERT(_v, _n)             (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define LPIT0_TCTRL2_MODE_EXTRACT(_v)                (((_v) >> 2) & 0x3)
#define LPIT0_TCTRL2_TSOT                        ((uint32_t)1 << 16)    // Timer Start On Trigger
#define LPIT0_TCTRL2_TSOI                        ((uint32_t)1 << 17)    // Timer Stop On Interrupt
#define LPIT0_TCTRL2_TROT                        ((uint32_t)1 << 18)    // Timer Reload On Trigger
#define LPIT0_TCTRL2_TRG_SRC                     ((uint32_t)1 << 23)    // Trigger Source
                                                                        // Trigger Select
#define LPIT0_TCTRL2_TRG_SEL(_n)                 (((uint32_t)(_n) & 0xf) << 24)
#define LPIT0_TCTRL2_TRG_SEL_INSERT(_v, _n)          (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define LPIT0_TCTRL2_TRG_SEL_EXTRACT(_v)             (((_v) >> 24) & 0xf)

    uint8_t _res3[4];
    uint32_t             TVAL3;                                         // Timer Value Register
    const uint32_t       CVAL3;                                         // Current Timer Value
    uint32_t             TCTRL3;                                        // Timer Control Register
#define LPIT0_TCTRL3_T_EN                        ((uint32_t)1 << 0)     // Timer Enable
#define LPIT0_TCTRL3_CHAIN                       ((uint32_t)1 << 1)     // Chain Channel
                                                                        // Timer Operation Mode
#define LPIT0_TCTRL3_MODE(_n)                    (((uint32_t)(_n) & 0x3) << 2)
#define LPIT0_TCTRL3_MODE_INSERT(_v, _n)             (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define LPIT0_TCTRL3_MODE_EXTRACT(_v)                (((_v) >> 2) & 0x3)
#define LPIT0_TCTRL3_TSOT                        ((uint32_t)1 << 16)    // Timer Start On Trigger
#define LPIT0_TCTRL3_TSOI                        ((uint32_t)1 << 17)    // Timer Stop On Interrupt
#define LPIT0_TCTRL3_TROT                        ((uint32_t)1 << 18)    // Timer Reload On Trigger
#define LPIT0_TCTRL3_TRG_SRC                     ((uint32_t)1 << 23)    // Trigger Source
                                                                        // Trigger Select
#define LPIT0_TCTRL3_TRG_SEL(_n)                 (((uint32_t)(_n) & 0xf) << 24)
#define LPIT0_TCTRL3_TRG_SEL_INSERT(_v, _n)          (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define LPIT0_TCTRL3_TRG_SEL_EXTRACT(_v)             (((_v) >> 24) & 0xf)

} LPIT0_regs_t;
                                                                        // --------------------
                                                                        // Secure Real Time Clock
typedef struct                                                          // --------------------
{
    uint32_t             TSR;                                           // RTC Time Seconds Register
    uint32_t             TPR;                                           // RTC Time Prescaler Register
                                                                        // Time Prescaler Register
#define RTC_TPR_TPR(_n)                          (((uint32_t)(_n) & 0xffff) << 0)
#define RTC_TPR_TPR_INSERT(_v, _n)                   (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define RTC_TPR_TPR_EXTRACT(_v)                      (((_v) >> 0) & 0xffff)

    uint32_t             TAR;                                           // RTC Time Alarm Register
    uint32_t             TCR;                                           // RTC Time Compensation Register
                                                                        // Time Compensation Register
#define RTC_TCR_TCR(_n)                          (((uint32_t)(_n) & 0xff) << 0)
#define RTC_TCR_TCR_INSERT(_v, _n)                   (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define RTC_TCR_TCR_EXTRACT(_v)                      (((_v) >> 0) & 0xff)
                                                                        // Compensation Interval Register
#define RTC_TCR_CIR(_n)                          (((uint32_t)(_n) & 0xff) << 8)
#define RTC_TCR_CIR_INSERT(_v, _n)                   (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define RTC_TCR_CIR_EXTRACT(_v)                      (((_v) >> 8) & 0xff)
                                                                        // Time Compensation Value
#define RTC_TCR_TCV(_n)                          (((uint32_t)(_n) & 0xff) << 16)
#define RTC_TCR_TCV_INSERT(_v, _n)                   (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define RTC_TCR_TCV_EXTRACT(_v)                      (((_v) >> 16) & 0xff)
                                                                        // Compensation Interval Counter
#define RTC_TCR_CIC(_n)                          (((uint32_t)(_n) & 0xff) << 24)
#define RTC_TCR_CIC_INSERT(_v, _n)                   (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define RTC_TCR_CIC_EXTRACT(_v)                      (((_v) >> 24) & 0xff)

    uint32_t             CR;                                            // RTC Control Register
#define RTC_CR_SWR                               ((uint32_t)1 << 0)     // Software Reset
#define RTC_CR_SUP                               ((uint32_t)1 << 2)     // Supervisor Access
#define RTC_CR_UM                                ((uint32_t)1 << 3)     // Update Mode
#define RTC_CR_CPS                               ((uint32_t)1 << 5)     // Clock Pin Select
#define RTC_CR_LPOS                              ((uint32_t)1 << 7)     // LPO Select
#define RTC_CR_CLKO                              ((uint32_t)1 << 9)     // Clock Output
#define RTC_CR_CPE                               ((uint32_t)1 << 24)    // Clock Pin Enable

    uint32_t             SR;                                            // RTC Status Register
#define RTC_SR_TIF                               ((uint32_t)1 << 0)     // Time Invalid Flag
#define RTC_SR_TOF                               ((uint32_t)1 << 1)     // Time Overflow Flag
#define RTC_SR_TAF                               ((uint32_t)1 << 2)     // Time Alarm Flag
#define RTC_SR_TCE                               ((uint32_t)1 << 4)     // Time Counter Enable

    uint32_t             LR;                                            // RTC Lock Register
#define RTC_LR_TCL                               ((uint32_t)1 << 3)     // Time Compensation Lock
#define RTC_LR_CRL                               ((uint32_t)1 << 4)     // Control Register Lock
#define RTC_LR_SRL                               ((uint32_t)1 << 5)     // Status Register Lock
#define RTC_LR_LRL                               ((uint32_t)1 << 6)     // Lock Register Lock

    uint32_t             IER;                                           // RTC Interrupt Enable Register
#define RTC_IER_TIIE                             ((uint32_t)1 << 0)     // Time Invalid Interrupt Enable
#define RTC_IER_TOIE                             ((uint32_t)1 << 1)     // Time Overflow Interrupt Enable
#define RTC_IER_TAIE                             ((uint32_t)1 << 2)     // Time Alarm Interrupt Enable
#define RTC_IER_TSIE                             ((uint32_t)1 << 4)     // Time Seconds Interrupt Enable
                                                                        // Timer Seconds Interrupt Configuration
#define RTC_IER_TSIC(_n)                         (((uint32_t)(_n) & 0x7) << 16)
#define RTC_IER_TSIC_INSERT(_v, _n)                  (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define RTC_IER_TSIC_EXTRACT(_v)                     (((_v) >> 16) & 0x7)

} RTC_regs_t;
                                                                        // --------------------
                                                                        // Low Power Timer
typedef struct                                                          // --------------------
{
    uint32_t             CSR;                                           // Low Power Timer Control Status Register
#define LPTMR0_CSR_TEN                           ((uint32_t)1 << 0)     // Timer Enable
#define LPTMR0_CSR_TMS                           ((uint32_t)1 << 1)     // Timer Mode Select
#define LPTMR0_CSR_TFC                           ((uint32_t)1 << 2)     // Timer Free-Running Counter
#define LPTMR0_CSR_TPP                           ((uint32_t)1 << 3)     // Timer Pin Polarity
                                                                        // Timer Pin Select
#define LPTMR0_CSR_TPS(_n)                       (((uint32_t)(_n) & 0x3) << 4)
#define LPTMR0_CSR_TPS_INSERT(_v, _n)                (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define LPTMR0_CSR_TPS_EXTRACT(_v)                   (((_v) >> 4) & 0x3)
#define LPTMR0_CSR_TIE                           ((uint32_t)1 << 6)     // Timer Interrupt Enable
#define LPTMR0_CSR_TCF                           ((uint32_t)1 << 7)     // Timer Compare Flag
#define LPTMR0_CSR_TDRE                          ((uint32_t)1 << 8)     // Timer DMA Request Enable

    uint32_t             PSR;                                           // Low Power Timer Prescale Register
                                                                        // Prescaler Clock Select
#define LPTMR0_PSR_PCS(_n)                       (((uint32_t)(_n) & 0x3) << 0)
#define LPTMR0_PSR_PCS_INSERT(_v, _n)                (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define LPTMR0_PSR_PCS_EXTRACT(_v)                   (((_v) >> 0) & 0x3)
#define LPTMR0_PSR_PBYP                          ((uint32_t)1 << 2)     // Prescaler Bypass
                                                                        // Prescale Value
#define LPTMR0_PSR_PRESCALE(_n)                  (((uint32_t)(_n) & 0xf) << 3)
#define LPTMR0_PSR_PRESCALE_INSERT(_v, _n)           (((_v) & ~0x78) | ((uint32_t)(_n) & 0xf) << 3)
#define LPTMR0_PSR_PRESCALE_EXTRACT(_v)              (((_v) >> 3) & 0xf)

    uint32_t             CMR;                                           // Low Power Timer Compare Register
                                                                        // Compare Value
#define LPTMR0_CMR_COMPARE(_n)                   (((uint32_t)(_n) & 0xffff) << 0)
#define LPTMR0_CMR_COMPARE_INSERT(_v, _n)            (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define LPTMR0_CMR_COMPARE_EXTRACT(_v)               (((_v) >> 0) & 0xffff)

    uint32_t             CNR;                                           // Low Power Timer Counter Register
                                                                        // Counter Value
#define LPTMR0_CNR_COUNTER(_n)                   (((uint32_t)(_n) & 0xffff) << 0)
#define LPTMR0_CNR_COUNTER_INSERT(_v, _n)            (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define LPTMR0_CNR_COUNTER_EXTRACT(_v)               (((_v) >> 0) & 0xffff)

} LPTMR0_regs_t;
                                                                        // --------------------
                                                                        // System Integration Module
typedef struct                                                          // --------------------
{
    uint8_t _res0[4];
    uint32_t             CHIPCTL;                                       // Chip Control register
                                                                        // ADC interleave channel enable
#define SIM_CHIPCTL_ADC_INTERLEAVE_EN(_n)        (((uint32_t)(_n) & 0xf) << 0)
#define SIM_CHIPCTL_ADC_INTERLEAVE_EN_INSERT(_v, _n) (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define SIM_CHIPCTL_ADC_INTERLEAVE_EN_EXTRACT(_v)    (((_v) >> 0) & 0xf)
                                                                        // CLKOUT Select
#define SIM_CHIPCTL_CLKOUTSEL(_n)                (((uint32_t)(_n) & 0xf) << 4)
#define SIM_CHIPCTL_CLKOUTSEL_INSERT(_v, _n)         (((_v) & ~0xf0) | ((uint32_t)(_n) & 0xf) << 4)
#define SIM_CHIPCTL_CLKOUTSEL_EXTRACT(_v)            (((_v) >> 4) & 0xf)
                                                                        // CLKOUT Divide Ratio
#define SIM_CHIPCTL_CLKOUTDIV(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define SIM_CHIPCTL_CLKOUTDIV_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define SIM_CHIPCTL_CLKOUTDIV_EXTRACT(_v)            (((_v) >> 8) & 0x7)
#define SIM_CHIPCTL_CLKOUTEN                     ((uint32_t)1 << 11)    // CLKOUT enable
#define SIM_CHIPCTL_TRACECLK_SEL                 ((uint32_t)1 << 12)    // Debug trace clock select
#define SIM_CHIPCTL_PDB_BB_SEL                   ((uint32_t)1 << 13)    // PDB back-to-back select
                                                                        // ADC_SUPPLY
#define SIM_CHIPCTL_ADC_SUPPLY(_n)               (((uint32_t)(_n) & 0x7) << 16)
#define SIM_CHIPCTL_ADC_SUPPLY_INSERT(_v, _n)        (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define SIM_CHIPCTL_ADC_SUPPLY_EXTRACT(_v)           (((_v) >> 16) & 0x7)
#define SIM_CHIPCTL_ADC_SUPPLYEN                 ((uint32_t)1 << 19)    // ADC_SUPPLYEN
#define SIM_CHIPCTL_SRAMU_RETEN                  ((uint32_t)1 << 20)    // SRAMU_RETEN
#define SIM_CHIPCTL_SRAML_RETEN                  ((uint32_t)1 << 21)    // SRAML_RETEN

    uint8_t _res1[4];
    uint32_t             FTMOPT0;                                       // FTM Option Register 0
                                                                        // FTM0 Fault X Select
#define SIM_FTMOPT0_FTM0FLTxSEL(_n)              (((uint32_t)(_n) & 0x7) << 0)
#define SIM_FTMOPT0_FTM0FLTxSEL_INSERT(_v, _n)       (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define SIM_FTMOPT0_FTM0FLTxSEL_EXTRACT(_v)          (((_v) >> 0) & 0x7)
                                                                        // FTM1 Fault X Select
#define SIM_FTMOPT0_FTM1FLTxSEL(_n)              (((uint32_t)(_n) & 0x7) << 4)
#define SIM_FTMOPT0_FTM1FLTxSEL_INSERT(_v, _n)       (((_v) & ~0x70) | ((uint32_t)(_n) & 0x7) << 4)
#define SIM_FTMOPT0_FTM1FLTxSEL_EXTRACT(_v)          (((_v) >> 4) & 0x7)
                                                                        // FTM2 Fault X Select
#define SIM_FTMOPT0_FTM2FLTxSEL(_n)              (((uint32_t)(_n) & 0x7) << 8)
#define SIM_FTMOPT0_FTM2FLTxSEL_INSERT(_v, _n)       (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define SIM_FTMOPT0_FTM2FLTxSEL_EXTRACT(_v)          (((_v) >> 8) & 0x7)
                                                                        // FTM3 Fault X Select
#define SIM_FTMOPT0_FTM3FLTxSEL(_n)              (((uint32_t)(_n) & 0x7) << 12)
#define SIM_FTMOPT0_FTM3FLTxSEL_INSERT(_v, _n)       (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define SIM_FTMOPT0_FTM3FLTxSEL_EXTRACT(_v)          (((_v) >> 12) & 0x7)
                                                                        // FTM0 External Clock Pin Select
#define SIM_FTMOPT0_FTM0CLKSEL(_n)               (((uint32_t)(_n) & 0x3) << 24)
#define SIM_FTMOPT0_FTM0CLKSEL_INSERT(_v, _n)        (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define SIM_FTMOPT0_FTM0CLKSEL_EXTRACT(_v)           (((_v) >> 24) & 0x3)
                                                                        // FTM1 External Clock Pin Select
#define SIM_FTMOPT0_FTM1CLKSEL(_n)               (((uint32_t)(_n) & 0x3) << 26)
#define SIM_FTMOPT0_FTM1CLKSEL_INSERT(_v, _n)        (((_v) & ~0xc000000) | ((uint32_t)(_n) & 0x3) << 26)
#define SIM_FTMOPT0_FTM1CLKSEL_EXTRACT(_v)           (((_v) >> 26) & 0x3)
                                                                        // FTM2 External Clock Pin Select
#define SIM_FTMOPT0_FTM2CLKSEL(_n)               (((uint32_t)(_n) & 0x3) << 28)
#define SIM_FTMOPT0_FTM2CLKSEL_INSERT(_v, _n)        (((_v) & ~0x30000000) | ((uint32_t)(_n) & 0x3) << 28)
#define SIM_FTMOPT0_FTM2CLKSEL_EXTRACT(_v)           (((_v) >> 28) & 0x3)
                                                                        // FTM3 External Clock Pin Select
#define SIM_FTMOPT0_FTM3CLKSEL(_n)               (((uint32_t)(_n) & 0x3) << 30)
#define SIM_FTMOPT0_FTM3CLKSEL_INSERT(_v, _n)        (((_v) & ~0xc0000000) | ((uint32_t)(_n) & 0x3) << 30)
#define SIM_FTMOPT0_FTM3CLKSEL_EXTRACT(_v)           (((_v) >> 30) & 0x3)

    uint32_t             LPOCLKS;                                       // LPO Clock Select Register
#define SIM_LPOCLKS_LPO1KCLKEN                   ((uint32_t)1 << 0)     // 1 kHz LPO_CLK enable
#define SIM_LPOCLKS_LPO32KCLKEN                  ((uint32_t)1 << 1)     // 32 kHz LPO_CLK enable
                                                                        // LPO clock source select
#define SIM_LPOCLKS_LPOCLKSEL(_n)                (((uint32_t)(_n) & 0x3) << 2)
#define SIM_LPOCLKS_LPOCLKSEL_INSERT(_v, _n)         (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define SIM_LPOCLKS_LPOCLKSEL_EXTRACT(_v)            (((_v) >> 2) & 0x3)
                                                                        // 32 kHz clock source select
#define SIM_LPOCLKS_RTCCLKSEL(_n)                (((uint32_t)(_n) & 0x3) << 4)
#define SIM_LPOCLKS_RTCCLKSEL_INSERT(_v, _n)         (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define SIM_LPOCLKS_RTCCLKSEL_EXTRACT(_v)            (((_v) >> 4) & 0x3)

    uint8_t _res2[4];
    uint32_t             ADCOPT;                                        // ADC Options Register
#define SIM_ADCOPT_ADC0TRGSEL                    ((uint32_t)1 << 0)     // ADC0 trigger source select
                                                                        // ADC0 software pretrigger sources
#define SIM_ADCOPT_ADC0SWPRETRG(_n)              (((uint32_t)(_n) & 0x7) << 1)
#define SIM_ADCOPT_ADC0SWPRETRG_INSERT(_v, _n)       (((_v) & ~0xe) | ((uint32_t)(_n) & 0x7) << 1)
#define SIM_ADCOPT_ADC0SWPRETRG_EXTRACT(_v)          (((_v) >> 1) & 0x7)
                                                                        // ADC0 pretrigger source select
#define SIM_ADCOPT_ADC0PRETRGSEL(_n)             (((uint32_t)(_n) & 0x3) << 4)
#define SIM_ADCOPT_ADC0PRETRGSEL_INSERT(_v, _n)      (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define SIM_ADCOPT_ADC0PRETRGSEL_EXTRACT(_v)         (((_v) >> 4) & 0x3)
#define SIM_ADCOPT_ADC1TRGSEL                    ((uint32_t)1 << 8)     // ADC1 trigger source select
                                                                        // ADC1 software pretrigger sources
#define SIM_ADCOPT_ADC1SWPRETRG(_n)              (((uint32_t)(_n) & 0x7) << 9)
#define SIM_ADCOPT_ADC1SWPRETRG_INSERT(_v, _n)       (((_v) & ~0xe00) | ((uint32_t)(_n) & 0x7) << 9)
#define SIM_ADCOPT_ADC1SWPRETRG_EXTRACT(_v)          (((_v) >> 9) & 0x7)
                                                                        // ADC1 pretrigger source select
#define SIM_ADCOPT_ADC1PRETRGSEL(_n)             (((uint32_t)(_n) & 0x3) << 12)
#define SIM_ADCOPT_ADC1PRETRGSEL_INSERT(_v, _n)      (((_v) & ~0x3000) | ((uint32_t)(_n) & 0x3) << 12)
#define SIM_ADCOPT_ADC1PRETRGSEL_EXTRACT(_v)         (((_v) >> 12) & 0x3)

    uint32_t             FTMOPT1;                                       // FTM Option Register 1
#define SIM_FTMOPT1_FTM0SYNCBIT                  ((uint32_t)1 << 0)     // FTM0 Sync Bit
#define SIM_FTMOPT1_FTM1SYNCBIT                  ((uint32_t)1 << 1)     // FTM1 Sync Bit
#define SIM_FTMOPT1_FTM2SYNCBIT                  ((uint32_t)1 << 2)     // FTM2 Sync Bit
#define SIM_FTMOPT1_FTM3SYNCBIT                  ((uint32_t)1 << 3)     // FTM3 Sync Bit
                                                                        // FTM1 CH0 Select
#define SIM_FTMOPT1_FTM1CH0SEL(_n)               (((uint32_t)(_n) & 0x3) << 4)
#define SIM_FTMOPT1_FTM1CH0SEL_INSERT(_v, _n)        (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define SIM_FTMOPT1_FTM1CH0SEL_EXTRACT(_v)           (((_v) >> 4) & 0x3)
                                                                        // FTM2 CH0 Select
#define SIM_FTMOPT1_FTM2CH0SEL(_n)               (((uint32_t)(_n) & 0x3) << 6)
#define SIM_FTMOPT1_FTM2CH0SEL_INSERT(_v, _n)        (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define SIM_FTMOPT1_FTM2CH0SEL_EXTRACT(_v)           (((_v) >> 6) & 0x3)
#define SIM_FTMOPT1_FTM2CH1SEL                   ((uint32_t)1 << 8)     // FTM2 CH1 Select
#define SIM_FTMOPT1_FTMGLDOK                     ((uint32_t)1 << 15)    // FTM global load enable
                                                                        // FTM0 channel modulation select with FTM1_CH1
#define SIM_FTMOPT1_FTM0_OUTSEL(_n)              (((uint32_t)(_n) & 0xff) << 16)
#define SIM_FTMOPT1_FTM0_OUTSEL_INSERT(_v, _n)       (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define SIM_FTMOPT1_FTM0_OUTSEL_EXTRACT(_v)          (((_v) >> 16) & 0xff)
                                                                        // FTM3 channel modulation select with FTM2_CH1
#define SIM_FTMOPT1_FTM3_OUTSEL(_n)              (((uint32_t)(_n) & 0xff) << 24)
#define SIM_FTMOPT1_FTM3_OUTSEL_INSERT(_v, _n)       (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define SIM_FTMOPT1_FTM3_OUTSEL_EXTRACT(_v)          (((_v) >> 24) & 0xff)

    uint32_t             MISCTRL0;                                      // Miscellaneous control register 0
#define SIM_MISCTRL0_STOP1_MONITOR               ((uint32_t)1 << 9)     // STOP1 monitor bit
#define SIM_MISCTRL0_STOP2_MONITOR               ((uint32_t)1 << 10)    // STOP2 monitor bit
#define SIM_MISCTRL0_FTM0_OBE_CTRL               ((uint32_t)1 << 16)    // FTM0 OBE CTRL bit
#define SIM_MISCTRL0_FTM1_OBE_CTRL               ((uint32_t)1 << 17)    // FTM1 OBE CTRL bit
#define SIM_MISCTRL0_FTM2_OBE_CTRL               ((uint32_t)1 << 18)    // FTM2 OBE CTRL bit
#define SIM_MISCTRL0_FTM3_OBE_CTRL               ((uint32_t)1 << 19)    // FTM3 OBE CTRL bit

    const uint32_t       SDID;                                          // System Device Identification Register
                                                                        // Features
#define SIM_SDID_FEATURES_EXTRACT(_v)                (((_v) >> 0) & 0xff)
                                                                        // Package
#define SIM_SDID_PACKAGE_EXTRACT(_v)                 (((_v) >> 8) & 0xf)
                                                                        // Device revision number
#define SIM_SDID_REVID_EXTRACT(_v)                   (((_v) >> 12) & 0xf)
                                                                        // RAM size
#define SIM_SDID_RAMSIZE_EXTRACT(_v)                 (((_v) >> 16) & 0xf)
                                                                        // Derivate
#define SIM_SDID_DERIVATE_EXTRACT(_v)                (((_v) >> 20) & 0xf)
                                                                        // Subseries
#define SIM_SDID_SUBSERIES_EXTRACT(_v)               (((_v) >> 24) & 0xf)
                                                                        // S32K product series generation
#define SIM_SDID_GENERATION_EXTRACT(_v)              (((_v) >> 28) & 0xf)

    uint8_t _res3[24];
    uint32_t             PLATCGC;                                       // Platform Clock Gating Control Register
#define SIM_PLATCGC_CGCMSCM                      ((uint32_t)1 << 0)     // MSCM Clock Gating Control
#define SIM_PLATCGC_CGCMPU                       ((uint32_t)1 << 1)     // MPU Clock Gating Control
#define SIM_PLATCGC_CGCDMA                       ((uint32_t)1 << 2)     // DMA Clock Gating Control
#define SIM_PLATCGC_CGCERM                       ((uint32_t)1 << 3)     // ERM Clock Gating Control
#define SIM_PLATCGC_CGCEIM                       ((uint32_t)1 << 4)     // EIM Clock Gating Control

    uint8_t _res4[8];
    uint32_t             FCFG1;                                         // Flash Configuration Register 1
                                                                        // FlexNVM partition
#define SIM_FCFG1_DEPART(_n)                     (((uint32_t)(_n) & 0xf) << 12)
#define SIM_FCFG1_DEPART_INSERT(_v, _n)              (((_v) & ~0xf000) | ((uint32_t)(_n) & 0xf) << 12)
#define SIM_FCFG1_DEPART_EXTRACT(_v)                 (((_v) >> 12) & 0xf)
                                                                        // EEE SRAM SIZE
#define SIM_FCFG1_EEERAMSIZE(_n)                 (((uint32_t)(_n) & 0xf) << 16)
#define SIM_FCFG1_EEERAMSIZE_INSERT(_v, _n)          (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define SIM_FCFG1_EEERAMSIZE_EXTRACT(_v)             (((_v) >> 16) & 0xf)

    uint8_t _res5[4];
    const uint32_t       UIDH;                                          // Unique Identification Register High
    const uint32_t       UIDMH;                                         // Unique Identification Register Mid-High
    const uint32_t       UIDML;                                         // Unique Identification Register Mid Low
    const uint32_t       UIDL;                                          // Unique Identification Register Low
    uint8_t _res6[4];
    uint32_t             CLKDIV4;                                       // System Clock Divider Register 4
#define SIM_CLKDIV4_TRACEFRAC                    ((uint32_t)1 << 0)     // Trace Clock Divider fraction To configure TRACEDIV and TRACEFRAC, you must first clear TRACEDIVEN to disable the trace clock divide function.
                                                                        // Trace Clock Divider value To configure TRACEDIV, you must first disable TRACEDIVEN, then enable it after setting TRACEDIV.
#define SIM_CLKDIV4_TRACEDIV(_n)                 (((uint32_t)(_n) & 0x7) << 1)
#define SIM_CLKDIV4_TRACEDIV_INSERT(_v, _n)          (((_v) & ~0xe) | ((uint32_t)(_n) & 0x7) << 1)
#define SIM_CLKDIV4_TRACEDIV_EXTRACT(_v)             (((_v) >> 1) & 0x7)
#define SIM_CLKDIV4_TRACEDIVEN                   ((uint32_t)1 << 28)    // Debug Trace Divider control

    uint32_t             MISCTRL1;                                      // Miscellaneous Control register 1
#define SIM_MISCTRL1_SW_TRG                      ((uint32_t)1 << 0)     // Software trigger to TRGMUX. Writing to this bit generates software trigger to peripherals through TRGMUX (Refer to Figure: Trigger interconnectivity).

} SIM_regs_t;
                                                                        // --------------------
                                                                        // Pin Control and Interrupts
typedef struct                                                          // --------------------
{
    uint32_t             PCR0;                                          // Pin Control Register n
#define PORT_PCR0_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR0_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR0_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR0_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR0_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR0_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR0_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR0_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR0_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR0_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR1;                                          // Pin Control Register n
#define PORT_PCR1_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR1_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR1_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR1_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR1_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR1_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR1_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR1_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR1_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR1_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR2;                                          // Pin Control Register n
#define PORT_PCR2_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR2_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR2_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR2_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR2_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR2_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR2_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR2_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR2_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR2_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR3;                                          // Pin Control Register n
#define PORT_PCR3_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR3_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR3_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR3_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR3_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR3_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR3_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR3_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR3_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR3_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR4;                                          // Pin Control Register n
#define PORT_PCR4_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR4_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR4_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR4_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR4_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR4_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR4_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR4_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR4_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR4_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR5;                                          // Pin Control Register n
#define PORT_PCR5_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR5_PE                             ((uint32_t)1 << 1)     // Pull Enable
#define PORT_PCR5_PFE                            ((uint32_t)1 << 4)     // Passive Filter Enable
                                                                        // Pin Mux Control
#define PORT_PCR5_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR5_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR5_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR5_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR5_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR5_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR5_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR5_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR6;                                          // Pin Control Register n
#define PORT_PCR6_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR6_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR6_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR6_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR6_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR6_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR6_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR6_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR6_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR6_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR7;                                          // Pin Control Register n
#define PORT_PCR7_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR7_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR7_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR7_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR7_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR7_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR7_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR7_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR7_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR7_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR8;                                          // Pin Control Register n
#define PORT_PCR8_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR8_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR8_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR8_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR8_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR8_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR8_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR8_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR8_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR8_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR9;                                          // Pin Control Register n
#define PORT_PCR9_PS                             ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR9_PE                             ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR9_MUX(_n)                        (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR9_MUX_INSERT(_v, _n)                 (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR9_MUX_EXTRACT(_v)                    (((_v) >> 8) & 0x7)
#define PORT_PCR9_LK                             ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR9_IRQC(_n)                       (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR9_IRQC_INSERT(_v, _n)                (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR9_IRQC_EXTRACT(_v)                   (((_v) >> 16) & 0xf)
#define PORT_PCR9_ISF                            ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR10;                                         // Pin Control Register n
#define PORT_PCR10_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR10_PE                            ((uint32_t)1 << 1)     // Pull Enable
#define PORT_PCR10_DSE                           ((uint32_t)1 << 6)     // Drive Strength Enable
                                                                        // Pin Mux Control
#define PORT_PCR10_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR10_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR10_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR10_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR10_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR10_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR10_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR10_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR11;                                         // Pin Control Register n
#define PORT_PCR11_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR11_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR11_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR11_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR11_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR11_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR11_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR11_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR11_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR11_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR12;                                         // Pin Control Register n
#define PORT_PCR12_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR12_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR12_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR12_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR12_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR12_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR12_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR12_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR12_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR12_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR13;                                         // Pin Control Register n
#define PORT_PCR13_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR13_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR13_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR13_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR13_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR13_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR13_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR13_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR13_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR13_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR14;                                         // Pin Control Register n
#define PORT_PCR14_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR14_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR14_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR14_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR14_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR14_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR14_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR14_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR14_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR14_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR15;                                         // Pin Control Register n
#define PORT_PCR15_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR15_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR15_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR15_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR15_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR15_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR15_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR15_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR15_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR15_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR16;                                         // Pin Control Register n
#define PORT_PCR16_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR16_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR16_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR16_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR16_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR16_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR16_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR16_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR16_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR16_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR17;                                         // Pin Control Register n
#define PORT_PCR17_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR17_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR17_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR17_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR17_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR17_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR17_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR17_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR17_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR17_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR18;                                         // Pin Control Register n
#define PORT_PCR18_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR18_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR18_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR18_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR18_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR18_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR18_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR18_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR18_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR18_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR19;                                         // Pin Control Register n
#define PORT_PCR19_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR19_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR19_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR19_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR19_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR19_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR19_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR19_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR19_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR19_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR20;                                         // Pin Control Register n
#define PORT_PCR20_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR20_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR20_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR20_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR20_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR20_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR20_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR20_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR20_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR20_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR21;                                         // Pin Control Register n
#define PORT_PCR21_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR21_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR21_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR21_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR21_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR21_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR21_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR21_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR21_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR21_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR22;                                         // Pin Control Register n
#define PORT_PCR22_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR22_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR22_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR22_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR22_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR22_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR22_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR22_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR22_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR22_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR23;                                         // Pin Control Register n
#define PORT_PCR23_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR23_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR23_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR23_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR23_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR23_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR23_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR23_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR23_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR23_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR24;                                         // Pin Control Register n
#define PORT_PCR24_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR24_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR24_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR24_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR24_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR24_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR24_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR24_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR24_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR24_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR25;                                         // Pin Control Register n
#define PORT_PCR25_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR25_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR25_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR25_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR25_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR25_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR25_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR25_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR25_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR25_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR26;                                         // Pin Control Register n
#define PORT_PCR26_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR26_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR26_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR26_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR26_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR26_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR26_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR26_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR26_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR26_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR27;                                         // Pin Control Register n
#define PORT_PCR27_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR27_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR27_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR27_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR27_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR27_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR27_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR27_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR27_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR27_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR28;                                         // Pin Control Register n
#define PORT_PCR28_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR28_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR28_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR28_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR28_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR28_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR28_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR28_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR28_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR28_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR29;                                         // Pin Control Register n
#define PORT_PCR29_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR29_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR29_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR29_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR29_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR29_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR29_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR29_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR29_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR29_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR30;                                         // Pin Control Register n
#define PORT_PCR30_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR30_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR30_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR30_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR30_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR30_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR30_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR30_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR30_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR30_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             PCR31;                                         // Pin Control Register n
#define PORT_PCR31_PS                            ((uint32_t)1 << 0)     // Pull Select
#define PORT_PCR31_PE                            ((uint32_t)1 << 1)     // Pull Enable
                                                                        // Pin Mux Control
#define PORT_PCR31_MUX(_n)                       (((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR31_MUX_INSERT(_v, _n)                (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define PORT_PCR31_MUX_EXTRACT(_v)                   (((_v) >> 8) & 0x7)
#define PORT_PCR31_LK                            ((uint32_t)1 << 15)    // Lock Register
                                                                        // Interrupt Configuration
#define PORT_PCR31_IRQC(_n)                      (((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR31_IRQC_INSERT(_v, _n)               (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define PORT_PCR31_IRQC_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
#define PORT_PCR31_ISF                           ((uint32_t)1 << 24)    // Interrupt Status Flag

    uint32_t             GPCLR;                                         // Global Pin Control Low Register
                                                                        // Global Pin Write Data
#define PORT_GPCLR_GPWD(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PORT_GPCLR_GPWD_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
                                                                        // Global Pin Write Enable
#define PORT_GPCLR_GPWE(_n)                      (((uint32_t)(_n) & 0xffff) << 16)
#define PORT_GPCLR_GPWE_INSERT(_v, _n)               (((_v) & ~0xffff0000) | ((uint32_t)(_n) & 0xffff) << 16)

    uint32_t             GPCHR;                                         // Global Pin Control High Register
                                                                        // Global Pin Write Data
#define PORT_GPCHR_GPWD(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PORT_GPCHR_GPWD_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
                                                                        // Global Pin Write Enable
#define PORT_GPCHR_GPWE(_n)                      (((uint32_t)(_n) & 0xffff) << 16)
#define PORT_GPCHR_GPWE_INSERT(_v, _n)               (((_v) & ~0xffff0000) | ((uint32_t)(_n) & 0xffff) << 16)

    uint32_t             GICLR;                                         // Global Interrupt Control Low Register
                                                                        // Global Interrupt Write Enable
#define PORT_GICLR_GIWE(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PORT_GICLR_GIWE_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
                                                                        // Global Interrupt Write Data
#define PORT_GICLR_GIWD(_n)                      (((uint32_t)(_n) & 0xffff) << 16)
#define PORT_GICLR_GIWD_INSERT(_v, _n)               (((_v) & ~0xffff0000) | ((uint32_t)(_n) & 0xffff) << 16)

    uint32_t             GICHR;                                         // Global Interrupt Control High Register
                                                                        // Global Interrupt Write Enable
#define PORT_GICHR_GIWE(_n)                      (((uint32_t)(_n) & 0xffff) << 0)
#define PORT_GICHR_GIWE_INSERT(_v, _n)               (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
                                                                        // Global Interrupt Write Data
#define PORT_GICHR_GIWD(_n)                      (((uint32_t)(_n) & 0xffff) << 16)
#define PORT_GICHR_GIWD_INSERT(_v, _n)               (((_v) & ~0xffff0000) | ((uint32_t)(_n) & 0xffff) << 16)

    uint8_t _res0[16];
    uint32_t             ISFR;                                          // Interrupt Status Flag Register
    uint8_t _res1[28];
    uint32_t             DFER;                                          // Digital Filter Enable Register
    uint32_t             DFCR;                                          // Digital Filter Clock Register
#define PORT_DFCR_CS                             ((uint32_t)1 << 0)     // Clock Source

    uint32_t             DFWR;                                          // Digital Filter Width Register
                                                                        // Filter Length
#define PORT_DFWR_FILT(_n)                       (((uint32_t)(_n) & 0x1f) << 0)
#define PORT_DFWR_FILT_INSERT(_v, _n)                (((_v) & ~0x1f) | ((uint32_t)(_n) & 0x1f) << 0)
#define PORT_DFWR_FILT_EXTRACT(_v)                   (((_v) >> 0) & 0x1f)

} PORT_regs_t;
                                                                        // --------------------
                                                                        // Watchdog timer
typedef struct                                                          // --------------------
{
    uint32_t             CS;                                            // Watchdog Control and Status Register
#define WDOG_CS_STOP                             ((uint32_t)1 << 0)     // Stop Enable
#define WDOG_CS_WAIT                             ((uint32_t)1 << 1)     // Wait Enable
#define WDOG_CS_DBG                              ((uint32_t)1 << 2)     // Debug Enable
                                                                        // Watchdog Test
#define WDOG_CS_TST(_n)                          (((uint32_t)(_n) & 0x3) << 3)
#define WDOG_CS_TST_INSERT(_v, _n)                   (((_v) & ~0x18) | ((uint32_t)(_n) & 0x3) << 3)
#define WDOG_CS_TST_EXTRACT(_v)                      (((_v) >> 3) & 0x3)
#define WDOG_CS_UPDATE                           ((uint32_t)1 << 5)     // Allow updates
#define WDOG_CS_INT                              ((uint32_t)1 << 6)     // Watchdog Interrupt
#define WDOG_CS_EN                               ((uint32_t)1 << 7)     // Watchdog Enable
                                                                        // Watchdog Clock
#define WDOG_CS_CLK(_n)                          (((uint32_t)(_n) & 0x3) << 8)
#define WDOG_CS_CLK_INSERT(_v, _n)                   (((_v) & ~0x300) | ((uint32_t)(_n) & 0x3) << 8)
#define WDOG_CS_CLK_EXTRACT(_v)                      (((_v) >> 8) & 0x3)
#define WDOG_CS_RCS                              ((uint32_t)1 << 10)    // Reconfiguration Success
#define WDOG_CS_ULK                              ((uint32_t)1 << 11)    // Unlock status
#define WDOG_CS_PRES                             ((uint32_t)1 << 12)    // Watchdog prescaler
#define WDOG_CS_CMD32EN                          ((uint32_t)1 << 13)    // Enables or disables WDOG support for 32-bit (otherwise 16-bit or 8-bit) refresh/unlock command write words
#define WDOG_CS_FLG                              ((uint32_t)1 << 14)    // Watchdog Interrupt Flag
#define WDOG_CS_WIN                              ((uint32_t)1 << 15)    // Watchdog Window

    uint32_t             CNT;                                           // Watchdog Counter Register
                                                                        // Low byte of the Watchdog Counter
#define WDOG_CNT_CNTLOW(_n)                      (((uint32_t)(_n) & 0xff) << 0)
#define WDOG_CNT_CNTLOW_INSERT(_v, _n)               (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define WDOG_CNT_CNTLOW_EXTRACT(_v)                  (((_v) >> 0) & 0xff)
                                                                        // High byte of the Watchdog Counter
#define WDOG_CNT_CNTHIGH(_n)                     (((uint32_t)(_n) & 0xff) << 8)
#define WDOG_CNT_CNTHIGH_INSERT(_v, _n)              (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define WDOG_CNT_CNTHIGH_EXTRACT(_v)                 (((_v) >> 8) & 0xff)

    uint32_t             TOVAL;                                         // Watchdog Timeout Value Register
                                                                        // Low byte of the timeout value
#define WDOG_TOVAL_TOVALLOW(_n)                  (((uint32_t)(_n) & 0xff) << 0)
#define WDOG_TOVAL_TOVALLOW_INSERT(_v, _n)           (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define WDOG_TOVAL_TOVALLOW_EXTRACT(_v)              (((_v) >> 0) & 0xff)
                                                                        // High byte of the timeout value
#define WDOG_TOVAL_TOVALHIGH(_n)                 (((uint32_t)(_n) & 0xff) << 8)
#define WDOG_TOVAL_TOVALHIGH_INSERT(_v, _n)          (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define WDOG_TOVAL_TOVALHIGH_EXTRACT(_v)             (((_v) >> 8) & 0xff)

    uint32_t             WIN;                                           // Watchdog Window Register
                                                                        // Low byte of Watchdog Window
#define WDOG_WIN_WINLOW(_n)                      (((uint32_t)(_n) & 0xff) << 0)
#define WDOG_WIN_WINLOW_INSERT(_v, _n)               (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define WDOG_WIN_WINLOW_EXTRACT(_v)                  (((_v) >> 0) & 0xff)
                                                                        // High byte of Watchdog Window
#define WDOG_WIN_WINHIGH(_n)                     (((uint32_t)(_n) & 0xff) << 8)
#define WDOG_WIN_WINHIGH_INSERT(_v, _n)              (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define WDOG_WIN_WINHIGH_EXTRACT(_v)                 (((_v) >> 8) & 0xff)

} WDOG_regs_t;
                                                                        // --------------------
                                                                        // The FLEXIO Memory Map/Register Definition can be found here.
typedef struct                                                          // --------------------
{
    const uint32_t       VERID;                                         // Version ID Register
                                                                        // Feature Specification Number
#define FLEXIO_VERID_FEATURE_EXTRACT(_v)             (((_v) >> 0) & 0xffff)
                                                                        // Minor Version Number
#define FLEXIO_VERID_MINOR_EXTRACT(_v)               (((_v) >> 16) & 0xff)
                                                                        // Major Version Number
#define FLEXIO_VERID_MAJOR_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    const uint32_t       PARAM;                                         // Parameter Register
                                                                        // Shifter Number
#define FLEXIO_PARAM_SHIFTER_EXTRACT(_v)             (((_v) >> 0) & 0xff)
                                                                        // Timer Number
#define FLEXIO_PARAM_TIMER_EXTRACT(_v)               (((_v) >> 8) & 0xff)
                                                                        // Pin Number
#define FLEXIO_PARAM_PIN_EXTRACT(_v)                 (((_v) >> 16) & 0xff)
                                                                        // Trigger Number
#define FLEXIO_PARAM_TRIGGER_EXTRACT(_v)             (((_v) >> 24) & 0xff)

    uint32_t             CTRL;                                          // FlexIO Control Register
#define FLEXIO_CTRL_FLEXEN                       ((uint32_t)1 << 0)     // FlexIO Enable
#define FLEXIO_CTRL_SWRST                        ((uint32_t)1 << 1)     // Software Reset
#define FLEXIO_CTRL_FASTACC                      ((uint32_t)1 << 2)     // Fast Access
#define FLEXIO_CTRL_DBGE                         ((uint32_t)1 << 30)    // Debug Enable
#define FLEXIO_CTRL_DOZEN                        ((uint32_t)1 << 31)    // Doze Enable

    const uint32_t       PIN;                                           // Pin State Register
                                                                        // Pin Data Input
#define FLEXIO_PIN_PDI_EXTRACT(_v)                   (((_v) >> 0) & 0xff)

    uint32_t             SHIFTSTAT;                                     // Shifter Status Register
                                                                        // Shifter Status Flag
#define FLEXIO_SHIFTSTAT_SSF(_n)                 (((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTSTAT_SSF_INSERT(_v, _n)          (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTSTAT_SSF_EXTRACT(_v)             (((_v) >> 0) & 0xf)

    uint32_t             SHIFTERR;                                      // Shifter Error Register
                                                                        // Shifter Error Flags
#define FLEXIO_SHIFTERR_SEF(_n)                  (((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTERR_SEF_INSERT(_v, _n)           (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTERR_SEF_EXTRACT(_v)              (((_v) >> 0) & 0xf)

    uint32_t             TIMSTAT;                                       // Timer Status Register
                                                                        // Timer Status Flags
#define FLEXIO_TIMSTAT_TSF(_n)                   (((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_TIMSTAT_TSF_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_TIMSTAT_TSF_EXTRACT(_v)               (((_v) >> 0) & 0xf)

    uint8_t _res0[4];
    uint32_t             SHIFTSIEN;                                     // Shifter Status Interrupt Enable
                                                                        // Shifter Status Interrupt Enable
#define FLEXIO_SHIFTSIEN_SSIE(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTSIEN_SSIE_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTSIEN_SSIE_EXTRACT(_v)            (((_v) >> 0) & 0xf)

    uint32_t             SHIFTEIEN;                                     // Shifter Error Interrupt Enable
                                                                        // Shifter Error Interrupt Enable
#define FLEXIO_SHIFTEIEN_SEIE(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTEIEN_SEIE_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTEIEN_SEIE_EXTRACT(_v)            (((_v) >> 0) & 0xf)

    uint32_t             TIMIEN;                                        // Timer Interrupt Enable Register
                                                                        // Timer Status Interrupt Enable
#define FLEXIO_TIMIEN_TEIE(_n)                   (((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_TIMIEN_TEIE_INSERT(_v, _n)            (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_TIMIEN_TEIE_EXTRACT(_v)               (((_v) >> 0) & 0xf)

    uint8_t _res1[4];
    uint32_t             SHIFTSDEN;                                     // Shifter Status DMA Enable
                                                                        // Shifter Status DMA Enable
#define FLEXIO_SHIFTSDEN_SSDE(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTSDEN_SSDE_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define FLEXIO_SHIFTSDEN_SSDE_EXTRACT(_v)            (((_v) >> 0) & 0xf)

    uint8_t _res2[76];
    uint32_t             SHIFTCTL0;                                     // Shifter Control N Register
                                                                        // Shifter Mode
#define FLEXIO_SHIFTCTL0_SMOD(_n)                (((uint32_t)(_n) & 0x7) << 0)
#define FLEXIO_SHIFTCTL0_SMOD_INSERT(_v, _n)         (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define FLEXIO_SHIFTCTL0_SMOD_EXTRACT(_v)            (((_v) >> 0) & 0x7)
#define FLEXIO_SHIFTCTL0_PINPOL                  ((uint32_t)1 << 7)     // Shifter Pin Polarity
                                                                        // Shifter Pin Select
#define FLEXIO_SHIFTCTL0_PINSEL(_n)              (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_SHIFTCTL0_PINSEL_INSERT(_v, _n)       (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_SHIFTCTL0_PINSEL_EXTRACT(_v)          (((_v) >> 8) & 0x7)
                                                                        // Shifter Pin Configuration
#define FLEXIO_SHIFTCTL0_PINCFG(_n)              (((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_SHIFTCTL0_PINCFG_INSERT(_v, _n)       (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_SHIFTCTL0_PINCFG_EXTRACT(_v)          (((_v) >> 16) & 0x3)
#define FLEXIO_SHIFTCTL0_TIMPOL                  ((uint32_t)1 << 23)    // Timer Polarity
                                                                        // Timer Select
#define FLEXIO_SHIFTCTL0_TIMSEL(_n)              (((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_SHIFTCTL0_TIMSEL_INSERT(_v, _n)       (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_SHIFTCTL0_TIMSEL_EXTRACT(_v)          (((_v) >> 24) & 0x3)

    uint32_t             SHIFTCTL1;                                     // Shifter Control N Register
                                                                        // Shifter Mode
#define FLEXIO_SHIFTCTL1_SMOD(_n)                (((uint32_t)(_n) & 0x7) << 0)
#define FLEXIO_SHIFTCTL1_SMOD_INSERT(_v, _n)         (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define FLEXIO_SHIFTCTL1_SMOD_EXTRACT(_v)            (((_v) >> 0) & 0x7)
#define FLEXIO_SHIFTCTL1_PINPOL                  ((uint32_t)1 << 7)     // Shifter Pin Polarity
                                                                        // Shifter Pin Select
#define FLEXIO_SHIFTCTL1_PINSEL(_n)              (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_SHIFTCTL1_PINSEL_INSERT(_v, _n)       (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_SHIFTCTL1_PINSEL_EXTRACT(_v)          (((_v) >> 8) & 0x7)
                                                                        // Shifter Pin Configuration
#define FLEXIO_SHIFTCTL1_PINCFG(_n)              (((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_SHIFTCTL1_PINCFG_INSERT(_v, _n)       (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_SHIFTCTL1_PINCFG_EXTRACT(_v)          (((_v) >> 16) & 0x3)
#define FLEXIO_SHIFTCTL1_TIMPOL                  ((uint32_t)1 << 23)    // Timer Polarity
                                                                        // Timer Select
#define FLEXIO_SHIFTCTL1_TIMSEL(_n)              (((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_SHIFTCTL1_TIMSEL_INSERT(_v, _n)       (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_SHIFTCTL1_TIMSEL_EXTRACT(_v)          (((_v) >> 24) & 0x3)

    uint32_t             SHIFTCTL2;                                     // Shifter Control N Register
                                                                        // Shifter Mode
#define FLEXIO_SHIFTCTL2_SMOD(_n)                (((uint32_t)(_n) & 0x7) << 0)
#define FLEXIO_SHIFTCTL2_SMOD_INSERT(_v, _n)         (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define FLEXIO_SHIFTCTL2_SMOD_EXTRACT(_v)            (((_v) >> 0) & 0x7)
#define FLEXIO_SHIFTCTL2_PINPOL                  ((uint32_t)1 << 7)     // Shifter Pin Polarity
                                                                        // Shifter Pin Select
#define FLEXIO_SHIFTCTL2_PINSEL(_n)              (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_SHIFTCTL2_PINSEL_INSERT(_v, _n)       (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_SHIFTCTL2_PINSEL_EXTRACT(_v)          (((_v) >> 8) & 0x7)
                                                                        // Shifter Pin Configuration
#define FLEXIO_SHIFTCTL2_PINCFG(_n)              (((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_SHIFTCTL2_PINCFG_INSERT(_v, _n)       (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_SHIFTCTL2_PINCFG_EXTRACT(_v)          (((_v) >> 16) & 0x3)
#define FLEXIO_SHIFTCTL2_TIMPOL                  ((uint32_t)1 << 23)    // Timer Polarity
                                                                        // Timer Select
#define FLEXIO_SHIFTCTL2_TIMSEL(_n)              (((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_SHIFTCTL2_TIMSEL_INSERT(_v, _n)       (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_SHIFTCTL2_TIMSEL_EXTRACT(_v)          (((_v) >> 24) & 0x3)

    uint32_t             SHIFTCTL3;                                     // Shifter Control N Register
                                                                        // Shifter Mode
#define FLEXIO_SHIFTCTL3_SMOD(_n)                (((uint32_t)(_n) & 0x7) << 0)
#define FLEXIO_SHIFTCTL3_SMOD_INSERT(_v, _n)         (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define FLEXIO_SHIFTCTL3_SMOD_EXTRACT(_v)            (((_v) >> 0) & 0x7)
#define FLEXIO_SHIFTCTL3_PINPOL                  ((uint32_t)1 << 7)     // Shifter Pin Polarity
                                                                        // Shifter Pin Select
#define FLEXIO_SHIFTCTL3_PINSEL(_n)              (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_SHIFTCTL3_PINSEL_INSERT(_v, _n)       (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_SHIFTCTL3_PINSEL_EXTRACT(_v)          (((_v) >> 8) & 0x7)
                                                                        // Shifter Pin Configuration
#define FLEXIO_SHIFTCTL3_PINCFG(_n)              (((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_SHIFTCTL3_PINCFG_INSERT(_v, _n)       (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_SHIFTCTL3_PINCFG_EXTRACT(_v)          (((_v) >> 16) & 0x3)
#define FLEXIO_SHIFTCTL3_TIMPOL                  ((uint32_t)1 << 23)    // Timer Polarity
                                                                        // Timer Select
#define FLEXIO_SHIFTCTL3_TIMSEL(_n)              (((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_SHIFTCTL3_TIMSEL_INSERT(_v, _n)       (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_SHIFTCTL3_TIMSEL_EXTRACT(_v)          (((_v) >> 24) & 0x3)

    uint8_t _res3[112];
    uint32_t             SHIFTCFG0;                                     // Shifter Configuration N Register
                                                                        // Shifter Start bit
#define FLEXIO_SHIFTCFG0_SSTART(_n)              (((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_SHIFTCFG0_SSTART_INSERT(_v, _n)       (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_SHIFTCFG0_SSTART_EXTRACT(_v)          (((_v) >> 0) & 0x3)
                                                                        // Shifter Stop bit
#define FLEXIO_SHIFTCFG0_SSTOP(_n)               (((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_SHIFTCFG0_SSTOP_INSERT(_v, _n)        (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_SHIFTCFG0_SSTOP_EXTRACT(_v)           (((_v) >> 4) & 0x3)
#define FLEXIO_SHIFTCFG0_INSRC                   ((uint32_t)1 << 8)     // Input Source

    uint32_t             SHIFTCFG1;                                     // Shifter Configuration N Register
                                                                        // Shifter Start bit
#define FLEXIO_SHIFTCFG1_SSTART(_n)              (((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_SHIFTCFG1_SSTART_INSERT(_v, _n)       (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_SHIFTCFG1_SSTART_EXTRACT(_v)          (((_v) >> 0) & 0x3)
                                                                        // Shifter Stop bit
#define FLEXIO_SHIFTCFG1_SSTOP(_n)               (((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_SHIFTCFG1_SSTOP_INSERT(_v, _n)        (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_SHIFTCFG1_SSTOP_EXTRACT(_v)           (((_v) >> 4) & 0x3)
#define FLEXIO_SHIFTCFG1_INSRC                   ((uint32_t)1 << 8)     // Input Source

    uint32_t             SHIFTCFG2;                                     // Shifter Configuration N Register
                                                                        // Shifter Start bit
#define FLEXIO_SHIFTCFG2_SSTART(_n)              (((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_SHIFTCFG2_SSTART_INSERT(_v, _n)       (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_SHIFTCFG2_SSTART_EXTRACT(_v)          (((_v) >> 0) & 0x3)
                                                                        // Shifter Stop bit
#define FLEXIO_SHIFTCFG2_SSTOP(_n)               (((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_SHIFTCFG2_SSTOP_INSERT(_v, _n)        (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_SHIFTCFG2_SSTOP_EXTRACT(_v)           (((_v) >> 4) & 0x3)
#define FLEXIO_SHIFTCFG2_INSRC                   ((uint32_t)1 << 8)     // Input Source

    uint32_t             SHIFTCFG3;                                     // Shifter Configuration N Register
                                                                        // Shifter Start bit
#define FLEXIO_SHIFTCFG3_SSTART(_n)              (((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_SHIFTCFG3_SSTART_INSERT(_v, _n)       (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_SHIFTCFG3_SSTART_EXTRACT(_v)          (((_v) >> 0) & 0x3)
                                                                        // Shifter Stop bit
#define FLEXIO_SHIFTCFG3_SSTOP(_n)               (((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_SHIFTCFG3_SSTOP_INSERT(_v, _n)        (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_SHIFTCFG3_SSTOP_EXTRACT(_v)           (((_v) >> 4) & 0x3)
#define FLEXIO_SHIFTCFG3_INSRC                   ((uint32_t)1 << 8)     // Input Source

    uint8_t _res4[240];
    uint32_t             SHIFTBUF0;                                     // Shifter Buffer N Register
    uint32_t             SHIFTBUF1;                                     // Shifter Buffer N Register
    uint32_t             SHIFTBUF2;                                     // Shifter Buffer N Register
    uint32_t             SHIFTBUF3;                                     // Shifter Buffer N Register
    uint8_t _res5[112];
    uint32_t             SHIFTBUFBIS0;                                  // Shifter Buffer N Bit Swapped Register
    uint32_t             SHIFTBUFBIS1;                                  // Shifter Buffer N Bit Swapped Register
    uint32_t             SHIFTBUFBIS2;                                  // Shifter Buffer N Bit Swapped Register
    uint32_t             SHIFTBUFBIS3;                                  // Shifter Buffer N Bit Swapped Register
    uint8_t _res6[112];
    uint32_t             SHIFTBUFBYS0;                                  // Shifter Buffer N Byte Swapped Register
    uint32_t             SHIFTBUFBYS1;                                  // Shifter Buffer N Byte Swapped Register
    uint32_t             SHIFTBUFBYS2;                                  // Shifter Buffer N Byte Swapped Register
    uint32_t             SHIFTBUFBYS3;                                  // Shifter Buffer N Byte Swapped Register
    uint8_t _res7[112];
    uint32_t             SHIFTBUFBBS0;                                  // Shifter Buffer N Bit Byte Swapped Register
    uint32_t             SHIFTBUFBBS1;                                  // Shifter Buffer N Bit Byte Swapped Register
    uint32_t             SHIFTBUFBBS2;                                  // Shifter Buffer N Bit Byte Swapped Register
    uint32_t             SHIFTBUFBBS3;                                  // Shifter Buffer N Bit Byte Swapped Register
    uint8_t _res8[112];
    uint32_t             TIMCTL0;                                       // Timer Control N Register
                                                                        // Timer Mode
#define FLEXIO_TIMCTL0_TIMOD(_n)                 (((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_TIMCTL0_TIMOD_INSERT(_v, _n)          (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_TIMCTL0_TIMOD_EXTRACT(_v)             (((_v) >> 0) & 0x3)
#define FLEXIO_TIMCTL0_PINPOL                    ((uint32_t)1 << 7)     // Timer Pin Polarity
                                                                        // Timer Pin Select
#define FLEXIO_TIMCTL0_PINSEL(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCTL0_PINSEL_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCTL0_PINSEL_EXTRACT(_v)            (((_v) >> 8) & 0x7)
                                                                        // Timer Pin Configuration
#define FLEXIO_TIMCTL0_PINCFG(_n)                (((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_TIMCTL0_PINCFG_INSERT(_v, _n)         (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_TIMCTL0_PINCFG_EXTRACT(_v)            (((_v) >> 16) & 0x3)
#define FLEXIO_TIMCTL0_TRGSRC                    ((uint32_t)1 << 22)    // Trigger Source
#define FLEXIO_TIMCTL0_TRGPOL                    ((uint32_t)1 << 23)    // Trigger Polarity
                                                                        // Trigger Select
#define FLEXIO_TIMCTL0_TRGSEL(_n)                (((uint32_t)(_n) & 0xf) << 24)
#define FLEXIO_TIMCTL0_TRGSEL_INSERT(_v, _n)         (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define FLEXIO_TIMCTL0_TRGSEL_EXTRACT(_v)            (((_v) >> 24) & 0xf)

    uint32_t             TIMCTL1;                                       // Timer Control N Register
                                                                        // Timer Mode
#define FLEXIO_TIMCTL1_TIMOD(_n)                 (((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_TIMCTL1_TIMOD_INSERT(_v, _n)          (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_TIMCTL1_TIMOD_EXTRACT(_v)             (((_v) >> 0) & 0x3)
#define FLEXIO_TIMCTL1_PINPOL                    ((uint32_t)1 << 7)     // Timer Pin Polarity
                                                                        // Timer Pin Select
#define FLEXIO_TIMCTL1_PINSEL(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCTL1_PINSEL_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCTL1_PINSEL_EXTRACT(_v)            (((_v) >> 8) & 0x7)
                                                                        // Timer Pin Configuration
#define FLEXIO_TIMCTL1_PINCFG(_n)                (((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_TIMCTL1_PINCFG_INSERT(_v, _n)         (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_TIMCTL1_PINCFG_EXTRACT(_v)            (((_v) >> 16) & 0x3)
#define FLEXIO_TIMCTL1_TRGSRC                    ((uint32_t)1 << 22)    // Trigger Source
#define FLEXIO_TIMCTL1_TRGPOL                    ((uint32_t)1 << 23)    // Trigger Polarity
                                                                        // Trigger Select
#define FLEXIO_TIMCTL1_TRGSEL(_n)                (((uint32_t)(_n) & 0xf) << 24)
#define FLEXIO_TIMCTL1_TRGSEL_INSERT(_v, _n)         (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define FLEXIO_TIMCTL1_TRGSEL_EXTRACT(_v)            (((_v) >> 24) & 0xf)

    uint32_t             TIMCTL2;                                       // Timer Control N Register
                                                                        // Timer Mode
#define FLEXIO_TIMCTL2_TIMOD(_n)                 (((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_TIMCTL2_TIMOD_INSERT(_v, _n)          (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_TIMCTL2_TIMOD_EXTRACT(_v)             (((_v) >> 0) & 0x3)
#define FLEXIO_TIMCTL2_PINPOL                    ((uint32_t)1 << 7)     // Timer Pin Polarity
                                                                        // Timer Pin Select
#define FLEXIO_TIMCTL2_PINSEL(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCTL2_PINSEL_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCTL2_PINSEL_EXTRACT(_v)            (((_v) >> 8) & 0x7)
                                                                        // Timer Pin Configuration
#define FLEXIO_TIMCTL2_PINCFG(_n)                (((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_TIMCTL2_PINCFG_INSERT(_v, _n)         (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_TIMCTL2_PINCFG_EXTRACT(_v)            (((_v) >> 16) & 0x3)
#define FLEXIO_TIMCTL2_TRGSRC                    ((uint32_t)1 << 22)    // Trigger Source
#define FLEXIO_TIMCTL2_TRGPOL                    ((uint32_t)1 << 23)    // Trigger Polarity
                                                                        // Trigger Select
#define FLEXIO_TIMCTL2_TRGSEL(_n)                (((uint32_t)(_n) & 0xf) << 24)
#define FLEXIO_TIMCTL2_TRGSEL_INSERT(_v, _n)         (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define FLEXIO_TIMCTL2_TRGSEL_EXTRACT(_v)            (((_v) >> 24) & 0xf)

    uint32_t             TIMCTL3;                                       // Timer Control N Register
                                                                        // Timer Mode
#define FLEXIO_TIMCTL3_TIMOD(_n)                 (((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_TIMCTL3_TIMOD_INSERT(_v, _n)          (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define FLEXIO_TIMCTL3_TIMOD_EXTRACT(_v)             (((_v) >> 0) & 0x3)
#define FLEXIO_TIMCTL3_PINPOL                    ((uint32_t)1 << 7)     // Timer Pin Polarity
                                                                        // Timer Pin Select
#define FLEXIO_TIMCTL3_PINSEL(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCTL3_PINSEL_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCTL3_PINSEL_EXTRACT(_v)            (((_v) >> 8) & 0x7)
                                                                        // Timer Pin Configuration
#define FLEXIO_TIMCTL3_PINCFG(_n)                (((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_TIMCTL3_PINCFG_INSERT(_v, _n)         (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define FLEXIO_TIMCTL3_PINCFG_EXTRACT(_v)            (((_v) >> 16) & 0x3)
#define FLEXIO_TIMCTL3_TRGSRC                    ((uint32_t)1 << 22)    // Trigger Source
#define FLEXIO_TIMCTL3_TRGPOL                    ((uint32_t)1 << 23)    // Trigger Polarity
                                                                        // Trigger Select
#define FLEXIO_TIMCTL3_TRGSEL(_n)                (((uint32_t)(_n) & 0xf) << 24)
#define FLEXIO_TIMCTL3_TRGSEL_INSERT(_v, _n)         (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define FLEXIO_TIMCTL3_TRGSEL_EXTRACT(_v)            (((_v) >> 24) & 0xf)

    uint8_t _res9[112];
    uint32_t             TIMCFG0;                                       // Timer Configuration N Register
#define FLEXIO_TIMCFG0_TSTART                    ((uint32_t)1 << 1)     // Timer Start Bit
                                                                        // Timer Stop Bit
#define FLEXIO_TIMCFG0_TSTOP(_n)                 (((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_TIMCFG0_TSTOP_INSERT(_v, _n)          (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_TIMCFG0_TSTOP_EXTRACT(_v)             (((_v) >> 4) & 0x3)
                                                                        // Timer Enable
#define FLEXIO_TIMCFG0_TIMENA(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCFG0_TIMENA_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCFG0_TIMENA_EXTRACT(_v)            (((_v) >> 8) & 0x7)
                                                                        // Timer Disable
#define FLEXIO_TIMCFG0_TIMDIS(_n)                (((uint32_t)(_n) & 0x7) << 12)
#define FLEXIO_TIMCFG0_TIMDIS_INSERT(_v, _n)         (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define FLEXIO_TIMCFG0_TIMDIS_EXTRACT(_v)            (((_v) >> 12) & 0x7)
                                                                        // Timer Reset
#define FLEXIO_TIMCFG0_TIMRST(_n)                (((uint32_t)(_n) & 0x7) << 16)
#define FLEXIO_TIMCFG0_TIMRST_INSERT(_v, _n)         (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define FLEXIO_TIMCFG0_TIMRST_EXTRACT(_v)            (((_v) >> 16) & 0x7)
                                                                        // Timer Decrement
#define FLEXIO_TIMCFG0_TIMDEC(_n)                (((uint32_t)(_n) & 0x3) << 20)
#define FLEXIO_TIMCFG0_TIMDEC_INSERT(_v, _n)         (((_v) & ~0x300000) | ((uint32_t)(_n) & 0x3) << 20)
#define FLEXIO_TIMCFG0_TIMDEC_EXTRACT(_v)            (((_v) >> 20) & 0x3)
                                                                        // Timer Output
#define FLEXIO_TIMCFG0_TIMOUT(_n)                (((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_TIMCFG0_TIMOUT_INSERT(_v, _n)         (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_TIMCFG0_TIMOUT_EXTRACT(_v)            (((_v) >> 24) & 0x3)

    uint32_t             TIMCFG1;                                       // Timer Configuration N Register
#define FLEXIO_TIMCFG1_TSTART                    ((uint32_t)1 << 1)     // Timer Start Bit
                                                                        // Timer Stop Bit
#define FLEXIO_TIMCFG1_TSTOP(_n)                 (((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_TIMCFG1_TSTOP_INSERT(_v, _n)          (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_TIMCFG1_TSTOP_EXTRACT(_v)             (((_v) >> 4) & 0x3)
                                                                        // Timer Enable
#define FLEXIO_TIMCFG1_TIMENA(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCFG1_TIMENA_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCFG1_TIMENA_EXTRACT(_v)            (((_v) >> 8) & 0x7)
                                                                        // Timer Disable
#define FLEXIO_TIMCFG1_TIMDIS(_n)                (((uint32_t)(_n) & 0x7) << 12)
#define FLEXIO_TIMCFG1_TIMDIS_INSERT(_v, _n)         (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define FLEXIO_TIMCFG1_TIMDIS_EXTRACT(_v)            (((_v) >> 12) & 0x7)
                                                                        // Timer Reset
#define FLEXIO_TIMCFG1_TIMRST(_n)                (((uint32_t)(_n) & 0x7) << 16)
#define FLEXIO_TIMCFG1_TIMRST_INSERT(_v, _n)         (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define FLEXIO_TIMCFG1_TIMRST_EXTRACT(_v)            (((_v) >> 16) & 0x7)
                                                                        // Timer Decrement
#define FLEXIO_TIMCFG1_TIMDEC(_n)                (((uint32_t)(_n) & 0x3) << 20)
#define FLEXIO_TIMCFG1_TIMDEC_INSERT(_v, _n)         (((_v) & ~0x300000) | ((uint32_t)(_n) & 0x3) << 20)
#define FLEXIO_TIMCFG1_TIMDEC_EXTRACT(_v)            (((_v) >> 20) & 0x3)
                                                                        // Timer Output
#define FLEXIO_TIMCFG1_TIMOUT(_n)                (((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_TIMCFG1_TIMOUT_INSERT(_v, _n)         (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_TIMCFG1_TIMOUT_EXTRACT(_v)            (((_v) >> 24) & 0x3)

    uint32_t             TIMCFG2;                                       // Timer Configuration N Register
#define FLEXIO_TIMCFG2_TSTART                    ((uint32_t)1 << 1)     // Timer Start Bit
                                                                        // Timer Stop Bit
#define FLEXIO_TIMCFG2_TSTOP(_n)                 (((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_TIMCFG2_TSTOP_INSERT(_v, _n)          (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_TIMCFG2_TSTOP_EXTRACT(_v)             (((_v) >> 4) & 0x3)
                                                                        // Timer Enable
#define FLEXIO_TIMCFG2_TIMENA(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCFG2_TIMENA_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCFG2_TIMENA_EXTRACT(_v)            (((_v) >> 8) & 0x7)
                                                                        // Timer Disable
#define FLEXIO_TIMCFG2_TIMDIS(_n)                (((uint32_t)(_n) & 0x7) << 12)
#define FLEXIO_TIMCFG2_TIMDIS_INSERT(_v, _n)         (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define FLEXIO_TIMCFG2_TIMDIS_EXTRACT(_v)            (((_v) >> 12) & 0x7)
                                                                        // Timer Reset
#define FLEXIO_TIMCFG2_TIMRST(_n)                (((uint32_t)(_n) & 0x7) << 16)
#define FLEXIO_TIMCFG2_TIMRST_INSERT(_v, _n)         (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define FLEXIO_TIMCFG2_TIMRST_EXTRACT(_v)            (((_v) >> 16) & 0x7)
                                                                        // Timer Decrement
#define FLEXIO_TIMCFG2_TIMDEC(_n)                (((uint32_t)(_n) & 0x3) << 20)
#define FLEXIO_TIMCFG2_TIMDEC_INSERT(_v, _n)         (((_v) & ~0x300000) | ((uint32_t)(_n) & 0x3) << 20)
#define FLEXIO_TIMCFG2_TIMDEC_EXTRACT(_v)            (((_v) >> 20) & 0x3)
                                                                        // Timer Output
#define FLEXIO_TIMCFG2_TIMOUT(_n)                (((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_TIMCFG2_TIMOUT_INSERT(_v, _n)         (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_TIMCFG2_TIMOUT_EXTRACT(_v)            (((_v) >> 24) & 0x3)

    uint32_t             TIMCFG3;                                       // Timer Configuration N Register
#define FLEXIO_TIMCFG3_TSTART                    ((uint32_t)1 << 1)     // Timer Start Bit
                                                                        // Timer Stop Bit
#define FLEXIO_TIMCFG3_TSTOP(_n)                 (((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_TIMCFG3_TSTOP_INSERT(_v, _n)          (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define FLEXIO_TIMCFG3_TSTOP_EXTRACT(_v)             (((_v) >> 4) & 0x3)
                                                                        // Timer Enable
#define FLEXIO_TIMCFG3_TIMENA(_n)                (((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCFG3_TIMENA_INSERT(_v, _n)         (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define FLEXIO_TIMCFG3_TIMENA_EXTRACT(_v)            (((_v) >> 8) & 0x7)
                                                                        // Timer Disable
#define FLEXIO_TIMCFG3_TIMDIS(_n)                (((uint32_t)(_n) & 0x7) << 12)
#define FLEXIO_TIMCFG3_TIMDIS_INSERT(_v, _n)         (((_v) & ~0x7000) | ((uint32_t)(_n) & 0x7) << 12)
#define FLEXIO_TIMCFG3_TIMDIS_EXTRACT(_v)            (((_v) >> 12) & 0x7)
                                                                        // Timer Reset
#define FLEXIO_TIMCFG3_TIMRST(_n)                (((uint32_t)(_n) & 0x7) << 16)
#define FLEXIO_TIMCFG3_TIMRST_INSERT(_v, _n)         (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define FLEXIO_TIMCFG3_TIMRST_EXTRACT(_v)            (((_v) >> 16) & 0x7)
                                                                        // Timer Decrement
#define FLEXIO_TIMCFG3_TIMDEC(_n)                (((uint32_t)(_n) & 0x3) << 20)
#define FLEXIO_TIMCFG3_TIMDEC_INSERT(_v, _n)         (((_v) & ~0x300000) | ((uint32_t)(_n) & 0x3) << 20)
#define FLEXIO_TIMCFG3_TIMDEC_EXTRACT(_v)            (((_v) >> 20) & 0x3)
                                                                        // Timer Output
#define FLEXIO_TIMCFG3_TIMOUT(_n)                (((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_TIMCFG3_TIMOUT_INSERT(_v, _n)         (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define FLEXIO_TIMCFG3_TIMOUT_EXTRACT(_v)            (((_v) >> 24) & 0x3)

    uint8_t _res10[112];
    uint32_t             TIMCMP0;                                       // Timer Compare N Register
                                                                        // Timer Compare Value
#define FLEXIO_TIMCMP0_CMP(_n)                   (((uint32_t)(_n) & 0xffff) << 0)
#define FLEXIO_TIMCMP0_CMP_INSERT(_v, _n)            (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FLEXIO_TIMCMP0_CMP_EXTRACT(_v)               (((_v) >> 0) & 0xffff)

    uint32_t             TIMCMP1;                                       // Timer Compare N Register
                                                                        // Timer Compare Value
#define FLEXIO_TIMCMP1_CMP(_n)                   (((uint32_t)(_n) & 0xffff) << 0)
#define FLEXIO_TIMCMP1_CMP_INSERT(_v, _n)            (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FLEXIO_TIMCMP1_CMP_EXTRACT(_v)               (((_v) >> 0) & 0xffff)

    uint32_t             TIMCMP2;                                       // Timer Compare N Register
                                                                        // Timer Compare Value
#define FLEXIO_TIMCMP2_CMP(_n)                   (((uint32_t)(_n) & 0xffff) << 0)
#define FLEXIO_TIMCMP2_CMP_INSERT(_v, _n)            (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FLEXIO_TIMCMP2_CMP_EXTRACT(_v)               (((_v) >> 0) & 0xffff)

    uint32_t             TIMCMP3;                                       // Timer Compare N Register
                                                                        // Timer Compare Value
#define FLEXIO_TIMCMP3_CMP(_n)                   (((uint32_t)(_n) & 0xffff) << 0)
#define FLEXIO_TIMCMP3_CMP_INSERT(_v, _n)            (((_v) & ~0xffff) | ((uint32_t)(_n) & 0xffff) << 0)
#define FLEXIO_TIMCMP3_CMP_EXTRACT(_v)               (((_v) >> 0) & 0xffff)

} FLEXIO_regs_t;
                                                                        // --------------------
                                                                        // External Watchdog Monitor
typedef struct                                                          // --------------------
{
    uint8_t              CTRL;                                          // Control Register
#define EWM_CTRL_EWMEN                           ((uint8_t)1 << 0)      // EWM enable.
#define EWM_CTRL_ASSIN                           ((uint8_t)1 << 1)      // EWM_in's Assertion State Select.
#define EWM_CTRL_INEN                            ((uint8_t)1 << 2)      // Input Enable.
#define EWM_CTRL_INTEN                           ((uint8_t)1 << 3)      // Interrupt Enable.

    uint8_t              SERV;                                          // Service Register
    uint8_t              CMPL;                                          // Compare Low Register
    uint8_t              CMPH;                                          // Compare High Register
    uint8_t _res0[1];
    uint8_t              CLKPRESCALER;                                  // Clock Prescaler Register
} EWM_regs_t;
                                                                        // --------------------
                                                                        // TRGMUX
typedef struct                                                          // --------------------
{
    uint32_t             TRGMUX_DMAMUX0;                                // TRGMUX DMAMUX0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_DMAMUX0_SEL0(_n)           (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_DMAMUX0_SEL0_INSERT(_v, _n)    (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_DMAMUX0_SEL0_EXTRACT(_v)       (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_DMAMUX0_SEL1(_n)           (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_DMAMUX0_SEL1_INSERT(_v, _n)    (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_DMAMUX0_SEL1_EXTRACT(_v)       (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_DMAMUX0_SEL2(_n)           (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_DMAMUX0_SEL2_INSERT(_v, _n)    (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_DMAMUX0_SEL2_EXTRACT(_v)       (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_DMAMUX0_SEL3(_n)           (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_DMAMUX0_SEL3_INSERT(_v, _n)    (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_DMAMUX0_SEL3_EXTRACT(_v)       (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_DMAMUX0_LK                 ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_EXTOUT0;                                // TRGMUX EXTOUT0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_EXTOUT0_SEL0(_n)           (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_EXTOUT0_SEL0_INSERT(_v, _n)    (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_EXTOUT0_SEL0_EXTRACT(_v)       (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_EXTOUT0_SEL1(_n)           (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_EXTOUT0_SEL1_INSERT(_v, _n)    (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_EXTOUT0_SEL1_EXTRACT(_v)       (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_EXTOUT0_SEL2(_n)           (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_EXTOUT0_SEL2_INSERT(_v, _n)    (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_EXTOUT0_SEL2_EXTRACT(_v)       (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_EXTOUT0_SEL3(_n)           (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_EXTOUT0_SEL3_INSERT(_v, _n)    (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_EXTOUT0_SEL3_EXTRACT(_v)       (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_EXTOUT0_LK                 ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_EXTOUT1;                                // TRGMUX EXTOUT1 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_EXTOUT1_SEL0(_n)           (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_EXTOUT1_SEL0_INSERT(_v, _n)    (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_EXTOUT1_SEL0_EXTRACT(_v)       (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_EXTOUT1_SEL1(_n)           (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_EXTOUT1_SEL1_INSERT(_v, _n)    (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_EXTOUT1_SEL1_EXTRACT(_v)       (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_EXTOUT1_SEL2(_n)           (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_EXTOUT1_SEL2_INSERT(_v, _n)    (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_EXTOUT1_SEL2_EXTRACT(_v)       (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_EXTOUT1_SEL3(_n)           (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_EXTOUT1_SEL3_INSERT(_v, _n)    (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_EXTOUT1_SEL3_EXTRACT(_v)       (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_EXTOUT1_LK                 ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_ADC0;                                   // TRGMUX ADC0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_ADC0_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_ADC0_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_ADC0_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_ADC0_SEL1(_n)              (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_ADC0_SEL1_INSERT(_v, _n)       (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_ADC0_SEL1_EXTRACT(_v)          (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_ADC0_SEL2(_n)              (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_ADC0_SEL2_INSERT(_v, _n)       (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_ADC0_SEL2_EXTRACT(_v)          (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_ADC0_SEL3(_n)              (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_ADC0_SEL3_INSERT(_v, _n)       (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_ADC0_SEL3_EXTRACT(_v)          (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_ADC0_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_ADC1;                                   // TRGMUX ADC1 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_ADC1_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_ADC1_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_ADC1_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_ADC1_SEL1(_n)              (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_ADC1_SEL1_INSERT(_v, _n)       (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_ADC1_SEL1_EXTRACT(_v)          (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_ADC1_SEL2(_n)              (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_ADC1_SEL2_INSERT(_v, _n)       (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_ADC1_SEL2_EXTRACT(_v)          (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_ADC1_SEL3(_n)              (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_ADC1_SEL3_INSERT(_v, _n)       (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_ADC1_SEL3_EXTRACT(_v)          (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_ADC1_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint8_t _res0[8];
    uint32_t             TRGMUX_CMP0;                                   // TRGMUX CMP0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_CMP0_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_CMP0_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_CMP0_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_CMP0_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint8_t _res1[8];
    uint32_t             TRGMUX_FTM0;                                   // TRGMUX FTM0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_FTM0_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FTM0_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FTM0_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_FTM0_SEL1(_n)              (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FTM0_SEL1_INSERT(_v, _n)       (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FTM0_SEL1_EXTRACT(_v)          (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_FTM0_SEL2(_n)              (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FTM0_SEL2_INSERT(_v, _n)       (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FTM0_SEL2_EXTRACT(_v)          (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_FTM0_SEL3(_n)              (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FTM0_SEL3_INSERT(_v, _n)       (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FTM0_SEL3_EXTRACT(_v)          (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_FTM0_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_FTM1;                                   // TRGMUX FTM1 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_FTM1_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FTM1_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FTM1_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_FTM1_SEL1(_n)              (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FTM1_SEL1_INSERT(_v, _n)       (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FTM1_SEL1_EXTRACT(_v)          (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_FTM1_SEL2(_n)              (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FTM1_SEL2_INSERT(_v, _n)       (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FTM1_SEL2_EXTRACT(_v)          (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_FTM1_SEL3(_n)              (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FTM1_SEL3_INSERT(_v, _n)       (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FTM1_SEL3_EXTRACT(_v)          (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_FTM1_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_FTM2;                                   // TRGMUX FTM2 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_FTM2_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FTM2_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FTM2_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_FTM2_SEL1(_n)              (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FTM2_SEL1_INSERT(_v, _n)       (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FTM2_SEL1_EXTRACT(_v)          (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_FTM2_SEL2(_n)              (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FTM2_SEL2_INSERT(_v, _n)       (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FTM2_SEL2_EXTRACT(_v)          (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_FTM2_SEL3(_n)              (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FTM2_SEL3_INSERT(_v, _n)       (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FTM2_SEL3_EXTRACT(_v)          (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_FTM2_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_FTM3;                                   // TRGMUX FTM3 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_FTM3_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FTM3_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FTM3_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_FTM3_SEL1(_n)              (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FTM3_SEL1_INSERT(_v, _n)       (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FTM3_SEL1_EXTRACT(_v)          (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_FTM3_SEL2(_n)              (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FTM3_SEL2_INSERT(_v, _n)       (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FTM3_SEL2_EXTRACT(_v)          (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_FTM3_SEL3(_n)              (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FTM3_SEL3_INSERT(_v, _n)       (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FTM3_SEL3_EXTRACT(_v)          (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_FTM3_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_PDB0;                                   // TRGMUX PDB0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_PDB0_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_PDB0_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_PDB0_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_PDB0_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_PDB1;                                   // TRGMUX PDB1 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_PDB1_SEL0(_n)              (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_PDB1_SEL0_INSERT(_v, _n)       (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_PDB1_SEL0_EXTRACT(_v)          (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_PDB1_LK                    ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint8_t _res2[4];
    uint32_t             TRGMUX_FLEXIO;                                 // TRGMUX FLEXIO Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_FLEXIO_SEL0(_n)            (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FLEXIO_SEL0_INSERT(_v, _n)     (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_FLEXIO_SEL0_EXTRACT(_v)        (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_FLEXIO_SEL1(_n)            (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FLEXIO_SEL1_INSERT(_v, _n)     (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_FLEXIO_SEL1_EXTRACT(_v)        (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_FLEXIO_SEL2(_n)            (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FLEXIO_SEL2_INSERT(_v, _n)     (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_FLEXIO_SEL2_EXTRACT(_v)        (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_FLEXIO_SEL3(_n)            (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FLEXIO_SEL3_INSERT(_v, _n)     (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_FLEXIO_SEL3_EXTRACT(_v)        (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_FLEXIO_LK                  ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_LPIT0;                                  // TRGMUX LPIT0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_LPIT0_SEL0(_n)             (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPIT0_SEL0_INSERT(_v, _n)      (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPIT0_SEL0_EXTRACT(_v)         (((_v) >> 0) & 0x3f)
                                                                        // Trigger MUX Input 1 Source Select
#define TRGMUX_TRGMUX_LPIT0_SEL1(_n)             (((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_LPIT0_SEL1_INSERT(_v, _n)      (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define TRGMUX_TRGMUX_LPIT0_SEL1_EXTRACT(_v)         (((_v) >> 8) & 0x3f)
                                                                        // Trigger MUX Input 2 Source Select
#define TRGMUX_TRGMUX_LPIT0_SEL2(_n)             (((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_LPIT0_SEL2_INSERT(_v, _n)      (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define TRGMUX_TRGMUX_LPIT0_SEL2_EXTRACT(_v)         (((_v) >> 16) & 0x3f)
                                                                        // Trigger MUX Input 3 Source Select
#define TRGMUX_TRGMUX_LPIT0_SEL3(_n)             (((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_LPIT0_SEL3_INSERT(_v, _n)      (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define TRGMUX_TRGMUX_LPIT0_SEL3_EXTRACT(_v)         (((_v) >> 24) & 0x3f)
#define TRGMUX_TRGMUX_LPIT0_LK                   ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_LPUART0;                                // TRGMUX LPUART0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_LPUART0_SEL0(_n)           (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPUART0_SEL0_INSERT(_v, _n)    (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPUART0_SEL0_EXTRACT(_v)       (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_LPUART0_LK                 ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_LPUART1;                                // TRGMUX LPUART1 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_LPUART1_SEL0(_n)           (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPUART1_SEL0_INSERT(_v, _n)    (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPUART1_SEL0_EXTRACT(_v)       (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_LPUART1_LK                 ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_LPI2C0;                                 // TRGMUX LPI2C0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_LPI2C0_SEL0(_n)            (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPI2C0_SEL0_INSERT(_v, _n)     (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPI2C0_SEL0_EXTRACT(_v)        (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_LPI2C0_LK                  ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint8_t _res3[4];
    uint32_t             TRGMUX_LPSPI0;                                 // TRGMUX LPSPI0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_LPSPI0_SEL0(_n)            (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPSPI0_SEL0_INSERT(_v, _n)     (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPSPI0_SEL0_EXTRACT(_v)        (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_LPSPI0_LK                  ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_LPSPI1;                                 // TRGMUX LPSPI1 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_LPSPI1_SEL0(_n)            (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPSPI1_SEL0_INSERT(_v, _n)     (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPSPI1_SEL0_EXTRACT(_v)        (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_LPSPI1_LK                  ((uint32_t)1 << 31)    // TRGMUX register lock.

    uint32_t             TRGMUX_LPTMR0;                                 // TRGMUX LPTMR0 Register
                                                                        // Trigger MUX Input 0 Source Select
#define TRGMUX_TRGMUX_LPTMR0_SEL0(_n)            (((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPTMR0_SEL0_INSERT(_v, _n)     (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define TRGMUX_TRGMUX_LPTMR0_SEL0_EXTRACT(_v)        (((_v) >> 0) & 0x3f)
#define TRGMUX_TRGMUX_LPTMR0_LK                  ((uint32_t)1 << 31)    // TRGMUX register lock.

} TRGMUX_regs_t;
                                                                        // --------------------
                                                                        // System Clock Generator
typedef struct                                                          // --------------------
{
    const uint32_t       VERID;                                         // Version ID Register
    const uint32_t       PARAM;                                         // Parameter Register
                                                                        // Clock Present
#define SCG_PARAM_CLKPRES_EXTRACT(_v)                (((_v) >> 0) & 0xff)
                                                                        // Divider Present
#define SCG_PARAM_DIVPRES_EXTRACT(_v)                (((_v) >> 27) & 0x1f)

    uint8_t _res0[8];
    const uint32_t       CSR;                                           // Clock Status Register
                                                                        // Slow Clock Divide Ratio
#define SCG_CSR_DIVSLOW_EXTRACT(_v)                  (((_v) >> 0) & 0xf)
                                                                        // Bus Clock Divide Ratio
#define SCG_CSR_DIVBUS_EXTRACT(_v)                   (((_v) >> 4) & 0xf)
                                                                        // Core Clock Divide Ratio
#define SCG_CSR_DIVCORE_EXTRACT(_v)                  (((_v) >> 16) & 0xf)
                                                                        // System Clock Source
#define SCG_CSR_SCS_EXTRACT(_v)                      (((_v) >> 24) & 0xf)

    uint32_t             RCCR;                                          // Run Clock Control Register
                                                                        // Slow Clock Divide Ratio
#define SCG_RCCR_DIVSLOW(_n)                     (((uint32_t)(_n) & 0xf) << 0)
#define SCG_RCCR_DIVSLOW_INSERT(_v, _n)              (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define SCG_RCCR_DIVSLOW_EXTRACT(_v)                 (((_v) >> 0) & 0xf)
                                                                        // Bus Clock Divide Ratio
#define SCG_RCCR_DIVBUS(_n)                      (((uint32_t)(_n) & 0xf) << 4)
#define SCG_RCCR_DIVBUS_INSERT(_v, _n)               (((_v) & ~0xf0) | ((uint32_t)(_n) & 0xf) << 4)
#define SCG_RCCR_DIVBUS_EXTRACT(_v)                  (((_v) >> 4) & 0xf)
                                                                        // Core Clock Divide Ratio
#define SCG_RCCR_DIVCORE(_n)                     (((uint32_t)(_n) & 0xf) << 16)
#define SCG_RCCR_DIVCORE_INSERT(_v, _n)              (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define SCG_RCCR_DIVCORE_EXTRACT(_v)                 (((_v) >> 16) & 0xf)
                                                                        // System Clock Source
#define SCG_RCCR_SCS(_n)                         (((uint32_t)(_n) & 0xf) << 24)
#define SCG_RCCR_SCS_INSERT(_v, _n)                  (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define SCG_RCCR_SCS_EXTRACT(_v)                     (((_v) >> 24) & 0xf)

    uint32_t             VCCR;                                          // VLPR Clock Control Register
                                                                        // Slow Clock Divide Ratio
#define SCG_VCCR_DIVSLOW(_n)                     (((uint32_t)(_n) & 0xf) << 0)
#define SCG_VCCR_DIVSLOW_INSERT(_v, _n)              (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define SCG_VCCR_DIVSLOW_EXTRACT(_v)                 (((_v) >> 0) & 0xf)
                                                                        // Bus Clock Divide Ratio
#define SCG_VCCR_DIVBUS(_n)                      (((uint32_t)(_n) & 0xf) << 4)
#define SCG_VCCR_DIVBUS_INSERT(_v, _n)               (((_v) & ~0xf0) | ((uint32_t)(_n) & 0xf) << 4)
#define SCG_VCCR_DIVBUS_EXTRACT(_v)                  (((_v) >> 4) & 0xf)
                                                                        // Core Clock Divide Ratio
#define SCG_VCCR_DIVCORE(_n)                     (((uint32_t)(_n) & 0xf) << 16)
#define SCG_VCCR_DIVCORE_INSERT(_v, _n)              (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define SCG_VCCR_DIVCORE_EXTRACT(_v)                 (((_v) >> 16) & 0xf)
                                                                        // System Clock Source
#define SCG_VCCR_SCS(_n)                         (((uint32_t)(_n) & 0xf) << 24)
#define SCG_VCCR_SCS_INSERT(_v, _n)                  (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define SCG_VCCR_SCS_EXTRACT(_v)                     (((_v) >> 24) & 0xf)

    uint32_t             HCCR;                                          // HSRUN Clock Control Register
                                                                        // Slow Clock Divide Ratio
#define SCG_HCCR_DIVSLOW(_n)                     (((uint32_t)(_n) & 0xf) << 0)
#define SCG_HCCR_DIVSLOW_INSERT(_v, _n)              (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define SCG_HCCR_DIVSLOW_EXTRACT(_v)                 (((_v) >> 0) & 0xf)
                                                                        // Bus Clock Divide Ratio
#define SCG_HCCR_DIVBUS(_n)                      (((uint32_t)(_n) & 0xf) << 4)
#define SCG_HCCR_DIVBUS_INSERT(_v, _n)               (((_v) & ~0xf0) | ((uint32_t)(_n) & 0xf) << 4)
#define SCG_HCCR_DIVBUS_EXTRACT(_v)                  (((_v) >> 4) & 0xf)
                                                                        // Core Clock Divide Ratio
#define SCG_HCCR_DIVCORE(_n)                     (((uint32_t)(_n) & 0xf) << 16)
#define SCG_HCCR_DIVCORE_INSERT(_v, _n)              (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define SCG_HCCR_DIVCORE_EXTRACT(_v)                 (((_v) >> 16) & 0xf)
                                                                        // System Clock Source
#define SCG_HCCR_SCS(_n)                         (((uint32_t)(_n) & 0xf) << 24)
#define SCG_HCCR_SCS_INSERT(_v, _n)                  (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define SCG_HCCR_SCS_EXTRACT(_v)                     (((_v) >> 24) & 0xf)

    uint32_t             CLKOUTCNFG;                                    // SCG CLKOUT Configuration Register
                                                                        // SCG Clkout Select
#define SCG_CLKOUTCNFG_CLKOUTSEL(_n)             (((uint32_t)(_n) & 0xf) << 24)
#define SCG_CLKOUTCNFG_CLKOUTSEL_INSERT(_v, _n)      (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define SCG_CLKOUTCNFG_CLKOUTSEL_EXTRACT(_v)         (((_v) >> 24) & 0xf)

    uint8_t _res1[220];
    uint32_t             SOSCCSR;                                       // System OSC Control Status Register
#define SCG_SOSCCSR_SOSCEN                       ((uint32_t)1 << 0)     // System OSC Enable
#define SCG_SOSCCSR_SOSCCM                       ((uint32_t)1 << 16)    // System OSC Clock Monitor
#define SCG_SOSCCSR_SOSCCMRE                     ((uint32_t)1 << 17)    // System OSC Clock Monitor Reset Enable
#define SCG_SOSCCSR_LK                           ((uint32_t)1 << 23)    // Lock Register
#define SCG_SOSCCSR_SOSCVLD                      ((uint32_t)1 << 24)    // System OSC Valid
#define SCG_SOSCCSR_SOSCSEL                      ((uint32_t)1 << 25)    // System OSC Selected
#define SCG_SOSCCSR_SOSCERR                      ((uint32_t)1 << 26)    // System OSC Clock Error

    uint32_t             SOSCDIV;                                       // System OSC Divide Register
                                                                        // System OSC Clock Divide 1
#define SCG_SOSCDIV_SOSCDIV1(_n)                 (((uint32_t)(_n) & 0x7) << 0)
#define SCG_SOSCDIV_SOSCDIV1_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define SCG_SOSCDIV_SOSCDIV1_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // System OSC Clock Divide 2
#define SCG_SOSCDIV_SOSCDIV2(_n)                 (((uint32_t)(_n) & 0x7) << 8)
#define SCG_SOSCDIV_SOSCDIV2_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define SCG_SOSCDIV_SOSCDIV2_EXTRACT(_v)             (((_v) >> 8) & 0x7)

    uint32_t             SOSCCFG;                                       // System Oscillator Configuration Register
#define SCG_SOSCCFG_EREFS                        ((uint32_t)1 << 2)     // External Reference Select
#define SCG_SOSCCFG_HGO                          ((uint32_t)1 << 3)     // High Gain Oscillator Select
                                                                        // System OSC Range Select
#define SCG_SOSCCFG_RANGE(_n)                    (((uint32_t)(_n) & 0x3) << 4)
#define SCG_SOSCCFG_RANGE_INSERT(_v, _n)             (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define SCG_SOSCCFG_RANGE_EXTRACT(_v)                (((_v) >> 4) & 0x3)

    uint8_t _res2[244];
    uint32_t             SIRCCSR;                                       // Slow IRC Control Status Register
#define SCG_SIRCCSR_SIRCEN                       ((uint32_t)1 << 0)     // Slow IRC Enable
#define SCG_SIRCCSR_SIRCSTEN                     ((uint32_t)1 << 1)     // Slow IRC Stop Enable
#define SCG_SIRCCSR_SIRCLPEN                     ((uint32_t)1 << 2)     // Slow IRC Low Power Enable
#define SCG_SIRCCSR_LK                           ((uint32_t)1 << 23)    // Lock Register
#define SCG_SIRCCSR_SIRCVLD                      ((uint32_t)1 << 24)    // Slow IRC Valid
#define SCG_SIRCCSR_SIRCSEL                      ((uint32_t)1 << 25)    // Slow IRC Selected

    uint32_t             SIRCDIV;                                       // Slow IRC Divide Register
                                                                        // Slow IRC Clock Divide 1
#define SCG_SIRCDIV_SIRCDIV1(_n)                 (((uint32_t)(_n) & 0x7) << 0)
#define SCG_SIRCDIV_SIRCDIV1_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define SCG_SIRCDIV_SIRCDIV1_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // Slow IRC Clock Divide 2
#define SCG_SIRCDIV_SIRCDIV2(_n)                 (((uint32_t)(_n) & 0x7) << 8)
#define SCG_SIRCDIV_SIRCDIV2_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define SCG_SIRCDIV_SIRCDIV2_EXTRACT(_v)             (((_v) >> 8) & 0x7)

    uint32_t             SIRCCFG;                                       // Slow IRC Configuration Register
#define SCG_SIRCCFG_RANGE                        ((uint32_t)1 << 0)     // Frequency Range

    uint8_t _res3[244];
    uint32_t             FIRCCSR;                                       // Fast IRC Control Status Register
#define SCG_FIRCCSR_FIRCEN                       ((uint32_t)1 << 0)     // Fast IRC Enable
#define SCG_FIRCCSR_FIRCREGOFF                   ((uint32_t)1 << 3)     // Fast IRC Regulator Enable
#define SCG_FIRCCSR_LK                           ((uint32_t)1 << 23)    // Lock Register
#define SCG_FIRCCSR_FIRCVLD                      ((uint32_t)1 << 24)    // Fast IRC Valid status
#define SCG_FIRCCSR_FIRCSEL                      ((uint32_t)1 << 25)    // Fast IRC Selected status
#define SCG_FIRCCSR_FIRCERR                      ((uint32_t)1 << 26)    // Fast IRC Clock Error

    uint32_t             FIRCDIV;                                       // Fast IRC Divide Register
                                                                        // Fast IRC Clock Divide 1
#define SCG_FIRCDIV_FIRCDIV1(_n)                 (((uint32_t)(_n) & 0x7) << 0)
#define SCG_FIRCDIV_FIRCDIV1_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define SCG_FIRCDIV_FIRCDIV1_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // Fast IRC Clock Divide 2
#define SCG_FIRCDIV_FIRCDIV2(_n)                 (((uint32_t)(_n) & 0x7) << 8)
#define SCG_FIRCDIV_FIRCDIV2_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define SCG_FIRCDIV_FIRCDIV2_EXTRACT(_v)             (((_v) >> 8) & 0x7)

    uint32_t             FIRCCFG;                                       // Fast IRC Configuration Register
                                                                        // Frequency Range
#define SCG_FIRCCFG_RANGE(_n)                    (((uint32_t)(_n) & 0x3) << 0)
#define SCG_FIRCCFG_RANGE_INSERT(_v, _n)             (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define SCG_FIRCCFG_RANGE_EXTRACT(_v)                (((_v) >> 0) & 0x3)

    uint8_t _res4[756];
    uint32_t             SPLLCSR;                                       // System PLL Control Status Register
#define SCG_SPLLCSR_SPLLEN                       ((uint32_t)1 << 0)     // System PLL Enable
#define SCG_SPLLCSR_SPLLCM                       ((uint32_t)1 << 16)    // System PLL Clock Monitor
#define SCG_SPLLCSR_SPLLCMRE                     ((uint32_t)1 << 17)    // System PLL Clock Monitor Reset Enable
#define SCG_SPLLCSR_LK                           ((uint32_t)1 << 23)    // Lock Register
#define SCG_SPLLCSR_SPLLVLD                      ((uint32_t)1 << 24)    // System PLL Valid
#define SCG_SPLLCSR_SPLLSEL                      ((uint32_t)1 << 25)    // System PLL Selected
#define SCG_SPLLCSR_SPLLERR                      ((uint32_t)1 << 26)    // System PLL Clock Error

    uint32_t             SPLLDIV;                                       // System PLL Divide Register
                                                                        // System PLL Clock Divide 1
#define SCG_SPLLDIV_SPLLDIV1(_n)                 (((uint32_t)(_n) & 0x7) << 0)
#define SCG_SPLLDIV_SPLLDIV1_INSERT(_v, _n)          (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define SCG_SPLLDIV_SPLLDIV1_EXTRACT(_v)             (((_v) >> 0) & 0x7)
                                                                        // System PLL Clock Divide 2
#define SCG_SPLLDIV_SPLLDIV2(_n)                 (((uint32_t)(_n) & 0x7) << 8)
#define SCG_SPLLDIV_SPLLDIV2_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define SCG_SPLLDIV_SPLLDIV2_EXTRACT(_v)             (((_v) >> 8) & 0x7)

    uint32_t             SPLLCFG;                                       // System PLL Configuration Register
                                                                        // PLL Reference Clock Divider
#define SCG_SPLLCFG_PREDIV(_n)                   (((uint32_t)(_n) & 0x7) << 8)
#define SCG_SPLLCFG_PREDIV_INSERT(_v, _n)            (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define SCG_SPLLCFG_PREDIV_EXTRACT(_v)               (((_v) >> 8) & 0x7)
                                                                        // System PLL Multiplier
#define SCG_SPLLCFG_MULT(_n)                     (((uint32_t)(_n) & 0x1f) << 16)
#define SCG_SPLLCFG_MULT_INSERT(_v, _n)              (((_v) & ~0x1f0000) | ((uint32_t)(_n) & 0x1f) << 16)
#define SCG_SPLLCFG_MULT_EXTRACT(_v)                 (((_v) >> 16) & 0x1f)

} SCG_regs_t;
                                                                        // --------------------
                                                                        // PCC
typedef struct                                                          // --------------------
{
    uint8_t _res0[128];
    uint32_t             PCC_FTFC;                                      // PCC FTFC Register
#define PCC_PCC_FTFC_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FTFC_PR                          ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_DMAMUX;                                    // PCC DMAMUX Register
#define PCC_PCC_DMAMUX_CGC                       ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_DMAMUX_PR                        ((uint32_t)1 << 31)    // Present

    uint8_t _res1[8];
    uint32_t             PCC_FlexCAN0;                                  // PCC FlexCAN0 Register
#define PCC_PCC_FlexCAN0_CGC                     ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FlexCAN0_PR                      ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_FlexCAN1;                                  // PCC FlexCAN1 Register
#define PCC_PCC_FlexCAN1_CGC                     ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FlexCAN1_PR                      ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_FTM3;                                      // PCC FTM3 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_FTM3_PCS(_n)                     (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FTM3_PCS_INSERT(_v, _n)              (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FTM3_PCS_EXTRACT(_v)                 (((_v) >> 24) & 0x7)
#define PCC_PCC_FTM3_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FTM3_PR                          ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_ADC1;                                      // PCC ADC1 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_ADC1_PCS(_n)                     (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_ADC1_PCS_INSERT(_v, _n)              (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_ADC1_PCS_EXTRACT(_v)                 (((_v) >> 24) & 0x7)
#define PCC_PCC_ADC1_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_ADC1_PR                          ((uint32_t)1 << 31)    // Present

    uint8_t _res2[12];
    uint32_t             PCC_FlexCAN2;                                  // PCC FlexCAN2 Register
#define PCC_PCC_FlexCAN2_CGC                     ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FlexCAN2_PR                      ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_LPSPI0;                                    // PCC LPSPI0 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPSPI0_PCS(_n)                   (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPSPI0_PCS_INSERT(_v, _n)            (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPSPI0_PCS_EXTRACT(_v)               (((_v) >> 24) & 0x7)
#define PCC_PCC_LPSPI0_CGC                       ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPSPI0_PR                        ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_LPSPI1;                                    // PCC LPSPI1 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPSPI1_PCS(_n)                   (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPSPI1_PCS_INSERT(_v, _n)            (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPSPI1_PCS_EXTRACT(_v)               (((_v) >> 24) & 0x7)
#define PCC_PCC_LPSPI1_CGC                       ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPSPI1_PR                        ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_LPSPI2;                                    // PCC LPSPI2 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPSPI2_PCS(_n)                   (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPSPI2_PCS_INSERT(_v, _n)            (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPSPI2_PCS_EXTRACT(_v)               (((_v) >> 24) & 0x7)
#define PCC_PCC_LPSPI2_CGC                       ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPSPI2_PR                        ((uint32_t)1 << 31)    // Present

    uint8_t _res3[8];
    uint32_t             PCC_PDB1;                                      // PCC PDB1 Register
#define PCC_PCC_PDB1_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_PDB1_PR                          ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_CRC;                                       // PCC CRC Register
#define PCC_PCC_CRC_CGC                          ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_CRC_PR                           ((uint32_t)1 << 31)    // Present

    uint8_t _res4[12];
    uint32_t             PCC_PDB0;                                      // PCC PDB0 Register
#define PCC_PCC_PDB0_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_PDB0_PR                          ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_LPIT;                                      // PCC LPIT Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPIT_PCS(_n)                     (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPIT_PCS_INSERT(_v, _n)              (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPIT_PCS_EXTRACT(_v)                 (((_v) >> 24) & 0x7)
#define PCC_PCC_LPIT_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPIT_PR                          ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_FTM0;                                      // PCC FTM0 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_FTM0_PCS(_n)                     (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FTM0_PCS_INSERT(_v, _n)              (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FTM0_PCS_EXTRACT(_v)                 (((_v) >> 24) & 0x7)
#define PCC_PCC_FTM0_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FTM0_PR                          ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_FTM1;                                      // PCC FTM1 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_FTM1_PCS(_n)                     (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FTM1_PCS_INSERT(_v, _n)              (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FTM1_PCS_EXTRACT(_v)                 (((_v) >> 24) & 0x7)
#define PCC_PCC_FTM1_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FTM1_PR                          ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_FTM2;                                      // PCC FTM2 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_FTM2_PCS(_n)                     (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FTM2_PCS_INSERT(_v, _n)              (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FTM2_PCS_EXTRACT(_v)                 (((_v) >> 24) & 0x7)
#define PCC_PCC_FTM2_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FTM2_PR                          ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_ADC0;                                      // PCC ADC0 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_ADC0_PCS(_n)                     (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_ADC0_PCS_INSERT(_v, _n)              (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_ADC0_PCS_EXTRACT(_v)                 (((_v) >> 24) & 0x7)
#define PCC_PCC_ADC0_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_ADC0_PR                          ((uint32_t)1 << 31)    // Present

    uint8_t _res5[4];
    uint32_t             PCC_RTC;                                       // PCC RTC Register
#define PCC_PCC_RTC_CGC                          ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_RTC_PR                           ((uint32_t)1 << 31)    // Present

    uint8_t _res6[8];
    uint32_t             PCC_LPTMR0;                                    // PCC LPTMR0 Register
                                                                        // Peripheral Clock Divider Select
#define PCC_PCC_LPTMR0_PCD(_n)                   (((uint32_t)(_n) & 0x7) << 0)
#define PCC_PCC_LPTMR0_PCD_INSERT(_v, _n)            (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define PCC_PCC_LPTMR0_PCD_EXTRACT(_v)               (((_v) >> 0) & 0x7)
#define PCC_PCC_LPTMR0_FRAC                      ((uint32_t)1 << 3)     // Peripheral Clock Divider Fraction
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPTMR0_PCS(_n)                   (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPTMR0_PCS_INSERT(_v, _n)            (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPTMR0_PCS_EXTRACT(_v)               (((_v) >> 24) & 0x7)
#define PCC_PCC_LPTMR0_CGC                       ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPTMR0_PR                        ((uint32_t)1 << 31)    // Present

    uint8_t _res7[32];
    uint32_t             PCC_PORTA;                                     // PCC PORTA Register
#define PCC_PCC_PORTA_CGC                        ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_PORTA_PR                         ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_PORTB;                                     // PCC PORTB Register
#define PCC_PCC_PORTB_CGC                        ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_PORTB_PR                         ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_PORTC;                                     // PCC PORTC Register
#define PCC_PCC_PORTC_CGC                        ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_PORTC_PR                         ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_PORTD;                                     // PCC PORTD Register
#define PCC_PCC_PORTD_CGC                        ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_PORTD_PR                         ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_PORTE;                                     // PCC PORTE Register
#define PCC_PCC_PORTE_CGC                        ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_PORTE_PR                         ((uint32_t)1 << 31)    // Present

    uint8_t _res8[48];
    uint32_t             PCC_FlexIO;                                    // PCC FlexIO Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_FlexIO_PCS(_n)                   (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FlexIO_PCS_INSERT(_v, _n)            (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_FlexIO_PCS_EXTRACT(_v)               (((_v) >> 24) & 0x7)
#define PCC_PCC_FlexIO_CGC                       ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_FlexIO_PR                        ((uint32_t)1 << 31)    // Present

    uint8_t _res9[24];
    uint32_t             PCC_EWM;                                       // PCC EWM Register
#define PCC_PCC_EWM_CGC                          ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_EWM_PR                           ((uint32_t)1 << 31)    // Present

    uint8_t _res10[16];
    uint32_t             PCC_LPI2C0;                                    // PCC LPI2C0 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPI2C0_PCS(_n)                   (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPI2C0_PCS_INSERT(_v, _n)            (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPI2C0_PCS_EXTRACT(_v)               (((_v) >> 24) & 0x7)
#define PCC_PCC_LPI2C0_CGC                       ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPI2C0_PR                        ((uint32_t)1 << 31)    // Present

    uint8_t _res11[12];
    uint32_t             PCC_LPUART0;                                   // PCC LPUART0 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPUART0_PCS(_n)                  (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPUART0_PCS_INSERT(_v, _n)           (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPUART0_PCS_EXTRACT(_v)              (((_v) >> 24) & 0x7)
#define PCC_PCC_LPUART0_CGC                      ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPUART0_PR                       ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_LPUART1;                                   // PCC LPUART1 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPUART1_PCS(_n)                  (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPUART1_PCS_INSERT(_v, _n)           (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPUART1_PCS_EXTRACT(_v)              (((_v) >> 24) & 0x7)
#define PCC_PCC_LPUART1_CGC                      ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPUART1_PR                       ((uint32_t)1 << 31)    // Present

    uint32_t             PCC_LPUART2;                                   // PCC LPUART2 Register
                                                                        // Peripheral Clock Source Select
#define PCC_PCC_LPUART2_PCS(_n)                  (((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPUART2_PCS_INSERT(_v, _n)           (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define PCC_PCC_LPUART2_PCS_EXTRACT(_v)              (((_v) >> 24) & 0x7)
#define PCC_PCC_LPUART2_CGC                      ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_LPUART2_PR                       ((uint32_t)1 << 31)    // Present

    uint8_t _res12[24];
    uint32_t             PCC_CMP0;                                      // PCC CMP0 Register
#define PCC_PCC_CMP0_CGC                         ((uint32_t)1 << 30)    // Clock Gate Control
#define PCC_PCC_CMP0_PR                          ((uint32_t)1 << 31)    // Present

} PCC_regs_t;
                                                                        // --------------------
                                                                        // The LPI2C Memory Map/Register Definition can be found here.
typedef struct                                                          // --------------------
{
    const uint32_t       VERID;                                         // Version ID Register
                                                                        // Feature Specification Number
#define LPI2C0_VERID_FEATURE_EXTRACT(_v)             (((_v) >> 0) & 0xffff)
                                                                        // Minor Version Number
#define LPI2C0_VERID_MINOR_EXTRACT(_v)               (((_v) >> 16) & 0xff)
                                                                        // Major Version Number
#define LPI2C0_VERID_MAJOR_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    const uint32_t       PARAM;                                         // Parameter Register
                                                                        // Master Transmit FIFO Size
#define LPI2C0_PARAM_MTXFIFO_EXTRACT(_v)             (((_v) >> 0) & 0xf)
                                                                        // Master Receive FIFO Size
#define LPI2C0_PARAM_MRXFIFO_EXTRACT(_v)             (((_v) >> 8) & 0xf)

    uint8_t _res0[8];
    uint32_t             MCR;                                           // Master Control Register
#define LPI2C0_MCR_MEN                           ((uint32_t)1 << 0)     // Master Enable
#define LPI2C0_MCR_RST                           ((uint32_t)1 << 1)     // Software Reset
#define LPI2C0_MCR_DOZEN                         ((uint32_t)1 << 2)     // Doze mode enable
#define LPI2C0_MCR_DBGEN                         ((uint32_t)1 << 3)     // Debug Enable
#define LPI2C0_MCR_RTF                           ((uint32_t)1 << 8)     // Reset Transmit FIFO
#define LPI2C0_MCR_RRF                           ((uint32_t)1 << 9)     // Reset Receive FIFO

    uint32_t             MSR;                                           // Master Status Register
#define LPI2C0_MSR_TDF                           ((uint32_t)1 << 0)     // Transmit Data Flag
#define LPI2C0_MSR_RDF                           ((uint32_t)1 << 1)     // Receive Data Flag
#define LPI2C0_MSR_EPF                           ((uint32_t)1 << 8)     // End Packet Flag
#define LPI2C0_MSR_SDF                           ((uint32_t)1 << 9)     // STOP Detect Flag
#define LPI2C0_MSR_NDF                           ((uint32_t)1 << 10)    // NACK Detect Flag
#define LPI2C0_MSR_ALF                           ((uint32_t)1 << 11)    // Arbitration Lost Flag
#define LPI2C0_MSR_FEF                           ((uint32_t)1 << 12)    // FIFO Error Flag
#define LPI2C0_MSR_PLTF                          ((uint32_t)1 << 13)    // Pin Low Timeout Flag
#define LPI2C0_MSR_DMF                           ((uint32_t)1 << 14)    // Data Match Flag
#define LPI2C0_MSR_MBF                           ((uint32_t)1 << 24)    // Master Busy Flag
#define LPI2C0_MSR_BBF                           ((uint32_t)1 << 25)    // Bus Busy Flag

    uint32_t             MIER;                                          // Master Interrupt Enable Register
#define LPI2C0_MIER_TDIE                         ((uint32_t)1 << 0)     // Transmit Data Interrupt Enable
#define LPI2C0_MIER_RDIE                         ((uint32_t)1 << 1)     // Receive Data Interrupt Enable
#define LPI2C0_MIER_EPIE                         ((uint32_t)1 << 8)     // End Packet Interrupt Enable
#define LPI2C0_MIER_SDIE                         ((uint32_t)1 << 9)     // STOP Detect Interrupt Enable
#define LPI2C0_MIER_NDIE                         ((uint32_t)1 << 10)    // NACK Detect Interrupt Enable
#define LPI2C0_MIER_ALIE                         ((uint32_t)1 << 11)    // Arbitration Lost Interrupt Enable
#define LPI2C0_MIER_FEIE                         ((uint32_t)1 << 12)    // FIFO Error Interrupt Enable
#define LPI2C0_MIER_PLTIE                        ((uint32_t)1 << 13)    // Pin Low Timeout Interrupt Enable
#define LPI2C0_MIER_DMIE                         ((uint32_t)1 << 14)    // Data Match Interrupt Enable

    uint32_t             MDER;                                          // Master DMA Enable Register
#define LPI2C0_MDER_TDDE                         ((uint32_t)1 << 0)     // Transmit Data DMA Enable
#define LPI2C0_MDER_RDDE                         ((uint32_t)1 << 1)     // Receive Data DMA Enable

    uint32_t             MCFGR0;                                        // Master Configuration Register 0
#define LPI2C0_MCFGR0_HREN                       ((uint32_t)1 << 0)     // Host Request Enable
#define LPI2C0_MCFGR0_HRPOL                      ((uint32_t)1 << 1)     // Host Request Polarity
#define LPI2C0_MCFGR0_HRSEL                      ((uint32_t)1 << 2)     // Host Request Select
#define LPI2C0_MCFGR0_CIRFIFO                    ((uint32_t)1 << 8)     // Circular FIFO Enable
#define LPI2C0_MCFGR0_RDMO                       ((uint32_t)1 << 9)     // Receive Data Match Only

    uint32_t             MCFGR1;                                        // Master Configuration Register 1
                                                                        // Prescaler
#define LPI2C0_MCFGR1_PRESCALE(_n)               (((uint32_t)(_n) & 0x7) << 0)
#define LPI2C0_MCFGR1_PRESCALE_INSERT(_v, _n)        (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define LPI2C0_MCFGR1_PRESCALE_EXTRACT(_v)           (((_v) >> 0) & 0x7)
#define LPI2C0_MCFGR1_AUTOSTOP                   ((uint32_t)1 << 8)     // Automatic STOP Generation
#define LPI2C0_MCFGR1_IGNACK                     ((uint32_t)1 << 9)     // IGNACK
#define LPI2C0_MCFGR1_TIMECFG                    ((uint32_t)1 << 10)    // Timeout Configuration
                                                                        // Match Configuration
#define LPI2C0_MCFGR1_MATCFG(_n)                 (((uint32_t)(_n) & 0x7) << 16)
#define LPI2C0_MCFGR1_MATCFG_INSERT(_v, _n)          (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define LPI2C0_MCFGR1_MATCFG_EXTRACT(_v)             (((_v) >> 16) & 0x7)
                                                                        // Pin Configuration
#define LPI2C0_MCFGR1_PINCFG(_n)                 (((uint32_t)(_n) & 0x7) << 24)
#define LPI2C0_MCFGR1_PINCFG_INSERT(_v, _n)          (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define LPI2C0_MCFGR1_PINCFG_EXTRACT(_v)             (((_v) >> 24) & 0x7)

    uint32_t             MCFGR2;                                        // Master Configuration Register 2
                                                                        // Bus Idle Timeout
#define LPI2C0_MCFGR2_BUSIDLE(_n)                (((uint32_t)(_n) & 0xfff) << 0)
#define LPI2C0_MCFGR2_BUSIDLE_INSERT(_v, _n)         (((_v) & ~0xfff) | ((uint32_t)(_n) & 0xfff) << 0)
#define LPI2C0_MCFGR2_BUSIDLE_EXTRACT(_v)            (((_v) >> 0) & 0xfff)
                                                                        // Glitch Filter SCL
#define LPI2C0_MCFGR2_FILTSCL(_n)                (((uint32_t)(_n) & 0xf) << 16)
#define LPI2C0_MCFGR2_FILTSCL_INSERT(_v, _n)         (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define LPI2C0_MCFGR2_FILTSCL_EXTRACT(_v)            (((_v) >> 16) & 0xf)
                                                                        // Glitch Filter SDA
#define LPI2C0_MCFGR2_FILTSDA(_n)                (((uint32_t)(_n) & 0xf) << 24)
#define LPI2C0_MCFGR2_FILTSDA_INSERT(_v, _n)         (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define LPI2C0_MCFGR2_FILTSDA_EXTRACT(_v)            (((_v) >> 24) & 0xf)

    uint32_t             MCFGR3;                                        // Master Configuration Register 3
                                                                        // Pin Low Timeout
#define LPI2C0_MCFGR3_PINLOW(_n)                 (((uint32_t)(_n) & 0xfff) << 8)
#define LPI2C0_MCFGR3_PINLOW_INSERT(_v, _n)          (((_v) & ~0xfff00) | ((uint32_t)(_n) & 0xfff) << 8)
#define LPI2C0_MCFGR3_PINLOW_EXTRACT(_v)             (((_v) >> 8) & 0xfff)

    uint8_t _res1[16];
    uint32_t             MDMR;                                          // Master Data Match Register
                                                                        // Match 0 Value
#define LPI2C0_MDMR_MATCH0(_n)                   (((uint32_t)(_n) & 0xff) << 0)
#define LPI2C0_MDMR_MATCH0_INSERT(_v, _n)            (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define LPI2C0_MDMR_MATCH0_EXTRACT(_v)               (((_v) >> 0) & 0xff)
                                                                        // Match 1 Value
#define LPI2C0_MDMR_MATCH1(_n)                   (((uint32_t)(_n) & 0xff) << 16)
#define LPI2C0_MDMR_MATCH1_INSERT(_v, _n)            (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define LPI2C0_MDMR_MATCH1_EXTRACT(_v)               (((_v) >> 16) & 0xff)

    uint8_t _res2[4];
    uint32_t             MCCR0;                                         // Master Clock Configuration Register 0
                                                                        // Clock Low Period
#define LPI2C0_MCCR0_CLKLO(_n)                   (((uint32_t)(_n) & 0x3f) << 0)
#define LPI2C0_MCCR0_CLKLO_INSERT(_v, _n)            (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define LPI2C0_MCCR0_CLKLO_EXTRACT(_v)               (((_v) >> 0) & 0x3f)
                                                                        // Clock High Period
#define LPI2C0_MCCR0_CLKHI(_n)                   (((uint32_t)(_n) & 0x3f) << 8)
#define LPI2C0_MCCR0_CLKHI_INSERT(_v, _n)            (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define LPI2C0_MCCR0_CLKHI_EXTRACT(_v)               (((_v) >> 8) & 0x3f)
                                                                        // Setup Hold Delay
#define LPI2C0_MCCR0_SETHOLD(_n)                 (((uint32_t)(_n) & 0x3f) << 16)
#define LPI2C0_MCCR0_SETHOLD_INSERT(_v, _n)          (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define LPI2C0_MCCR0_SETHOLD_EXTRACT(_v)             (((_v) >> 16) & 0x3f)
                                                                        // Data Valid Delay
#define LPI2C0_MCCR0_DATAVD(_n)                  (((uint32_t)(_n) & 0x3f) << 24)
#define LPI2C0_MCCR0_DATAVD_INSERT(_v, _n)           (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define LPI2C0_MCCR0_DATAVD_EXTRACT(_v)              (((_v) >> 24) & 0x3f)

    uint8_t _res3[4];
    uint32_t             MCCR1;                                         // Master Clock Configuration Register 1
                                                                        // Clock Low Period
#define LPI2C0_MCCR1_CLKLO(_n)                   (((uint32_t)(_n) & 0x3f) << 0)
#define LPI2C0_MCCR1_CLKLO_INSERT(_v, _n)            (((_v) & ~0x3f) | ((uint32_t)(_n) & 0x3f) << 0)
#define LPI2C0_MCCR1_CLKLO_EXTRACT(_v)               (((_v) >> 0) & 0x3f)
                                                                        // Clock High Period
#define LPI2C0_MCCR1_CLKHI(_n)                   (((uint32_t)(_n) & 0x3f) << 8)
#define LPI2C0_MCCR1_CLKHI_INSERT(_v, _n)            (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define LPI2C0_MCCR1_CLKHI_EXTRACT(_v)               (((_v) >> 8) & 0x3f)
                                                                        // Setup Hold Delay
#define LPI2C0_MCCR1_SETHOLD(_n)                 (((uint32_t)(_n) & 0x3f) << 16)
#define LPI2C0_MCCR1_SETHOLD_INSERT(_v, _n)          (((_v) & ~0x3f0000) | ((uint32_t)(_n) & 0x3f) << 16)
#define LPI2C0_MCCR1_SETHOLD_EXTRACT(_v)             (((_v) >> 16) & 0x3f)
                                                                        // Data Valid Delay
#define LPI2C0_MCCR1_DATAVD(_n)                  (((uint32_t)(_n) & 0x3f) << 24)
#define LPI2C0_MCCR1_DATAVD_INSERT(_v, _n)           (((_v) & ~0x3f000000) | ((uint32_t)(_n) & 0x3f) << 24)
#define LPI2C0_MCCR1_DATAVD_EXTRACT(_v)              (((_v) >> 24) & 0x3f)

    uint8_t _res4[4];
    uint32_t             MFCR;                                          // Master FIFO Control Register
                                                                        // Transmit FIFO Watermark
#define LPI2C0_MFCR_TXWATER(_n)                  (((uint32_t)(_n) & 0x3) << 0)
#define LPI2C0_MFCR_TXWATER_INSERT(_v, _n)           (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define LPI2C0_MFCR_TXWATER_EXTRACT(_v)              (((_v) >> 0) & 0x3)
                                                                        // Receive FIFO Watermark
#define LPI2C0_MFCR_RXWATER(_n)                  (((uint32_t)(_n) & 0x3) << 16)
#define LPI2C0_MFCR_RXWATER_INSERT(_v, _n)           (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define LPI2C0_MFCR_RXWATER_EXTRACT(_v)              (((_v) >> 16) & 0x3)

    const uint32_t       MFSR;                                          // Master FIFO Status Register
                                                                        // Transmit FIFO Count
#define LPI2C0_MFSR_TXCOUNT_EXTRACT(_v)              (((_v) >> 0) & 0x7)
                                                                        // Receive FIFO Count
#define LPI2C0_MFSR_RXCOUNT_EXTRACT(_v)              (((_v) >> 16) & 0x7)

    uint32_t             MTDR;                                          // Master Transmit Data Register
                                                                        // Transmit Data
#define LPI2C0_MTDR_DATA(_n)                     (((uint32_t)(_n) & 0xff) << 0)
#define LPI2C0_MTDR_DATA_INSERT(_v, _n)              (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define LPI2C0_MTDR_DATA_EXTRACT(_v)                 (((_v) >> 0) & 0xff)
                                                                        // Command Data
#define LPI2C0_MTDR_CMD(_n)                      (((uint32_t)(_n) & 0x7) << 8)
#define LPI2C0_MTDR_CMD_INSERT(_v, _n)               (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define LPI2C0_MTDR_CMD_EXTRACT(_v)                  (((_v) >> 8) & 0x7)

    uint8_t _res5[12];
    const uint32_t       MRDR;                                          // Master Receive Data Register
                                                                        // Receive Data
#define LPI2C0_MRDR_DATA_EXTRACT(_v)                 (((_v) >> 0) & 0xff)
#define LPI2C0_MRDR_RXEMPTY                      ((uint32_t)1 << 14)    // RX Empty

    uint8_t _res6[156];
    uint32_t             SCR;                                           // Slave Control Register
#define LPI2C0_SCR_SEN                           ((uint32_t)1 << 0)     // Slave Enable
#define LPI2C0_SCR_RST                           ((uint32_t)1 << 1)     // Software Reset
#define LPI2C0_SCR_FILTEN                        ((uint32_t)1 << 4)     // Filter Enable
#define LPI2C0_SCR_FILTDZ                        ((uint32_t)1 << 5)     // Filter Doze Enable
#define LPI2C0_SCR_RTF                           ((uint32_t)1 << 8)     // Reset Transmit FIFO
#define LPI2C0_SCR_RRF                           ((uint32_t)1 << 9)     // Reset Receive FIFO

    uint32_t             SSR;                                           // Slave Status Register
#define LPI2C0_SSR_TDF                           ((uint32_t)1 << 0)     // Transmit Data Flag
#define LPI2C0_SSR_RDF                           ((uint32_t)1 << 1)     // Receive Data Flag
#define LPI2C0_SSR_AVF                           ((uint32_t)1 << 2)     // Address Valid Flag
#define LPI2C0_SSR_TAF                           ((uint32_t)1 << 3)     // Transmit ACK Flag
#define LPI2C0_SSR_RSF                           ((uint32_t)1 << 8)     // Repeated Start Flag
#define LPI2C0_SSR_SDF                           ((uint32_t)1 << 9)     // STOP Detect Flag
#define LPI2C0_SSR_BEF                           ((uint32_t)1 << 10)    // Bit Error Flag
#define LPI2C0_SSR_FEF                           ((uint32_t)1 << 11)    // FIFO Error Flag
#define LPI2C0_SSR_AM0F                          ((uint32_t)1 << 12)    // Address Match 0 Flag
#define LPI2C0_SSR_AM1F                          ((uint32_t)1 << 13)    // Address Match 1 Flag
#define LPI2C0_SSR_GCF                           ((uint32_t)1 << 14)    // General Call Flag
#define LPI2C0_SSR_SARF                          ((uint32_t)1 << 15)    // SMBus Alert Response Flag
#define LPI2C0_SSR_SBF                           ((uint32_t)1 << 24)    // Slave Busy Flag
#define LPI2C0_SSR_BBF                           ((uint32_t)1 << 25)    // Bus Busy Flag

    uint32_t             SIER;                                          // Slave Interrupt Enable Register
#define LPI2C0_SIER_TDIE                         ((uint32_t)1 << 0)     // Transmit Data Interrupt Enable
#define LPI2C0_SIER_RDIE                         ((uint32_t)1 << 1)     // Receive Data Interrupt Enable
#define LPI2C0_SIER_AVIE                         ((uint32_t)1 << 2)     // Address Valid Interrupt Enable
#define LPI2C0_SIER_TAIE                         ((uint32_t)1 << 3)     // Transmit ACK Interrupt Enable
#define LPI2C0_SIER_RSIE                         ((uint32_t)1 << 8)     // Repeated Start Interrupt Enable
#define LPI2C0_SIER_SDIE                         ((uint32_t)1 << 9)     // STOP Detect Interrupt Enable
#define LPI2C0_SIER_BEIE                         ((uint32_t)1 << 10)    // Bit Error Interrupt Enable
#define LPI2C0_SIER_FEIE                         ((uint32_t)1 << 11)    // FIFO Error Interrupt Enable
#define LPI2C0_SIER_AM0IE                        ((uint32_t)1 << 12)    // Address Match 0 Interrupt Enable
#define LPI2C0_SIER_AM1F                         ((uint32_t)1 << 13)    // Address Match 1 Interrupt Enable
#define LPI2C0_SIER_GCIE                         ((uint32_t)1 << 14)    // General Call Interrupt Enable
#define LPI2C0_SIER_SARIE                        ((uint32_t)1 << 15)    // SMBus Alert Response Interrupt Enable

    uint32_t             SDER;                                          // Slave DMA Enable Register
#define LPI2C0_SDER_TDDE                         ((uint32_t)1 << 0)     // Transmit Data DMA Enable
#define LPI2C0_SDER_RDDE                         ((uint32_t)1 << 1)     // Receive Data DMA Enable
#define LPI2C0_SDER_AVDE                         ((uint32_t)1 << 2)     // Address Valid DMA Enable

    uint8_t _res7[4];
    uint32_t             SCFGR1;                                        // Slave Configuration Register 1
#define LPI2C0_SCFGR1_ADRSTALL                   ((uint32_t)1 << 0)     // Address SCL Stall
#define LPI2C0_SCFGR1_RXSTALL                    ((uint32_t)1 << 1)     // RX SCL Stall
#define LPI2C0_SCFGR1_TXDSTALL                   ((uint32_t)1 << 2)     // TX Data SCL Stall
#define LPI2C0_SCFGR1_ACKSTALL                   ((uint32_t)1 << 3)     // ACK SCL Stall
#define LPI2C0_SCFGR1_GCEN                       ((uint32_t)1 << 8)     // General Call Enable
#define LPI2C0_SCFGR1_SAEN                       ((uint32_t)1 << 9)     // SMBus Alert Enable
#define LPI2C0_SCFGR1_TXCFG                      ((uint32_t)1 << 10)    // Transmit Flag Configuration
#define LPI2C0_SCFGR1_RXCFG                      ((uint32_t)1 << 11)    // Receive Data Configuration
#define LPI2C0_SCFGR1_IGNACK                     ((uint32_t)1 << 12)    // Ignore NACK
#define LPI2C0_SCFGR1_HSMEN                      ((uint32_t)1 << 13)    // High Speed Mode Enable
                                                                        // Address Configuration
#define LPI2C0_SCFGR1_ADDRCFG(_n)                (((uint32_t)(_n) & 0x7) << 16)
#define LPI2C0_SCFGR1_ADDRCFG_INSERT(_v, _n)         (((_v) & ~0x70000) | ((uint32_t)(_n) & 0x7) << 16)
#define LPI2C0_SCFGR1_ADDRCFG_EXTRACT(_v)            (((_v) >> 16) & 0x7)

    uint32_t             SCFGR2;                                        // Slave Configuration Register 2
                                                                        // Clock Hold Time
#define LPI2C0_SCFGR2_CLKHOLD(_n)                (((uint32_t)(_n) & 0xf) << 0)
#define LPI2C0_SCFGR2_CLKHOLD_INSERT(_v, _n)         (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define LPI2C0_SCFGR2_CLKHOLD_EXTRACT(_v)            (((_v) >> 0) & 0xf)
                                                                        // Data Valid Delay
#define LPI2C0_SCFGR2_DATAVD(_n)                 (((uint32_t)(_n) & 0x3f) << 8)
#define LPI2C0_SCFGR2_DATAVD_INSERT(_v, _n)          (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define LPI2C0_SCFGR2_DATAVD_EXTRACT(_v)             (((_v) >> 8) & 0x3f)
                                                                        // Glitch Filter SCL
#define LPI2C0_SCFGR2_FILTSCL(_n)                (((uint32_t)(_n) & 0xf) << 16)
#define LPI2C0_SCFGR2_FILTSCL_INSERT(_v, _n)         (((_v) & ~0xf0000) | ((uint32_t)(_n) & 0xf) << 16)
#define LPI2C0_SCFGR2_FILTSCL_EXTRACT(_v)            (((_v) >> 16) & 0xf)
                                                                        // Glitch Filter SDA
#define LPI2C0_SCFGR2_FILTSDA(_n)                (((uint32_t)(_n) & 0xf) << 24)
#define LPI2C0_SCFGR2_FILTSDA_INSERT(_v, _n)         (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define LPI2C0_SCFGR2_FILTSDA_EXTRACT(_v)            (((_v) >> 24) & 0xf)

    uint8_t _res8[20];
    uint32_t             SAMR;                                          // Slave Address Match Register
                                                                        // Address 0 Value
#define LPI2C0_SAMR_ADDR0(_n)                    (((uint32_t)(_n) & 0x3ff) << 1)
#define LPI2C0_SAMR_ADDR0_INSERT(_v, _n)             (((_v) & ~0x7fe) | ((uint32_t)(_n) & 0x3ff) << 1)
#define LPI2C0_SAMR_ADDR0_EXTRACT(_v)                (((_v) >> 1) & 0x3ff)
                                                                        // Address 1 Value
#define LPI2C0_SAMR_ADDR1(_n)                    (((uint32_t)(_n) & 0x3ff) << 17)
#define LPI2C0_SAMR_ADDR1_INSERT(_v, _n)             (((_v) & ~0x7fe0000) | ((uint32_t)(_n) & 0x3ff) << 17)
#define LPI2C0_SAMR_ADDR1_EXTRACT(_v)                (((_v) >> 17) & 0x3ff)

    uint8_t _res9[12];
    const uint32_t       SASR;                                          // Slave Address Status Register
                                                                        // Received Address
#define LPI2C0_SASR_RADDR_EXTRACT(_v)                (((_v) >> 0) & 0x7ff)
#define LPI2C0_SASR_ANV                          ((uint32_t)1 << 14)    // Address Not Valid

    uint32_t             STAR;                                          // Slave Transmit ACK Register
#define LPI2C0_STAR_TXNACK                       ((uint32_t)1 << 0)     // Transmit NACK

    uint8_t _res10[8];
    uint32_t             STDR;                                          // Slave Transmit Data Register
                                                                        // Transmit Data
#define LPI2C0_STDR_DATA(_n)                     (((uint32_t)(_n) & 0xff) << 0)
#define LPI2C0_STDR_DATA_INSERT(_v, _n)              (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define LPI2C0_STDR_DATA_EXTRACT(_v)                 (((_v) >> 0) & 0xff)

    uint8_t _res11[12];
    const uint32_t       SRDR;                                          // Slave Receive Data Register
                                                                        // Receive Data
#define LPI2C0_SRDR_DATA_EXTRACT(_v)                 (((_v) >> 0) & 0xff)
#define LPI2C0_SRDR_RXEMPTY                      ((uint32_t)1 << 14)    // RX Empty
#define LPI2C0_SRDR_SOF                          ((uint32_t)1 << 15)    // Start Of Frame

} LPI2C0_regs_t;
                                                                        // --------------------
                                                                        // Universal Asynchronous Receiver/Transmitter
typedef struct                                                          // --------------------
{
    const uint32_t       VERID;                                         // Version ID Register
                                                                        // Feature Identification Number
#define LPUART_VERID_FEATURE_EXTRACT(_v)             (((_v) >> 0) & 0xffff)
                                                                        // Minor Version Number
#define LPUART_VERID_MINOR_EXTRACT(_v)               (((_v) >> 16) & 0xff)
                                                                        // Major Version Number
#define LPUART_VERID_MAJOR_EXTRACT(_v)               (((_v) >> 24) & 0xff)

    const uint32_t       PARAM;                                         // Parameter Register
                                                                        // Transmit FIFO Size
#define LPUART_PARAM_TXFIFO_EXTRACT(_v)              (((_v) >> 0) & 0xff)
                                                                        // Receive FIFO Size
#define LPUART_PARAM_RXFIFO_EXTRACT(_v)              (((_v) >> 8) & 0xff)

    uint32_t             GLOBAL;                                        // LPUART Global Register
#define LPUART_GLOBAL_RST                        ((uint32_t)1 << 1)     // Software Reset

    uint32_t             PINCFG;                                        // LPUART Pin Configuration Register
                                                                        // Trigger Select
#define LPUART_PINCFG_TRGSEL(_n)                 (((uint32_t)(_n) & 0x3) << 0)
#define LPUART_PINCFG_TRGSEL_INSERT(_v, _n)          (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define LPUART_PINCFG_TRGSEL_EXTRACT(_v)             (((_v) >> 0) & 0x3)

    uint32_t             BAUD;                                          // LPUART Baud Rate Register
                                                                        // Baud Rate Modulo Divisor.
#define LPUART_BAUD_SBR(_n)                      (((uint32_t)(_n) & 0x1fff) << 0)
#define LPUART_BAUD_SBR_INSERT(_v, _n)               (((_v) & ~0x1fff) | ((uint32_t)(_n) & 0x1fff) << 0)
#define LPUART_BAUD_SBR_EXTRACT(_v)                  (((_v) >> 0) & 0x1fff)
#define LPUART_BAUD_SBNS                         ((uint32_t)1 << 13)    // Stop Bit Number Select
#define LPUART_BAUD_RXEDGIE                      ((uint32_t)1 << 14)    // RX Input Active Edge Interrupt Enable
#define LPUART_BAUD_LBKDIE                       ((uint32_t)1 << 15)    // LIN Break Detect Interrupt Enable
#define LPUART_BAUD_RESYNCDIS                    ((uint32_t)1 << 16)    // Resynchronization Disable
#define LPUART_BAUD_BOTHEDGE                     ((uint32_t)1 << 17)    // Both Edge Sampling
                                                                        // Match Configuration
#define LPUART_BAUD_MATCFG(_n)                   (((uint32_t)(_n) & 0x3) << 18)
#define LPUART_BAUD_MATCFG_INSERT(_v, _n)            (((_v) & ~0xc0000) | ((uint32_t)(_n) & 0x3) << 18)
#define LPUART_BAUD_MATCFG_EXTRACT(_v)               (((_v) >> 18) & 0x3)
#define LPUART_BAUD_RIDMAE                       ((uint32_t)1 << 20)    // Receiver Idle DMA Enable
#define LPUART_BAUD_RDMAE                        ((uint32_t)1 << 21)    // Receiver Full DMA Enable
#define LPUART_BAUD_TDMAE                        ((uint32_t)1 << 23)    // Transmitter DMA Enable
                                                                        // Oversampling Ratio
#define LPUART_BAUD_OSR(_n)                      (((uint32_t)(_n) & 0x1f) << 24)
#define LPUART_BAUD_OSR_INSERT(_v, _n)               (((_v) & ~0x1f000000) | ((uint32_t)(_n) & 0x1f) << 24)
#define LPUART_BAUD_OSR_EXTRACT(_v)                  (((_v) >> 24) & 0x1f)
#define LPUART_BAUD_M10                          ((uint32_t)1 << 29)    // 10-bit Mode select
#define LPUART_BAUD_MAEN2                        ((uint32_t)1 << 30)    // Match Address Mode Enable 2
#define LPUART_BAUD_MAEN1                        ((uint32_t)1 << 31)    // Match Address Mode Enable 1

    uint32_t             STAT;                                          // LPUART Status Register
#define LPUART_STAT_MA2F                         ((uint32_t)1 << 14)    // Match 2 Flag
#define LPUART_STAT_MA1F                         ((uint32_t)1 << 15)    // Match 1 Flag
#define LPUART_STAT_PF                           ((uint32_t)1 << 16)    // Parity Error Flag
#define LPUART_STAT_FE                           ((uint32_t)1 << 17)    // Framing Error Flag
#define LPUART_STAT_NF                           ((uint32_t)1 << 18)    // Noise Flag
#define LPUART_STAT_OR                           ((uint32_t)1 << 19)    // Receiver Overrun Flag
#define LPUART_STAT_IDLE                         ((uint32_t)1 << 20)    // Idle Line Flag
#define LPUART_STAT_RDRF                         ((uint32_t)1 << 21)    // Receive Data Register Full Flag
#define LPUART_STAT_TC                           ((uint32_t)1 << 22)    // Transmission Complete Flag
#define LPUART_STAT_TDRE                         ((uint32_t)1 << 23)    // Transmit Data Register Empty Flag
#define LPUART_STAT_RAF                          ((uint32_t)1 << 24)    // Receiver Active Flag
#define LPUART_STAT_LBKDE                        ((uint32_t)1 << 25)    // LIN Break Detection Enable
#define LPUART_STAT_BRK13                        ((uint32_t)1 << 26)    // Break Character Generation Length
#define LPUART_STAT_RWUID                        ((uint32_t)1 << 27)    // Receive Wake Up Idle Detect
#define LPUART_STAT_RXINV                        ((uint32_t)1 << 28)    // Receive Data Inversion
#define LPUART_STAT_MSBF                         ((uint32_t)1 << 29)    // MSB First
#define LPUART_STAT_RXEDGIF                      ((uint32_t)1 << 30)    // RXD Pin Active Edge Interrupt Flag
#define LPUART_STAT_LBKDIF                       ((uint32_t)1 << 31)    // LIN Break Detect Interrupt Flag

    uint32_t             CTRL;                                          // LPUART Control Register
#define LPUART_CTRL_PT                           ((uint32_t)1 << 0)     // Parity Type
#define LPUART_CTRL_PE                           ((uint32_t)1 << 1)     // Parity Enable
#define LPUART_CTRL_ILT                          ((uint32_t)1 << 2)     // Idle Line Type Select
#define LPUART_CTRL_WAKE                         ((uint32_t)1 << 3)     // Receiver Wakeup Method Select
#define LPUART_CTRL_M                            ((uint32_t)1 << 4)     // 9-Bit or 8-Bit Mode Select
#define LPUART_CTRL_RSRC                         ((uint32_t)1 << 5)     // Receiver Source Select
#define LPUART_CTRL_DOZEEN                       ((uint32_t)1 << 6)     // Doze Enable
#define LPUART_CTRL_LOOPS                        ((uint32_t)1 << 7)     // Loop Mode Select
                                                                        // Idle Configuration
#define LPUART_CTRL_IDLECFG(_n)                  (((uint32_t)(_n) & 0x7) << 8)
#define LPUART_CTRL_IDLECFG_INSERT(_v, _n)           (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define LPUART_CTRL_IDLECFG_EXTRACT(_v)              (((_v) >> 8) & 0x7)
#define LPUART_CTRL_M7                           ((uint32_t)1 << 11)    // 7-Bit Mode Select
#define LPUART_CTRL_MA2IE                        ((uint32_t)1 << 14)    // Match 2 Interrupt Enable
#define LPUART_CTRL_MA1IE                        ((uint32_t)1 << 15)    // Match 1 Interrupt Enable
#define LPUART_CTRL_SBK                          ((uint32_t)1 << 16)    // Send Break
#define LPUART_CTRL_RWU                          ((uint32_t)1 << 17)    // Receiver Wakeup Control
#define LPUART_CTRL_RE                           ((uint32_t)1 << 18)    // Receiver Enable
#define LPUART_CTRL_TE                           ((uint32_t)1 << 19)    // Transmitter Enable
#define LPUART_CTRL_ILIE                         ((uint32_t)1 << 20)    // Idle Line Interrupt Enable
#define LPUART_CTRL_RIE                          ((uint32_t)1 << 21)    // Receiver Interrupt Enable
#define LPUART_CTRL_TCIE                         ((uint32_t)1 << 22)    // Transmission Complete Interrupt Enable for
#define LPUART_CTRL_TIE                          ((uint32_t)1 << 23)    // Transmit Interrupt Enable
#define LPUART_CTRL_PEIE                         ((uint32_t)1 << 24)    // Parity Error Interrupt Enable
#define LPUART_CTRL_FEIE                         ((uint32_t)1 << 25)    // Framing Error Interrupt Enable
#define LPUART_CTRL_NEIE                         ((uint32_t)1 << 26)    // Noise Error Interrupt Enable
#define LPUART_CTRL_ORIE                         ((uint32_t)1 << 27)    // Overrun Interrupt Enable
#define LPUART_CTRL_TXINV                        ((uint32_t)1 << 28)    // Transmit Data Inversion
#define LPUART_CTRL_TXDIR                        ((uint32_t)1 << 29)    // TXD Pin Direction in Single-Wire Mode
#define LPUART_CTRL_R9T8                         ((uint32_t)1 << 30)    // Receive Bit 9 / Transmit Bit 8
#define LPUART_CTRL_R8T9                         ((uint32_t)1 << 31)    // Receive Bit 8 / Transmit Bit 9

    uint32_t             DATA;                                          // LPUART Data Register
#define LPUART_DATA_R0T0                         ((uint32_t)1 << 0)     // R0T0
#define LPUART_DATA_R1T1                         ((uint32_t)1 << 1)     // R1T1
#define LPUART_DATA_R2T2                         ((uint32_t)1 << 2)     // R2T2
#define LPUART_DATA_R3T3                         ((uint32_t)1 << 3)     // R3T3
#define LPUART_DATA_R4T4                         ((uint32_t)1 << 4)     // R4T4
#define LPUART_DATA_R5T5                         ((uint32_t)1 << 5)     // R5T5
#define LPUART_DATA_R6T6                         ((uint32_t)1 << 6)     // R6T6
#define LPUART_DATA_R7T7                         ((uint32_t)1 << 7)     // R7T7
#define LPUART_DATA_R8T8                         ((uint32_t)1 << 8)     // R8T8
#define LPUART_DATA_R9T9                         ((uint32_t)1 << 9)     // R9T9
#define LPUART_DATA_IDLINE                       ((uint32_t)1 << 11)    // Idle Line
#define LPUART_DATA_RXEMPT                       ((uint32_t)1 << 12)    // Receive Buffer Empty
#define LPUART_DATA_FRETSC                       ((uint32_t)1 << 13)    // Frame Error / Transmit Special Character
#define LPUART_DATA_PARITYE                      ((uint32_t)1 << 14)    // PARITYE
#define LPUART_DATA_NOISY                        ((uint32_t)1 << 15)    // NOISY

    uint32_t             MATCH;                                         // LPUART Match Address Register
                                                                        // Match Address 1
#define LPUART_MATCH_MA1(_n)                     (((uint32_t)(_n) & 0x3ff) << 0)
#define LPUART_MATCH_MA1_INSERT(_v, _n)              (((_v) & ~0x3ff) | ((uint32_t)(_n) & 0x3ff) << 0)
#define LPUART_MATCH_MA1_EXTRACT(_v)                 (((_v) >> 0) & 0x3ff)
                                                                        // Match Address 2
#define LPUART_MATCH_MA2(_n)                     (((uint32_t)(_n) & 0x3ff) << 16)
#define LPUART_MATCH_MA2_INSERT(_v, _n)              (((_v) & ~0x3ff0000) | ((uint32_t)(_n) & 0x3ff) << 16)
#define LPUART_MATCH_MA2_EXTRACT(_v)                 (((_v) >> 16) & 0x3ff)

    uint32_t             MODIR;                                         // LPUART Modem IrDA Register
#define LPUART_MODIR_TXCTSE                      ((uint32_t)1 << 0)     // Transmitter clear-to-send enable
#define LPUART_MODIR_TXRTSE                      ((uint32_t)1 << 1)     // Transmitter request-to-send enable
#define LPUART_MODIR_TXRTSPOL                    ((uint32_t)1 << 2)     // Transmitter request-to-send polarity
#define LPUART_MODIR_RXRTSE                      ((uint32_t)1 << 3)     // Receiver request-to-send enable
#define LPUART_MODIR_TXCTSC                      ((uint32_t)1 << 4)     // Transmit CTS Configuration
#define LPUART_MODIR_TXCTSSRC                    ((uint32_t)1 << 5)     // Transmit CTS Source
                                                                        // Receive RTS Configuration
#define LPUART_MODIR_RTSWATER(_n)                (((uint32_t)(_n) & 0x3) << 8)
#define LPUART_MODIR_RTSWATER_INSERT(_v, _n)         (((_v) & ~0x300) | ((uint32_t)(_n) & 0x3) << 8)
#define LPUART_MODIR_RTSWATER_EXTRACT(_v)            (((_v) >> 8) & 0x3)
                                                                        // Transmitter narrow pulse
#define LPUART_MODIR_TNP(_n)                     (((uint32_t)(_n) & 0x3) << 16)
#define LPUART_MODIR_TNP_INSERT(_v, _n)              (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define LPUART_MODIR_TNP_EXTRACT(_v)                 (((_v) >> 16) & 0x3)
#define LPUART_MODIR_IREN                        ((uint32_t)1 << 18)    // Infrared enable

    uint32_t             FIFO;                                          // LPUART FIFO Register
                                                                        // Receive FIFO. Buffer Depth
#define LPUART_FIFO_RXFIFOSIZE(_n)               (((uint32_t)(_n) & 0x7) << 0)
#define LPUART_FIFO_RXFIFOSIZE_INSERT(_v, _n)        (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define LPUART_FIFO_RXFIFOSIZE_EXTRACT(_v)           (((_v) >> 0) & 0x7)
#define LPUART_FIFO_RXFE                         ((uint32_t)1 << 3)     // Receive FIFO Enable
                                                                        // Transmit FIFO. Buffer Depth
#define LPUART_FIFO_TXFIFOSIZE(_n)               (((uint32_t)(_n) & 0x7) << 4)
#define LPUART_FIFO_TXFIFOSIZE_INSERT(_v, _n)        (((_v) & ~0x70) | ((uint32_t)(_n) & 0x7) << 4)
#define LPUART_FIFO_TXFIFOSIZE_EXTRACT(_v)           (((_v) >> 4) & 0x7)
#define LPUART_FIFO_TXFE                         ((uint32_t)1 << 7)     // Transmit FIFO Enable
#define LPUART_FIFO_RXUFE                        ((uint32_t)1 << 8)     // Receive FIFO Underflow Interrupt Enable
#define LPUART_FIFO_TXOFE                        ((uint32_t)1 << 9)     // Transmit FIFO Overflow Interrupt Enable
                                                                        // Receiver Idle Empty Enable
#define LPUART_FIFO_RXIDEN(_n)                   (((uint32_t)(_n) & 0x7) << 10)
#define LPUART_FIFO_RXIDEN_INSERT(_v, _n)            (((_v) & ~0x1c00) | ((uint32_t)(_n) & 0x7) << 10)
#define LPUART_FIFO_RXIDEN_EXTRACT(_v)               (((_v) >> 10) & 0x7)
#define LPUART_FIFO_RXFLUSH                      ((uint32_t)1 << 14)    // Receive FIFO/Buffer Flush
#define LPUART_FIFO_TXFLUSH                      ((uint32_t)1 << 15)    // Transmit FIFO/Buffer Flush
#define LPUART_FIFO_RXUF                         ((uint32_t)1 << 16)    // Receiver Buffer Underflow Flag
#define LPUART_FIFO_TXOF                         ((uint32_t)1 << 17)    // Transmitter Buffer Overflow Flag
#define LPUART_FIFO_RXEMPT                       ((uint32_t)1 << 22)    // Receive Buffer/FIFO Empty
#define LPUART_FIFO_TXEMPT                       ((uint32_t)1 << 23)    // Transmit Buffer/FIFO Empty

    uint32_t             WATER;                                         // LPUART Watermark Register
                                                                        // Transmit Watermark
#define LPUART_WATER_TXWATER(_n)                 (((uint32_t)(_n) & 0x3) << 0)
#define LPUART_WATER_TXWATER_INSERT(_v, _n)          (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define LPUART_WATER_TXWATER_EXTRACT(_v)             (((_v) >> 0) & 0x3)
                                                                        // Transmit Counter
#define LPUART_WATER_TXCOUNT(_n)                 (((uint32_t)(_n) & 0x7) << 8)
#define LPUART_WATER_TXCOUNT_INSERT(_v, _n)          (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define LPUART_WATER_TXCOUNT_EXTRACT(_v)             (((_v) >> 8) & 0x7)
                                                                        // Receive Watermark
#define LPUART_WATER_RXWATER(_n)                 (((uint32_t)(_n) & 0x3) << 16)
#define LPUART_WATER_RXWATER_INSERT(_v, _n)          (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define LPUART_WATER_RXWATER_EXTRACT(_v)             (((_v) >> 16) & 0x3)
                                                                        // Receive Counter
#define LPUART_WATER_RXCOUNT(_n)                 (((uint32_t)(_n) & 0x7) << 24)
#define LPUART_WATER_RXCOUNT_INSERT(_v, _n)          (((_v) & ~0x7000000) | ((uint32_t)(_n) & 0x7) << 24)
#define LPUART_WATER_RXCOUNT_EXTRACT(_v)             (((_v) >> 24) & 0x7)

} LPUART_regs_t;
                                                                        // --------------------
                                                                        // High-Speed Comparator (CMP), Voltage Reference (VREF) Digital-to-Analog Converter (DAC), and Analog Mux (ANMUX)
typedef struct                                                          // --------------------
{
    uint32_t             C0;                                            // CMP Control Register 0
                                                                        // Comparator hard block hysteresis control. See chip data sheet to get the actual hysteresis value with each level
#define CMP0_C0_HYSTCTR(_n)                      (((uint32_t)(_n) & 0x3) << 0)
#define CMP0_C0_HYSTCTR_INSERT(_v, _n)               (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define CMP0_C0_HYSTCTR_EXTRACT(_v)                  (((_v) >> 0) & 0x3)
#define CMP0_C0_OFFSET                           ((uint32_t)1 << 2)     // Comparator hard block offset control. See chip data sheet to get the actual offset value with each level
                                                                        // Filter Sample Count
#define CMP0_C0_FILTER_CNT(_n)                   (((uint32_t)(_n) & 0x7) << 4)
#define CMP0_C0_FILTER_CNT_INSERT(_v, _n)            (((_v) & ~0x70) | ((uint32_t)(_n) & 0x7) << 4)
#define CMP0_C0_FILTER_CNT_EXTRACT(_v)               (((_v) >> 4) & 0x7)
#define CMP0_C0_EN                               ((uint32_t)1 << 8)     // Comparator Module Enable
#define CMP0_C0_OPE                              ((uint32_t)1 << 9)     // Comparator Output Pin Enable
#define CMP0_C0_COS                              ((uint32_t)1 << 10)    // Comparator Output Select
#define CMP0_C0_INVT                             ((uint32_t)1 << 11)    // Comparator invert
#define CMP0_C0_PMODE                            ((uint32_t)1 << 12)    // Power Mode Select
#define CMP0_C0_WE                               ((uint32_t)1 << 14)    // Windowing Enable
#define CMP0_C0_SE                               ((uint32_t)1 << 15)    // Sample Enable
                                                                        // Filter Sample Period
#define CMP0_C0_FPR(_n)                          (((uint32_t)(_n) & 0xff) << 16)
#define CMP0_C0_FPR_INSERT(_v, _n)                   (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define CMP0_C0_FPR_EXTRACT(_v)                      (((_v) >> 16) & 0xff)
#define CMP0_C0_COUT                             ((uint32_t)1 << 24)    // Analog Comparator Output
#define CMP0_C0_CFF                              ((uint32_t)1 << 25)    // Analog Comparator Flag Falling
#define CMP0_C0_CFR                              ((uint32_t)1 << 26)    // Analog Comparator Flag Rising
#define CMP0_C0_IEF                              ((uint32_t)1 << 27)    // Comparator Interrupt Enable Falling
#define CMP0_C0_IER                              ((uint32_t)1 << 28)    // Comparator Interrupt Enable Rising
#define CMP0_C0_DMAEN                            ((uint32_t)1 << 30)    // DMA Enable

    uint32_t             C1;                                            // CMP Control Register 1
                                                                        // DAC Output Voltage Select
#define CMP0_C1_VOSEL(_n)                        (((uint32_t)(_n) & 0xff) << 0)
#define CMP0_C1_VOSEL_INSERT(_v, _n)                 (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CMP0_C1_VOSEL_EXTRACT(_v)                    (((_v) >> 0) & 0xff)
                                                                        // Minus Input MUX Control
#define CMP0_C1_MSEL(_n)                         (((uint32_t)(_n) & 0x7) << 8)
#define CMP0_C1_MSEL_INSERT(_v, _n)                  (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define CMP0_C1_MSEL_EXTRACT(_v)                     (((_v) >> 8) & 0x7)
                                                                        // Plus Input MUX Control
#define CMP0_C1_PSEL(_n)                         (((uint32_t)(_n) & 0x7) << 11)
#define CMP0_C1_PSEL_INSERT(_v, _n)                  (((_v) & ~0x3800) | ((uint32_t)(_n) & 0x7) << 11)
#define CMP0_C1_PSEL_EXTRACT(_v)                     (((_v) >> 11) & 0x7)
#define CMP0_C1_VRSEL                            ((uint32_t)1 << 14)    // Supply Voltage Reference Source Select
#define CMP0_C1_DACEN                            ((uint32_t)1 << 15)    // DAC Enable
#define CMP0_C1_CHN0                             ((uint32_t)1 << 16)    // Channel 0 input enable
#define CMP0_C1_CHN1                             ((uint32_t)1 << 17)    // Channel 1 input enable
#define CMP0_C1_CHN2                             ((uint32_t)1 << 18)    // Channel 2 input enable
#define CMP0_C1_CHN3                             ((uint32_t)1 << 19)    // Channel 3 input enable
#define CMP0_C1_CHN4                             ((uint32_t)1 << 20)    // Channel 4 input enable
#define CMP0_C1_CHN5                             ((uint32_t)1 << 21)    // Channel 5 input enable
#define CMP0_C1_CHN6                             ((uint32_t)1 << 22)    // Channel 6 input enable
#define CMP0_C1_CHN7                             ((uint32_t)1 << 23)    // Channel 7 input enable
                                                                        // Selection of the input to the negative port of the comparator
#define CMP0_C1_INNSEL(_n)                       (((uint32_t)(_n) & 0x3) << 24)
#define CMP0_C1_INNSEL_INSERT(_v, _n)                (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define CMP0_C1_INNSEL_EXTRACT(_v)                   (((_v) >> 24) & 0x3)
                                                                        // Selection of the input to the positive port of the comparator
#define CMP0_C1_INPSEL(_n)                       (((uint32_t)(_n) & 0x3) << 27)
#define CMP0_C1_INPSEL_INSERT(_v, _n)                (((_v) & ~0x18000000) | ((uint32_t)(_n) & 0x3) << 27)
#define CMP0_C1_INPSEL_EXTRACT(_v)                   (((_v) >> 27) & 0x3)

    uint32_t             C2;                                            // CMP Control Register 2
                                                                        // The result of the input comparison for channel n
#define CMP0_C2_ACOn(_n)                         (((uint32_t)(_n) & 0xff) << 0)
#define CMP0_C2_ACOn_INSERT(_v, _n)                  (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define CMP0_C2_ACOn_EXTRACT(_v)                     (((_v) >> 0) & 0xff)
                                                                        // Comparator and DAC initialization delay modulus.
#define CMP0_C2_INITMOD(_n)                      (((uint32_t)(_n) & 0x3f) << 8)
#define CMP0_C2_INITMOD_INSERT(_v, _n)               (((_v) & ~0x3f00) | ((uint32_t)(_n) & 0x3f) << 8)
#define CMP0_C2_INITMOD_EXTRACT(_v)                  (((_v) >> 8) & 0x3f)
                                                                        // Number of sample clocks
#define CMP0_C2_NSAM(_n)                         (((uint32_t)(_n) & 0x3) << 14)
#define CMP0_C2_NSAM_INSERT(_v, _n)                  (((_v) & ~0xc000) | ((uint32_t)(_n) & 0x3) << 14)
#define CMP0_C2_NSAM_EXTRACT(_v)                     (((_v) >> 14) & 0x3)
#define CMP0_C2_CH0F                             ((uint32_t)1 << 16)    // Channel 0 input changed flag
#define CMP0_C2_CH1F                             ((uint32_t)1 << 17)    // Channel 1 input changed flag
#define CMP0_C2_CH2F                             ((uint32_t)1 << 18)    // Channel 2 input changed flag
#define CMP0_C2_CH3F                             ((uint32_t)1 << 19)    // Channel 3 input changed flag
#define CMP0_C2_CH4F                             ((uint32_t)1 << 20)    // Channel 4 input changed flag
#define CMP0_C2_CH5F                             ((uint32_t)1 << 21)    // Channel 5 input changed flag
#define CMP0_C2_CH6F                             ((uint32_t)1 << 22)    // Channel 6 input changed flag
#define CMP0_C2_CH7F                             ((uint32_t)1 << 23)    // Channel 7 input changed flag
                                                                        // Fixed channel selection
#define CMP0_C2_FXMXCH(_n)                       (((uint32_t)(_n) & 0x7) << 25)
#define CMP0_C2_FXMXCH_INSERT(_v, _n)                (((_v) & ~0xe000000) | ((uint32_t)(_n) & 0x7) << 25)
#define CMP0_C2_FXMXCH_EXTRACT(_v)                   (((_v) >> 25) & 0x7)
#define CMP0_C2_FXMP                             ((uint32_t)1 << 29)    // Fixed MUX Port
#define CMP0_C2_RRIE                             ((uint32_t)1 << 30)    // Round-Robin interrupt enable
#define CMP0_C2_RRE                              ((uint32_t)1 << 31)    // Round-Robin Enable

} CMP0_regs_t;
                                                                        // --------------------
                                                                        // PMC
typedef struct                                                          // --------------------
{
    uint8_t              LVDSC1;                                        // Low Voltage Detect Status and Control 1 Register
#define PMC_LVDSC1_LVDRE                         ((uint8_t)1 << 4)      // Low Voltage Detect Reset Enable
#define PMC_LVDSC1_LVDIE                         ((uint8_t)1 << 5)      // Low Voltage Detect Interrupt Enable
#define PMC_LVDSC1_LVDACK                        ((uint8_t)1 << 6)      // Low Voltage Detect Acknowledge
#define PMC_LVDSC1_LVDF                          ((uint8_t)1 << 7)      // Low Voltage Detect Flag

    uint8_t              LVDSC2;                                        // Low Voltage Detect Status and Control 2 Register
#define PMC_LVDSC2_LVWIE                         ((uint8_t)1 << 5)      // Low-Voltage Warning Interrupt Enable
#define PMC_LVDSC2_LVWACK                        ((uint8_t)1 << 6)      // Low-Voltage Warning Acknowledge
#define PMC_LVDSC2_LVWF                          ((uint8_t)1 << 7)      // Low-Voltage Warning Flag

    uint8_t              REGSC;                                         // Regulator Status and Control Register
#define PMC_REGSC_BIASEN                         ((uint8_t)1 << 0)      // Bias Enable Bit
#define PMC_REGSC_CLKBIASDIS                     ((uint8_t)1 << 1)      // Clock Bias Disable Bit
#define PMC_REGSC_REGFPM                         ((uint8_t)1 << 2)      // Regulator in Full Performance Mode Status Bit
#define PMC_REGSC_LPOSTAT                        ((uint8_t)1 << 6)      // LPO Status Bit
#define PMC_REGSC_LPODIS                         ((uint8_t)1 << 7)      // LPO Disable Bit

    uint8_t _res0[1];
    uint8_t              LPOTRIM;                                       // Low Power Oscillator Trim Register
                                                                        // LPO trimming bits
#define PMC_LPOTRIM_LPOTRIM(_n)                  (((uint8_t)(_n) & 0x1f) << 0)
#define PMC_LPOTRIM_LPOTRIM_INSERT(_v, _n)           (((_v) & ~0x1f) | ((uint8_t)(_n) & 0x1f) << 0)
#define PMC_LPOTRIM_LPOTRIM_EXTRACT(_v)              (((_v) >> 0) & 0x1f)

} PMC_regs_t;
                                                                        // --------------------
                                                                        // System Mode Controller
typedef struct                                                          // --------------------
{
    const uint32_t       VERID;                                         // SMC Version ID Register
                                                                        // Feature Specification Number
#define SMC_VERID_FEATURE_EXTRACT(_v)                (((_v) >> 0) & 0xffff)
                                                                        // Minor Version Number
#define SMC_VERID_MINOR_EXTRACT(_v)                  (((_v) >> 16) & 0xff)
                                                                        // Major Version Number
#define SMC_VERID_MAJOR_EXTRACT(_v)                  (((_v) >> 24) & 0xff)

    const uint32_t       PARAM;                                         // SMC Parameter Register
#define SMC_PARAM_EHSRUN                         ((uint32_t)1 << 0)     // Existence of HSRUN feature
#define SMC_PARAM_ELLS                           ((uint32_t)1 << 3)     // Existence of LLS feature
#define SMC_PARAM_ELLS2                          ((uint32_t)1 << 5)     // Existence of LLS2 feature
#define SMC_PARAM_EVLLS0                         ((uint32_t)1 << 6)     // Existence of VLLS0 feature

    uint32_t             PMPROT;                                        // Power Mode Protection register
#define SMC_PMPROT_AVLP                          ((uint32_t)1 << 5)     // Allow Very-Low-Power Modes
#define SMC_PMPROT_AHSRUN                        ((uint32_t)1 << 7)     // Allow High Speed Run mode

    uint32_t             PMCTRL;                                        // Power Mode Control register
                                                                        // Stop Mode Control
#define SMC_PMCTRL_STOPM(_n)                     (((uint32_t)(_n) & 0x7) << 0)
#define SMC_PMCTRL_STOPM_INSERT(_v, _n)              (((_v) & ~0x7) | ((uint32_t)(_n) & 0x7) << 0)
#define SMC_PMCTRL_STOPM_EXTRACT(_v)                 (((_v) >> 0) & 0x7)
#define SMC_PMCTRL_VLPSA                         ((uint32_t)1 << 3)     // Very Low Power Stop Aborted
                                                                        // Run Mode Control
#define SMC_PMCTRL_RUNM(_n)                      (((uint32_t)(_n) & 0x3) << 5)
#define SMC_PMCTRL_RUNM_INSERT(_v, _n)               (((_v) & ~0x60) | ((uint32_t)(_n) & 0x3) << 5)
#define SMC_PMCTRL_RUNM_EXTRACT(_v)                  (((_v) >> 5) & 0x3)

    uint32_t             STOPCTRL;                                      // Stop Control Register
                                                                        // Stop Option
#define SMC_STOPCTRL_STOPO(_n)                   (((uint32_t)(_n) & 0x3) << 6)
#define SMC_STOPCTRL_STOPO_INSERT(_v, _n)            (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define SMC_STOPCTRL_STOPO_EXTRACT(_v)               (((_v) >> 6) & 0x3)

    const uint32_t       PMSTAT;                                        // Power Mode Status register
                                                                        // Power Mode Status
#define SMC_PMSTAT_PMSTAT_EXTRACT(_v)                (((_v) >> 0) & 0xff)

} SMC_regs_t;
                                                                        // --------------------
                                                                        // Reset Control Module
typedef struct                                                          // --------------------
{
    const uint32_t       VERID;                                         // Version ID Register
                                                                        // Feature Specification Number
#define RCM_VERID_FEATURE_EXTRACT(_v)                (((_v) >> 0) & 0xffff)
                                                                        // Minor Version Number
#define RCM_VERID_MINOR_EXTRACT(_v)                  (((_v) >> 16) & 0xff)
                                                                        // Major Version Number
#define RCM_VERID_MAJOR_EXTRACT(_v)                  (((_v) >> 24) & 0xff)

    const uint32_t       PARAM;                                         // Parameter Register
#define RCM_PARAM_EWAKEUP                        ((uint32_t)1 << 0)     // Existence of SRS[WAKEUP] status indication feature
#define RCM_PARAM_ELVD                           ((uint32_t)1 << 1)     // Existence of SRS[LVD] status indication feature
#define RCM_PARAM_ELOC                           ((uint32_t)1 << 2)     // Existence of SRS[LOC] status indication feature
#define RCM_PARAM_ELOL                           ((uint32_t)1 << 3)     // Existence of SRS[LOL] status indication feature
#define RCM_PARAM_EWDOG                          ((uint32_t)1 << 5)     // Existence of SRS[WDOG] status indication feature
#define RCM_PARAM_EPIN                           ((uint32_t)1 << 6)     // Existence of SRS[PIN] status indication feature
#define RCM_PARAM_EPOR                           ((uint32_t)1 << 7)     // Existence of SRS[POR] status indication feature
#define RCM_PARAM_EJTAG                          ((uint32_t)1 << 8)     // Existence of SRS[JTAG] status indication feature
#define RCM_PARAM_ELOCKUP                        ((uint32_t)1 << 9)     // Existence of SRS[LOCKUP] status indication feature
#define RCM_PARAM_ESW                            ((uint32_t)1 << 10)    // Existence of SRS[SW] status indication feature
#define RCM_PARAM_EMDM_AP                        ((uint32_t)1 << 11)    // Existence of SRS[MDM_AP] status indication feature
#define RCM_PARAM_ESACKERR                       ((uint32_t)1 << 13)    // Existence of SRS[SACKERR] status indication feature
#define RCM_PARAM_ETAMPER                        ((uint32_t)1 << 15)    // Existence of SRS[TAMPER] status indication feature
#define RCM_PARAM_ECORE1                         ((uint32_t)1 << 16)    // Existence of SRS[CORE1] status indication feature

    const uint32_t       SRS;                                           // System Reset Status Register
#define RCM_SRS_LVD                              ((uint32_t)1 << 1)     // Low-Voltage Detect Reset or High-Voltage Detect Reset
#define RCM_SRS_LOC                              ((uint32_t)1 << 2)     // Loss-of-Clock Reset
#define RCM_SRS_LOL                              ((uint32_t)1 << 3)     // Loss-of-Lock Reset
#define RCM_SRS_WDOG                             ((uint32_t)1 << 5)     // Watchdog
#define RCM_SRS_PIN                              ((uint32_t)1 << 6)     // External Reset Pin
#define RCM_SRS_POR                              ((uint32_t)1 << 7)     // Power-On Reset
#define RCM_SRS_JTAG                             ((uint32_t)1 << 8)     // JTAG generated reset
#define RCM_SRS_LOCKUP                           ((uint32_t)1 << 9)     // Core Lockup
#define RCM_SRS_SW                               ((uint32_t)1 << 10)    // Software
#define RCM_SRS_MDM_AP                           ((uint32_t)1 << 11)    // MDM-AP System Reset Request
#define RCM_SRS_SACKERR                          ((uint32_t)1 << 13)    // Stop Acknowledge Error

    uint32_t             RPC;                                           // Reset Pin Control register
                                                                        // Reset Pin Filter Select in Run and Wait Modes
#define RCM_RPC_RSTFLTSRW(_n)                    (((uint32_t)(_n) & 0x3) << 0)
#define RCM_RPC_RSTFLTSRW_INSERT(_v, _n)             (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define RCM_RPC_RSTFLTSRW_EXTRACT(_v)                (((_v) >> 0) & 0x3)
#define RCM_RPC_RSTFLTSS                         ((uint32_t)1 << 2)     // Reset Pin Filter Select in Stop Mode
                                                                        // Reset Pin Filter Bus Clock Select
#define RCM_RPC_RSTFLTSEL(_n)                    (((uint32_t)(_n) & 0x1f) << 8)
#define RCM_RPC_RSTFLTSEL_INSERT(_v, _n)             (((_v) & ~0x1f00) | ((uint32_t)(_n) & 0x1f) << 8)
#define RCM_RPC_RSTFLTSEL_EXTRACT(_v)                (((_v) >> 8) & 0x1f)

    uint8_t _res0[8];
    uint32_t             SSRS;                                          // Sticky System Reset Status Register
#define RCM_SSRS_SLVD                            ((uint32_t)1 << 1)     // Sticky Low-Voltage Detect Reset
#define RCM_SSRS_SLOC                            ((uint32_t)1 << 2)     // Sticky Loss-of-Clock Reset
#define RCM_SSRS_SLOL                            ((uint32_t)1 << 3)     // Sticky Loss-of-Lock Reset
#define RCM_SSRS_SWDOG                           ((uint32_t)1 << 5)     // Sticky Watchdog
#define RCM_SSRS_SPIN                            ((uint32_t)1 << 6)     // Sticky External Reset Pin
#define RCM_SSRS_SPOR                            ((uint32_t)1 << 7)     // Sticky Power-On Reset
#define RCM_SSRS_SJTAG                           ((uint32_t)1 << 8)     // Sticky JTAG generated reset
#define RCM_SSRS_SLOCKUP                         ((uint32_t)1 << 9)     // Sticky Core Lockup
#define RCM_SSRS_SSW                             ((uint32_t)1 << 10)    // Sticky Software
#define RCM_SSRS_SMDM_AP                         ((uint32_t)1 << 11)    // Sticky MDM-AP System Reset Request
#define RCM_SSRS_SSACKERR                        ((uint32_t)1 << 13)    // Sticky Stop Acknowledge Error

    uint32_t             SRIE;                                          // System Reset Interrupt Enable Register
                                                                        // Reset Delay Time
#define RCM_SRIE_DELAY(_n)                       (((uint32_t)(_n) & 0x3) << 0)
#define RCM_SRIE_DELAY_INSERT(_v, _n)                (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define RCM_SRIE_DELAY_EXTRACT(_v)                   (((_v) >> 0) & 0x3)
#define RCM_SRIE_LOC                             ((uint32_t)1 << 2)     // Loss-of-Clock Interrupt
#define RCM_SRIE_LOL                             ((uint32_t)1 << 3)     // Loss-of-Lock Interrupt
#define RCM_SRIE_WDOG                            ((uint32_t)1 << 5)     // Watchdog Interrupt
#define RCM_SRIE_PIN                             ((uint32_t)1 << 6)     // External Reset Pin Interrupt
#define RCM_SRIE_GIE                             ((uint32_t)1 << 7)     // Global Interrupt Enable
#define RCM_SRIE_JTAG                            ((uint32_t)1 << 8)     // JTAG generated reset
#define RCM_SRIE_LOCKUP                          ((uint32_t)1 << 9)     // Core Lockup Interrupt
#define RCM_SRIE_SW                              ((uint32_t)1 << 10)    // Software Interrupt
#define RCM_SRIE_MDM_AP                          ((uint32_t)1 << 11)    // MDM-AP System Reset Request
#define RCM_SRIE_SACKERR                         ((uint32_t)1 << 13)    // Stop Acknowledge Error Interrupt

} RCM_regs_t;
                                                                        // --------------------
                                                                        // General Purpose Input/Output
typedef struct                                                          // --------------------
{
    uint32_t             PDOR;                                          // Port Data Output Register
    uint32_t             PSOR;                                          // Port Set Output Register
    uint32_t             PCOR;                                          // Port Clear Output Register
    uint32_t             PTOR;                                          // Port Toggle Output Register
    const uint32_t       PDIR;                                          // Port Data Input Register
    uint32_t             PDDR;                                          // Port Data Direction Register
    uint32_t             PIDR;                                          // Port Input Disable Register
} PT_regs_t;
                                                                        // --------------------
                                                                        // System Control Registers
typedef struct                                                          // --------------------
{
    uint8_t _res0[8];
    uint32_t             ACTLR;                                         // Auxiliary Control Register,
#define S32_SCB_ACTLR_DISMCYCINT                 ((uint32_t)1 << 0)     // Disables interruption of multi-cycle instructions.
#define S32_SCB_ACTLR_DISDEFWBUF                 ((uint32_t)1 << 1)     // Disables write buffer use during default memory map accesses.
#define S32_SCB_ACTLR_DISFOLD                    ((uint32_t)1 << 2)     // Disables folding of IT instructions.
#define S32_SCB_ACTLR_DISFPCA                    ((uint32_t)1 << 8)     // SBZP / Disables automatic update of CONTROL.FPCA.
#define S32_SCB_ACTLR_DISOOFP                    ((uint32_t)1 << 9)     // Disables floating point instructions completing out of order with respect to integer instructions.

    uint8_t _res1[3316];
    const uint32_t       CPUID;                                         // CPUID Base Register
                                                                        // Indicates patch release: 0x0 = Patch 0
#define S32_SCB_CPUID_REVISION_EXTRACT(_v)           (((_v) >> 0) & 0xf)
                                                                        // Indicates part number
#define S32_SCB_CPUID_PARTNO_EXTRACT(_v)             (((_v) >> 4) & 0xfff)
                                                                        // Indicates processor revision: 0x2 = Revision 2
#define S32_SCB_CPUID_VARIANT_EXTRACT(_v)            (((_v) >> 20) & 0xf)
                                                                        // Implementer code
#define S32_SCB_CPUID_IMPLEMENTER_EXTRACT(_v)        (((_v) >> 24) & 0xff)

    uint32_t             ICSR;                                          // Interrupt Control and State Register
                                                                        // Active exception number
#define S32_SCB_ICSR_VECTACTIVE(_n)              (((uint32_t)(_n) & 0x1ff) << 0)
#define S32_SCB_ICSR_VECTACTIVE_INSERT(_v, _n)       (((_v) & ~0x1ff) | ((uint32_t)(_n) & 0x1ff) << 0)
#define S32_SCB_ICSR_VECTACTIVE_EXTRACT(_v)          (((_v) >> 0) & 0x1ff)
#define S32_SCB_ICSR_RETTOBASE                   ((uint32_t)1 << 11)    // Indicates whether there are preempted active exceptions
                                                                        // Exception number of the highest priority pending enabled exception
#define S32_SCB_ICSR_VECTPENDING(_n)             (((uint32_t)(_n) & 0x3f) << 12)
#define S32_SCB_ICSR_VECTPENDING_INSERT(_v, _n)      (((_v) & ~0x3f000) | ((uint32_t)(_n) & 0x3f) << 12)
#define S32_SCB_ICSR_VECTPENDING_EXTRACT(_v)         (((_v) >> 12) & 0x3f)
#define S32_SCB_ICSR_ISRPENDING                  ((uint32_t)1 << 22)    // Interrupt pending flag, excluding NMI and Faults
#define S32_SCB_ICSR_ISRPREEMPT                  ((uint32_t)1 << 23)    // You must only use this at debug time. It indicates that a pending interrupt becomes active in the next running cycle. If C_MASKINTS is clear in the Debug Halting Control and Status Register, the interrupt is serviced
#define S32_SCB_ICSR_PENDSTCLR                   ((uint32_t)1 << 25)    // SysTick exception clear-pending bit
#define S32_SCB_ICSR_PENDSTSET                   ((uint32_t)1 << 26)    // SysTick exception set-pending bit
#define S32_SCB_ICSR_PENDSVCLR                   ((uint32_t)1 << 27)    // PendSV clear-pending bit
#define S32_SCB_ICSR_PENDSVSET                   ((uint32_t)1 << 28)    // PendSV set-pending bit
#define S32_SCB_ICSR_NMIPENDSET                  ((uint32_t)1 << 31)    // NMI set-pending bit

    uint32_t             VTOR;                                          // Vector Table Offset Register
                                                                        // Vector table base offset
#define S32_SCB_VTOR_TBLOFF(_n)                  (((uint32_t)(_n) & 0x1ffffff) << 7)
#define S32_SCB_VTOR_TBLOFF_INSERT(_v, _n)           (((_v) & ~0xffffff80) | ((uint32_t)(_n) & 0x1ffffff) << 7)
#define S32_SCB_VTOR_TBLOFF_EXTRACT(_v)              (((_v) >> 7) & 0x1ffffff)

    uint32_t             AIRCR;                                         // Application Interrupt and Reset Control Register
#define S32_SCB_AIRCR_VECTRESET                  ((uint32_t)1 << 0)     // Reserved for Debug use. This bit reads as 0. When writing to the register you must write 0 to this bit, otherwise behavior is Unpredictable.
#define S32_SCB_AIRCR_VECTCLRACTIVE              ((uint32_t)1 << 1)     // Reserved for Debug use. This bit reads as 0. When writing to the register you must write 0 to this bit, otherwise behavior is Unpredictable.
#define S32_SCB_AIRCR_SYSRESETREQ                ((uint32_t)1 << 2)     // System reset request bit is implementation defined
                                                                        // Interrupt priority grouping field. This field determines the split of group priority from subpriority.
#define S32_SCB_AIRCR_PRIGROUP(_n)               (((uint32_t)(_n) & 0x7) << 8)
#define S32_SCB_AIRCR_PRIGROUP_INSERT(_v, _n)        (((_v) & ~0x700) | ((uint32_t)(_n) & 0x7) << 8)
#define S32_SCB_AIRCR_PRIGROUP_EXTRACT(_v)           (((_v) >> 8) & 0x7)
#define S32_SCB_AIRCR_ENDIANNESS                 ((uint32_t)1 << 15)    // Data endianness bit is implementation defined
                                                                        // Register key
#define S32_SCB_AIRCR_VECTKEY(_n)                (((uint32_t)(_n) & 0xffff) << 16)
#define S32_SCB_AIRCR_VECTKEY_INSERT(_v, _n)         (((_v) & ~0xffff0000) | ((uint32_t)(_n) & 0xffff) << 16)
#define S32_SCB_AIRCR_VECTKEY_EXTRACT(_v)            (((_v) >> 16) & 0xffff)

    uint32_t             SCR;                                           // System Control Register
#define S32_SCB_SCR_SLEEPONEXIT                  ((uint32_t)1 << 1)     // Indicates sleep-on-exit when returning from Handler mode to Thread mode
#define S32_SCB_SCR_SLEEPDEEP                    ((uint32_t)1 << 2)     // Controls whether the processor uses sleep or deep sleep as its low power mode
#define S32_SCB_SCR_SEVONPEND                    ((uint32_t)1 << 4)     // Send Event on Pending bit

    uint32_t             CCR;                                           // Configuration and Control Register
#define S32_SCB_CCR_NONBASETHRDENA               ((uint32_t)1 << 0)     // Indicates how the processor enters Thread mode
#define S32_SCB_CCR_USERSETMPEND                 ((uint32_t)1 << 1)     // Enables unprivileged software access to the STIR
#define S32_SCB_CCR_UNALIGN_TRP                  ((uint32_t)1 << 3)     // Enables unaligned access traps
#define S32_SCB_CCR_DIV_0_TRP                    ((uint32_t)1 << 4)     // Enables faulting or halting when the processor executes an SDIV or UDIV instruction with a divisor of 0
#define S32_SCB_CCR_BFHFNMIGN                    ((uint32_t)1 << 8)     // Enables handlers with priority -1 or -2 to ignore data BusFaults caused by load and store instructions.
#define S32_SCB_CCR_STKALIGN                     ((uint32_t)1 << 9)     // Indicates stack alignment on exception entry

    uint32_t             SHPR1;                                         // System Handler Priority Register 1
                                                                        // Priority of system handler 4, MemManage
#define S32_SCB_SHPR1_PRI_4(_n)                  (((uint32_t)(_n) & 0xff) << 0)
#define S32_SCB_SHPR1_PRI_4_INSERT(_v, _n)           (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define S32_SCB_SHPR1_PRI_4_EXTRACT(_v)              (((_v) >> 0) & 0xff)
                                                                        // Priority of system handler 5, BusFault
#define S32_SCB_SHPR1_PRI_5(_n)                  (((uint32_t)(_n) & 0xff) << 8)
#define S32_SCB_SHPR1_PRI_5_INSERT(_v, _n)           (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define S32_SCB_SHPR1_PRI_5_EXTRACT(_v)              (((_v) >> 8) & 0xff)
                                                                        // Priority of system handler 6, UsageFault
#define S32_SCB_SHPR1_PRI_6(_n)                  (((uint32_t)(_n) & 0xff) << 16)
#define S32_SCB_SHPR1_PRI_6_INSERT(_v, _n)           (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define S32_SCB_SHPR1_PRI_6_EXTRACT(_v)              (((_v) >> 16) & 0xff)

    uint32_t             SHPR2;                                         // System Handler Priority Register 2
                                                                        // Priority of system handler 11, SVCall
#define S32_SCB_SHPR2_PRI_11(_n)                 (((uint32_t)(_n) & 0xff) << 24)
#define S32_SCB_SHPR2_PRI_11_INSERT(_v, _n)          (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define S32_SCB_SHPR2_PRI_11_EXTRACT(_v)             (((_v) >> 24) & 0xff)

    uint32_t             SHPR3;                                         // System Handler Priority Register 3
                                                                        // Priority of system handler 12, DebugMonitor
#define S32_SCB_SHPR3_PRI_12(_n)                 (((uint32_t)(_n) & 0xff) << 0)
#define S32_SCB_SHPR3_PRI_12_INSERT(_v, _n)          (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define S32_SCB_SHPR3_PRI_12_EXTRACT(_v)             (((_v) >> 0) & 0xff)
                                                                        // Priority of system handler 14, PendSV
#define S32_SCB_SHPR3_PRI_14(_n)                 (((uint32_t)(_n) & 0xff) << 16)
#define S32_SCB_SHPR3_PRI_14_INSERT(_v, _n)          (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define S32_SCB_SHPR3_PRI_14_EXTRACT(_v)             (((_v) >> 16) & 0xff)
                                                                        // Priority of system handler 15, SysTick exception
#define S32_SCB_SHPR3_PRI_15(_n)                 (((uint32_t)(_n) & 0xff) << 24)
#define S32_SCB_SHPR3_PRI_15_INSERT(_v, _n)          (((_v) & ~0xff000000) | ((uint32_t)(_n) & 0xff) << 24)
#define S32_SCB_SHPR3_PRI_15_EXTRACT(_v)             (((_v) >> 24) & 0xff)

    uint32_t             SHCSR;                                         // System Handler Control and State Register
#define S32_SCB_SHCSR_MEMFAULTACT                ((uint32_t)1 << 0)     // MemManage exception active bit, reads as 1 if exception is active
#define S32_SCB_SHCSR_BUSFAULTACT                ((uint32_t)1 << 1)     // BusFault exception active bit, reads as 1 if exception is active
#define S32_SCB_SHCSR_USGFAULTACT                ((uint32_t)1 << 3)     // UsageFault exception active bit, reads as 1 if exception is active
#define S32_SCB_SHCSR_SVCALLACT                  ((uint32_t)1 << 7)     // SVCall active bit, reads as 1 if SVC call is active
#define S32_SCB_SHCSR_MONITORACT                 ((uint32_t)1 << 8)     // Debug monitor active bit, reads as 1 if Debug monitor is active
#define S32_SCB_SHCSR_PENDSVACT                  ((uint32_t)1 << 10)    // PendSV exception active bit, reads as 1 if exception is active
#define S32_SCB_SHCSR_SYSTICKACT                 ((uint32_t)1 << 11)    // SysTick exception active bit, reads as 1 if exception is active
#define S32_SCB_SHCSR_USGFAULTPENDED             ((uint32_t)1 << 12)    // UsageFault exception pending bit, reads as 1 if exception is pending
#define S32_SCB_SHCSR_MEMFAULTPENDED             ((uint32_t)1 << 13)    // MemManage exception pending bit, reads as 1 if exception is pending
#define S32_SCB_SHCSR_BUSFAULTPENDED             ((uint32_t)1 << 14)    // BusFault exception pending bit, reads as 1 if exception is pending
#define S32_SCB_SHCSR_SVCALLPENDED               ((uint32_t)1 << 15)    // SVCall pending bit, reads as 1 if exception is pending
#define S32_SCB_SHCSR_MEMFAULTENA                ((uint32_t)1 << 16)    // MemManage enable bit, set to 1 to enable
#define S32_SCB_SHCSR_BUSFAULTENA                ((uint32_t)1 << 17)    // BusFault enable bit, set to 1 to enable
#define S32_SCB_SHCSR_USGFAULTENA                ((uint32_t)1 << 18)    // UsageFault enable bit, set to 1 to enable

    uint32_t             CFSR;                                          // Configurable Fault Status Registers
#define S32_SCB_CFSR_IACCVIOL                    ((uint32_t)1 << 0)     // Instruction access violation flag
#define S32_SCB_CFSR_DACCVIOL                    ((uint32_t)1 << 1)     // Data access violation flag
#define S32_SCB_CFSR_MUNSTKERR                   ((uint32_t)1 << 3)     // MemManage fault on unstacking for a return from exception
#define S32_SCB_CFSR_MSTKERR                     ((uint32_t)1 << 4)     // MemManage fault on stacking for exception entry
#define S32_SCB_CFSR_MLSPERR                     ((uint32_t)1 << 5)     // Indicates whether MemManage fault occured during floating-point lazy state preservation
#define S32_SCB_CFSR_MMARVALID                   ((uint32_t)1 << 7)     // MemManage Fault Address Register (MMFAR) valid flag
#define S32_SCB_CFSR_IBUSERR                     ((uint32_t)1 << 8)     // Instruction bus error
#define S32_SCB_CFSR_PRECISERR                   ((uint32_t)1 << 9)     // Precise data bus error
#define S32_SCB_CFSR_IMPRECISERR                 ((uint32_t)1 << 10)    // Imprecise data bus error
#define S32_SCB_CFSR_UNSTKERR                    ((uint32_t)1 << 11)    // BusFault on unstacking for a return from exception
#define S32_SCB_CFSR_STKERR                      ((uint32_t)1 << 12)    // BusFault on stacking for exception entry
#define S32_SCB_CFSR_LSPERR                      ((uint32_t)1 << 13)    // Indicates whether bus fault fault occured during floating-point lazy state preservation
#define S32_SCB_CFSR_BFARVALID                   ((uint32_t)1 << 15)    // BusFault Address Register (BFAR) valid flag
#define S32_SCB_CFSR_UNDEFINSTR                  ((uint32_t)1 << 16)    // Undefined instruction UsageFault
#define S32_SCB_CFSR_INVSTATE                    ((uint32_t)1 << 17)    // Invalid state UsageFault
#define S32_SCB_CFSR_INVPC                       ((uint32_t)1 << 18)    // Invalid PC load UsageFault, caused by an invalid PC load by EXC_RETURN
#define S32_SCB_CFSR_NOCP                        ((uint32_t)1 << 19)    // No coprocessor UsageFault. The processor does not support coprocessor instructions
#define S32_SCB_CFSR_UNALIGNED                   ((uint32_t)1 << 24)    // Unaligned access UsageFault
#define S32_SCB_CFSR_DIVBYZERO                   ((uint32_t)1 << 25)    // Divide by zero UsageFault

    uint32_t             HFSR;                                          // HardFault Status register
#define S32_SCB_HFSR_VECTTBL                     ((uint32_t)1 << 1)     // Indicates a BusFault on a vector table read during exception processing
#define S32_SCB_HFSR_FORCED                      ((uint32_t)1 << 30)    // Indicates a forced hard fault, generated by escalation of a fault with configurable priority that cannot be handles, either because of priority or because it is disabled
#define S32_SCB_HFSR_DEBUGEVT                    ((uint32_t)1 << 31)    // Reserved for Debug use. When writing to the register you must write 0 to this bit, otherwise behavior is Unpredictable.

    uint32_t             DFSR;                                          // Debug Fault Status Register
#define S32_SCB_DFSR_HALTED                      ((uint32_t)1 << 0)     // no description available
#define S32_SCB_DFSR_BKPT                        ((uint32_t)1 << 1)     // no description available
#define S32_SCB_DFSR_DWTTRAP                     ((uint32_t)1 << 2)     // no description available
#define S32_SCB_DFSR_VCATCH                      ((uint32_t)1 << 3)     // no description available
#define S32_SCB_DFSR_EXTERNAL                    ((uint32_t)1 << 4)     // no description available

    uint32_t             MMFAR;                                         // MemManage Address Register
    uint32_t             BFAR;                                          // BusFault Address Register
    uint32_t             AFSR;                                          // Auxiliary Fault Status Register
    uint8_t _res2[72];
    uint32_t             CPACR;                                         // Coprocessor Access Control Register
                                                                        // Access privileges for coprocessor 10.
#define S32_SCB_CPACR_CP10(_n)                   (((uint32_t)(_n) & 0x3) << 20)
#define S32_SCB_CPACR_CP10_INSERT(_v, _n)            (((_v) & ~0x300000) | ((uint32_t)(_n) & 0x3) << 20)
#define S32_SCB_CPACR_CP10_EXTRACT(_v)               (((_v) >> 20) & 0x3)
                                                                        // Access privileges for coprocessor 11.
#define S32_SCB_CPACR_CP11(_n)                   (((uint32_t)(_n) & 0x3) << 22)
#define S32_SCB_CPACR_CP11_INSERT(_v, _n)            (((_v) & ~0xc00000) | ((uint32_t)(_n) & 0x3) << 22)
#define S32_SCB_CPACR_CP11_EXTRACT(_v)               (((_v) >> 22) & 0x3)

    uint8_t _res3[424];
    uint32_t             FPCCR;                                         // Floating-point Context Control Register
#define S32_SCB_FPCCR_LSPACT                     ((uint32_t)1 << 0)     // Lazy state preservation.
#define S32_SCB_FPCCR_USER                       ((uint32_t)1 << 1)     // Privilege level when the floating-point stack frame was allocated.
#define S32_SCB_FPCCR_THREAD                     ((uint32_t)1 << 3)     // Mode when the floating-point stack frame was allocated.
#define S32_SCB_FPCCR_HFRDY                      ((uint32_t)1 << 4)     // Permission to set the HardFault handler to the pending state when the floating-point stack frame was allocated.
#define S32_SCB_FPCCR_MMRDY                      ((uint32_t)1 << 5)     // Permission to set the MemManage handler to the pending state when the floating-point stack frame was allocated.
#define S32_SCB_FPCCR_BFRDY                      ((uint32_t)1 << 6)     // Permission to set the BusFault handler to the pending state when the floating-point stack frame was allocated.
#define S32_SCB_FPCCR_MONRDY                     ((uint32_t)1 << 8)     // Permission to set the MON_PEND when the floating-point stack frame was allocated.
#define S32_SCB_FPCCR_LSPEN                      ((uint32_t)1 << 30)    // Lazy state preservation for floating-point context.
#define S32_SCB_FPCCR_ASPEN                      ((uint32_t)1 << 31)    // Enables CONTROL2 setting on execution of a floating-point instruction. This results in automatic hardware state preservation and restoration, for floating-point context, on exception entry and exit.

    uint32_t             FPCAR;                                         // Floating-point Context Address Register
                                                                        // The location of the unpopulated floating-point register space allocated on an exception stack frame.
#define S32_SCB_FPCAR_ADDRESS(_n)                (((uint32_t)(_n) & 0x1fffffff) << 3)
#define S32_SCB_FPCAR_ADDRESS_INSERT(_v, _n)         (((_v) & ~0xfffffff8) | ((uint32_t)(_n) & 0x1fffffff) << 3)
#define S32_SCB_FPCAR_ADDRESS_EXTRACT(_v)            (((_v) >> 3) & 0x1fffffff)

    uint32_t             FPDSCR;                                        // Floating-point Default Status Control Register
                                                                        // Default value for FPSCR.RMode (Rounding Mode control field).
#define S32_SCB_FPDSCR_RMode(_n)                 (((uint32_t)(_n) & 0x3) << 22)
#define S32_SCB_FPDSCR_RMode_INSERT(_v, _n)          (((_v) & ~0xc00000) | ((uint32_t)(_n) & 0x3) << 22)
#define S32_SCB_FPDSCR_RMode_EXTRACT(_v)             (((_v) >> 22) & 0x3)
#define S32_SCB_FPDSCR_FZ                        ((uint32_t)1 << 24)    // Default value for FPSCR.FZ (Flush-to-zero mode control bit).
#define S32_SCB_FPDSCR_DN                        ((uint32_t)1 << 25)    // Default value for FPSCR.DN (Default NaN mode control bit).
#define S32_SCB_FPDSCR_AHP                       ((uint32_t)1 << 26)    // Default value for FPSCR.AHP (Alternative half-precision control bit).

} S32_SCB_regs_t;
                                                                        // --------------------
                                                                        // System timer
typedef struct                                                          // --------------------
{
    uint32_t             CSR;                                           // SysTick Control and Status Register
#define S32_SysTick_CSR_ENABLE                   ((uint32_t)1 << 0)     // Enables the counter
#define S32_SysTick_CSR_TICKINT                  ((uint32_t)1 << 1)     // Enables SysTick exception request
#define S32_SysTick_CSR_CLKSOURCE                ((uint32_t)1 << 2)     // Indicates the clock source
#define S32_SysTick_CSR_COUNTFLAG                ((uint32_t)1 << 16)    // Returns 1 if timer counted to 0 since last time this was read

    uint32_t             RVR;                                           // SysTick Reload Value Register
                                                                        // Value to load into the SysTick Current Value Register when the counter reaches 0
#define S32_SysTick_RVR_RELOAD(_n)               (((uint32_t)(_n) & 0xffffff) << 0)
#define S32_SysTick_RVR_RELOAD_INSERT(_v, _n)        (((_v) & ~0xffffff) | ((uint32_t)(_n) & 0xffffff) << 0)
#define S32_SysTick_RVR_RELOAD_EXTRACT(_v)           (((_v) >> 0) & 0xffffff)

    uint32_t             CVR;                                           // SysTick Current Value Register
                                                                        // Current value at the time the register is accessed
#define S32_SysTick_CVR_CURRENT(_n)              (((uint32_t)(_n) & 0xffffff) << 0)
#define S32_SysTick_CVR_CURRENT_INSERT(_v, _n)       (((_v) & ~0xffffff) | ((uint32_t)(_n) & 0xffffff) << 0)
#define S32_SysTick_CVR_CURRENT_EXTRACT(_v)          (((_v) >> 0) & 0xffffff)

    const uint32_t       CALIB;                                         // SysTick Calibration Value Register
                                                                        // Reload value to use for 10ms timing
#define S32_SysTick_CALIB_TENMS_EXTRACT(_v)          (((_v) >> 0) & 0xffffff)
#define S32_SysTick_CALIB_SKEW                   ((uint32_t)1 << 30)    // Indicates whether the TENMS value is exact
#define S32_SysTick_CALIB_NOREF                  ((uint32_t)1 << 31)    // Indicates whether the device provides a reference clock to the processor

} S32_SysTick_regs_t;
                                                                        // --------------------
                                                                        // Nested Vectored Interrupt Controller
typedef struct                                                          // --------------------
{
    uint32_t             NVICISER0;                                     // Interrupt Set Enable Register n
    uint32_t             NVICISER1;                                     // Interrupt Set Enable Register n
    uint32_t             NVICISER2;                                     // Interrupt Set Enable Register n
    uint32_t             NVICISER3;                                     // Interrupt Set Enable Register n
    uint32_t             NVICISER4;                                     // Interrupt Set Enable Register n
    uint32_t             NVICISER5;                                     // Interrupt Set Enable Register n
    uint32_t             NVICISER6;                                     // Interrupt Set Enable Register n
    uint32_t             NVICISER7;                                     // Interrupt Set Enable Register n
    uint8_t _res0[96];
    uint32_t             NVICICER0;                                     // Interrupt Clear Enable Register n
    uint32_t             NVICICER1;                                     // Interrupt Clear Enable Register n
    uint32_t             NVICICER2;                                     // Interrupt Clear Enable Register n
    uint32_t             NVICICER3;                                     // Interrupt Clear Enable Register n
    uint32_t             NVICICER4;                                     // Interrupt Clear Enable Register n
    uint32_t             NVICICER5;                                     // Interrupt Clear Enable Register n
    uint32_t             NVICICER6;                                     // Interrupt Clear Enable Register n
    uint32_t             NVICICER7;                                     // Interrupt Clear Enable Register n
    uint8_t _res1[96];
    uint32_t             NVICISPR0;                                     // Interrupt Set Pending Register n
    uint32_t             NVICISPR1;                                     // Interrupt Set Pending Register n
    uint32_t             NVICISPR2;                                     // Interrupt Set Pending Register n
    uint32_t             NVICISPR3;                                     // Interrupt Set Pending Register n
    uint32_t             NVICISPR4;                                     // Interrupt Set Pending Register n
    uint32_t             NVICISPR5;                                     // Interrupt Set Pending Register n
    uint32_t             NVICISPR6;                                     // Interrupt Set Pending Register n
    uint32_t             NVICISPR7;                                     // Interrupt Set Pending Register n
    uint8_t _res2[96];
    uint32_t             NVICICPR0;                                     // Interrupt Clear Pending Register n
    uint32_t             NVICICPR1;                                     // Interrupt Clear Pending Register n
    uint32_t             NVICICPR2;                                     // Interrupt Clear Pending Register n
    uint32_t             NVICICPR3;                                     // Interrupt Clear Pending Register n
    uint32_t             NVICICPR4;                                     // Interrupt Clear Pending Register n
    uint32_t             NVICICPR5;                                     // Interrupt Clear Pending Register n
    uint32_t             NVICICPR6;                                     // Interrupt Clear Pending Register n
    uint32_t             NVICICPR7;                                     // Interrupt Clear Pending Register n
    uint8_t _res3[96];
    uint32_t             NVICIABR0;                                     // Interrupt Active bit Register n
    uint32_t             NVICIABR1;                                     // Interrupt Active bit Register n
    uint32_t             NVICIABR2;                                     // Interrupt Active bit Register n
    uint32_t             NVICIABR3;                                     // Interrupt Active bit Register n
    uint32_t             NVICIABR4;                                     // Interrupt Active bit Register n
    uint32_t             NVICIABR5;                                     // Interrupt Active bit Register n
    uint32_t             NVICIABR6;                                     // Interrupt Active bit Register n
    uint32_t             NVICIABR7;                                     // Interrupt Active bit Register n
    uint8_t _res4[224];
    uint8_t              NVICIP0;                                       // Interrupt Priority Register n
    uint8_t              NVICIP1;                                       // Interrupt Priority Register n
    uint8_t              NVICIP2;                                       // Interrupt Priority Register n
    uint8_t              NVICIP3;                                       // Interrupt Priority Register n
    uint8_t              NVICIP4;                                       // Interrupt Priority Register n
    uint8_t              NVICIP5;                                       // Interrupt Priority Register n
    uint8_t              NVICIP6;                                       // Interrupt Priority Register n
    uint8_t              NVICIP7;                                       // Interrupt Priority Register n
    uint8_t              NVICIP8;                                       // Interrupt Priority Register n
    uint8_t              NVICIP9;                                       // Interrupt Priority Register n
    uint8_t              NVICIP10;                                      // Interrupt Priority Register n
    uint8_t              NVICIP11;                                      // Interrupt Priority Register n
    uint8_t              NVICIP12;                                      // Interrupt Priority Register n
    uint8_t              NVICIP13;                                      // Interrupt Priority Register n
    uint8_t              NVICIP14;                                      // Interrupt Priority Register n
    uint8_t              NVICIP15;                                      // Interrupt Priority Register n
    uint8_t              NVICIP16;                                      // Interrupt Priority Register n
    uint8_t              NVICIP17;                                      // Interrupt Priority Register n
    uint8_t              NVICIP18;                                      // Interrupt Priority Register n
    uint8_t              NVICIP19;                                      // Interrupt Priority Register n
    uint8_t              NVICIP20;                                      // Interrupt Priority Register n
    uint8_t              NVICIP21;                                      // Interrupt Priority Register n
    uint8_t              NVICIP22;                                      // Interrupt Priority Register n
    uint8_t              NVICIP23;                                      // Interrupt Priority Register n
    uint8_t              NVICIP24;                                      // Interrupt Priority Register n
    uint8_t              NVICIP25;                                      // Interrupt Priority Register n
    uint8_t              NVICIP26;                                      // Interrupt Priority Register n
    uint8_t              NVICIP27;                                      // Interrupt Priority Register n
    uint8_t              NVICIP28;                                      // Interrupt Priority Register n
    uint8_t              NVICIP29;                                      // Interrupt Priority Register n
    uint8_t              NVICIP30;                                      // Interrupt Priority Register n
    uint8_t              NVICIP31;                                      // Interrupt Priority Register n
    uint8_t              NVICIP32;                                      // Interrupt Priority Register n
    uint8_t              NVICIP33;                                      // Interrupt Priority Register n
    uint8_t              NVICIP34;                                      // Interrupt Priority Register n
    uint8_t              NVICIP35;                                      // Interrupt Priority Register n
    uint8_t              NVICIP36;                                      // Interrupt Priority Register n
    uint8_t              NVICIP37;                                      // Interrupt Priority Register n
    uint8_t              NVICIP38;                                      // Interrupt Priority Register n
    uint8_t              NVICIP39;                                      // Interrupt Priority Register n
    uint8_t              NVICIP40;                                      // Interrupt Priority Register n
    uint8_t              NVICIP41;                                      // Interrupt Priority Register n
    uint8_t              NVICIP42;                                      // Interrupt Priority Register n
    uint8_t              NVICIP43;                                      // Interrupt Priority Register n
    uint8_t              NVICIP44;                                      // Interrupt Priority Register n
    uint8_t              NVICIP45;                                      // Interrupt Priority Register n
    uint8_t              NVICIP46;                                      // Interrupt Priority Register n
    uint8_t              NVICIP47;                                      // Interrupt Priority Register n
    uint8_t              NVICIP48;                                      // Interrupt Priority Register n
    uint8_t              NVICIP49;                                      // Interrupt Priority Register n
    uint8_t              NVICIP50;                                      // Interrupt Priority Register n
    uint8_t              NVICIP51;                                      // Interrupt Priority Register n
    uint8_t              NVICIP52;                                      // Interrupt Priority Register n
    uint8_t              NVICIP53;                                      // Interrupt Priority Register n
    uint8_t              NVICIP54;                                      // Interrupt Priority Register n
    uint8_t              NVICIP55;                                      // Interrupt Priority Register n
    uint8_t              NVICIP56;                                      // Interrupt Priority Register n
    uint8_t              NVICIP57;                                      // Interrupt Priority Register n
    uint8_t              NVICIP58;                                      // Interrupt Priority Register n
    uint8_t              NVICIP59;                                      // Interrupt Priority Register n
    uint8_t              NVICIP60;                                      // Interrupt Priority Register n
    uint8_t              NVICIP61;                                      // Interrupt Priority Register n
    uint8_t              NVICIP62;                                      // Interrupt Priority Register n
    uint8_t              NVICIP63;                                      // Interrupt Priority Register n
    uint8_t              NVICIP64;                                      // Interrupt Priority Register n
    uint8_t              NVICIP65;                                      // Interrupt Priority Register n
    uint8_t              NVICIP66;                                      // Interrupt Priority Register n
    uint8_t              NVICIP67;                                      // Interrupt Priority Register n
    uint8_t              NVICIP68;                                      // Interrupt Priority Register n
    uint8_t              NVICIP69;                                      // Interrupt Priority Register n
    uint8_t              NVICIP70;                                      // Interrupt Priority Register n
    uint8_t              NVICIP71;                                      // Interrupt Priority Register n
    uint8_t              NVICIP72;                                      // Interrupt Priority Register n
    uint8_t              NVICIP73;                                      // Interrupt Priority Register n
    uint8_t              NVICIP74;                                      // Interrupt Priority Register n
    uint8_t              NVICIP75;                                      // Interrupt Priority Register n
    uint8_t              NVICIP76;                                      // Interrupt Priority Register n
    uint8_t              NVICIP77;                                      // Interrupt Priority Register n
    uint8_t              NVICIP78;                                      // Interrupt Priority Register n
    uint8_t              NVICIP79;                                      // Interrupt Priority Register n
    uint8_t              NVICIP80;                                      // Interrupt Priority Register n
    uint8_t              NVICIP81;                                      // Interrupt Priority Register n
    uint8_t              NVICIP82;                                      // Interrupt Priority Register n
    uint8_t              NVICIP83;                                      // Interrupt Priority Register n
    uint8_t              NVICIP84;                                      // Interrupt Priority Register n
    uint8_t              NVICIP85;                                      // Interrupt Priority Register n
    uint8_t              NVICIP86;                                      // Interrupt Priority Register n
    uint8_t              NVICIP87;                                      // Interrupt Priority Register n
    uint8_t              NVICIP88;                                      // Interrupt Priority Register n
    uint8_t              NVICIP89;                                      // Interrupt Priority Register n
    uint8_t              NVICIP90;                                      // Interrupt Priority Register n
    uint8_t              NVICIP91;                                      // Interrupt Priority Register n
    uint8_t              NVICIP92;                                      // Interrupt Priority Register n
    uint8_t              NVICIP93;                                      // Interrupt Priority Register n
    uint8_t              NVICIP94;                                      // Interrupt Priority Register n
    uint8_t              NVICIP95;                                      // Interrupt Priority Register n
    uint8_t              NVICIP96;                                      // Interrupt Priority Register n
    uint8_t              NVICIP97;                                      // Interrupt Priority Register n
    uint8_t              NVICIP98;                                      // Interrupt Priority Register n
    uint8_t              NVICIP99;                                      // Interrupt Priority Register n
    uint8_t              NVICIP100;                                     // Interrupt Priority Register n
    uint8_t              NVICIP101;                                     // Interrupt Priority Register n
    uint8_t              NVICIP102;                                     // Interrupt Priority Register n
    uint8_t              NVICIP103;                                     // Interrupt Priority Register n
    uint8_t              NVICIP104;                                     // Interrupt Priority Register n
    uint8_t              NVICIP105;                                     // Interrupt Priority Register n
    uint8_t              NVICIP106;                                     // Interrupt Priority Register n
    uint8_t              NVICIP107;                                     // Interrupt Priority Register n
    uint8_t              NVICIP108;                                     // Interrupt Priority Register n
    uint8_t              NVICIP109;                                     // Interrupt Priority Register n
    uint8_t              NVICIP110;                                     // Interrupt Priority Register n
    uint8_t              NVICIP111;                                     // Interrupt Priority Register n
    uint8_t              NVICIP112;                                     // Interrupt Priority Register n
    uint8_t              NVICIP113;                                     // Interrupt Priority Register n
    uint8_t              NVICIP114;                                     // Interrupt Priority Register n
    uint8_t              NVICIP115;                                     // Interrupt Priority Register n
    uint8_t              NVICIP116;                                     // Interrupt Priority Register n
    uint8_t              NVICIP117;                                     // Interrupt Priority Register n
    uint8_t              NVICIP118;                                     // Interrupt Priority Register n
    uint8_t              NVICIP119;                                     // Interrupt Priority Register n
    uint8_t              NVICIP120;                                     // Interrupt Priority Register n
    uint8_t              NVICIP121;                                     // Interrupt Priority Register n
    uint8_t              NVICIP122;                                     // Interrupt Priority Register n
    uint8_t              NVICIP123;                                     // Interrupt Priority Register n
    uint8_t              NVICIP124;                                     // Interrupt Priority Register n
    uint8_t              NVICIP125;                                     // Interrupt Priority Register n
    uint8_t              NVICIP126;                                     // Interrupt Priority Register n
    uint8_t              NVICIP127;                                     // Interrupt Priority Register n
    uint8_t              NVICIP128;                                     // Interrupt Priority Register n
    uint8_t              NVICIP129;                                     // Interrupt Priority Register n
    uint8_t              NVICIP130;                                     // Interrupt Priority Register n
    uint8_t              NVICIP131;                                     // Interrupt Priority Register n
    uint8_t              NVICIP132;                                     // Interrupt Priority Register n
    uint8_t              NVICIP133;                                     // Interrupt Priority Register n
    uint8_t              NVICIP134;                                     // Interrupt Priority Register n
    uint8_t              NVICIP135;                                     // Interrupt Priority Register n
    uint8_t              NVICIP136;                                     // Interrupt Priority Register n
    uint8_t              NVICIP137;                                     // Interrupt Priority Register n
    uint8_t              NVICIP138;                                     // Interrupt Priority Register n
    uint8_t              NVICIP139;                                     // Interrupt Priority Register n
    uint8_t              NVICIP140;                                     // Interrupt Priority Register n
    uint8_t              NVICIP141;                                     // Interrupt Priority Register n
    uint8_t              NVICIP142;                                     // Interrupt Priority Register n
    uint8_t              NVICIP143;                                     // Interrupt Priority Register n
    uint8_t              NVICIP144;                                     // Interrupt Priority Register n
    uint8_t              NVICIP145;                                     // Interrupt Priority Register n
    uint8_t              NVICIP146;                                     // Interrupt Priority Register n
    uint8_t              NVICIP147;                                     // Interrupt Priority Register n
    uint8_t              NVICIP148;                                     // Interrupt Priority Register n
    uint8_t              NVICIP149;                                     // Interrupt Priority Register n
    uint8_t              NVICIP150;                                     // Interrupt Priority Register n
    uint8_t              NVICIP151;                                     // Interrupt Priority Register n
    uint8_t              NVICIP152;                                     // Interrupt Priority Register n
    uint8_t              NVICIP153;                                     // Interrupt Priority Register n
    uint8_t              NVICIP154;                                     // Interrupt Priority Register n
    uint8_t              NVICIP155;                                     // Interrupt Priority Register n
    uint8_t              NVICIP156;                                     // Interrupt Priority Register n
    uint8_t              NVICIP157;                                     // Interrupt Priority Register n
    uint8_t              NVICIP158;                                     // Interrupt Priority Register n
    uint8_t              NVICIP159;                                     // Interrupt Priority Register n
    uint8_t              NVICIP160;                                     // Interrupt Priority Register n
    uint8_t              NVICIP161;                                     // Interrupt Priority Register n
    uint8_t              NVICIP162;                                     // Interrupt Priority Register n
    uint8_t              NVICIP163;                                     // Interrupt Priority Register n
    uint8_t              NVICIP164;                                     // Interrupt Priority Register n
    uint8_t              NVICIP165;                                     // Interrupt Priority Register n
    uint8_t              NVICIP166;                                     // Interrupt Priority Register n
    uint8_t              NVICIP167;                                     // Interrupt Priority Register n
    uint8_t              NVICIP168;                                     // Interrupt Priority Register n
    uint8_t              NVICIP169;                                     // Interrupt Priority Register n
    uint8_t              NVICIP170;                                     // Interrupt Priority Register n
    uint8_t              NVICIP171;                                     // Interrupt Priority Register n
    uint8_t              NVICIP172;                                     // Interrupt Priority Register n
    uint8_t              NVICIP173;                                     // Interrupt Priority Register n
    uint8_t              NVICIP174;                                     // Interrupt Priority Register n
    uint8_t              NVICIP175;                                     // Interrupt Priority Register n
    uint8_t              NVICIP176;                                     // Interrupt Priority Register n
    uint8_t              NVICIP177;                                     // Interrupt Priority Register n
    uint8_t              NVICIP178;                                     // Interrupt Priority Register n
    uint8_t              NVICIP179;                                     // Interrupt Priority Register n
    uint8_t              NVICIP180;                                     // Interrupt Priority Register n
    uint8_t              NVICIP181;                                     // Interrupt Priority Register n
    uint8_t              NVICIP182;                                     // Interrupt Priority Register n
    uint8_t              NVICIP183;                                     // Interrupt Priority Register n
    uint8_t              NVICIP184;                                     // Interrupt Priority Register n
    uint8_t              NVICIP185;                                     // Interrupt Priority Register n
    uint8_t              NVICIP186;                                     // Interrupt Priority Register n
    uint8_t              NVICIP187;                                     // Interrupt Priority Register n
    uint8_t              NVICIP188;                                     // Interrupt Priority Register n
    uint8_t              NVICIP189;                                     // Interrupt Priority Register n
    uint8_t              NVICIP190;                                     // Interrupt Priority Register n
    uint8_t              NVICIP191;                                     // Interrupt Priority Register n
    uint8_t              NVICIP192;                                     // Interrupt Priority Register n
    uint8_t              NVICIP193;                                     // Interrupt Priority Register n
    uint8_t              NVICIP194;                                     // Interrupt Priority Register n
    uint8_t              NVICIP195;                                     // Interrupt Priority Register n
    uint8_t              NVICIP196;                                     // Interrupt Priority Register n
    uint8_t              NVICIP197;                                     // Interrupt Priority Register n
    uint8_t              NVICIP198;                                     // Interrupt Priority Register n
    uint8_t              NVICIP199;                                     // Interrupt Priority Register n
    uint8_t              NVICIP200;                                     // Interrupt Priority Register n
    uint8_t              NVICIP201;                                     // Interrupt Priority Register n
    uint8_t              NVICIP202;                                     // Interrupt Priority Register n
    uint8_t              NVICIP203;                                     // Interrupt Priority Register n
    uint8_t              NVICIP204;                                     // Interrupt Priority Register n
    uint8_t              NVICIP205;                                     // Interrupt Priority Register n
    uint8_t              NVICIP206;                                     // Interrupt Priority Register n
    uint8_t              NVICIP207;                                     // Interrupt Priority Register n
    uint8_t              NVICIP208;                                     // Interrupt Priority Register n
    uint8_t              NVICIP209;                                     // Interrupt Priority Register n
    uint8_t              NVICIP210;                                     // Interrupt Priority Register n
    uint8_t              NVICIP211;                                     // Interrupt Priority Register n
    uint8_t              NVICIP212;                                     // Interrupt Priority Register n
    uint8_t              NVICIP213;                                     // Interrupt Priority Register n
    uint8_t              NVICIP214;                                     // Interrupt Priority Register n
    uint8_t              NVICIP215;                                     // Interrupt Priority Register n
    uint8_t              NVICIP216;                                     // Interrupt Priority Register n
    uint8_t              NVICIP217;                                     // Interrupt Priority Register n
    uint8_t              NVICIP218;                                     // Interrupt Priority Register n
    uint8_t              NVICIP219;                                     // Interrupt Priority Register n
    uint8_t              NVICIP220;                                     // Interrupt Priority Register n
    uint8_t              NVICIP221;                                     // Interrupt Priority Register n
    uint8_t              NVICIP222;                                     // Interrupt Priority Register n
    uint8_t              NVICIP223;                                     // Interrupt Priority Register n
    uint8_t              NVICIP224;                                     // Interrupt Priority Register n
    uint8_t              NVICIP225;                                     // Interrupt Priority Register n
    uint8_t              NVICIP226;                                     // Interrupt Priority Register n
    uint8_t              NVICIP227;                                     // Interrupt Priority Register n
    uint8_t              NVICIP228;                                     // Interrupt Priority Register n
    uint8_t              NVICIP229;                                     // Interrupt Priority Register n
    uint8_t              NVICIP230;                                     // Interrupt Priority Register n
    uint8_t              NVICIP231;                                     // Interrupt Priority Register n
    uint8_t              NVICIP232;                                     // Interrupt Priority Register n
    uint8_t              NVICIP233;                                     // Interrupt Priority Register n
    uint8_t              NVICIP234;                                     // Interrupt Priority Register n
    uint8_t              NVICIP235;                                     // Interrupt Priority Register n
    uint8_t              NVICIP236;                                     // Interrupt Priority Register n
    uint8_t              NVICIP237;                                     // Interrupt Priority Register n
    uint8_t              NVICIP238;                                     // Interrupt Priority Register n
    uint8_t              NVICIP239;                                     // Interrupt Priority Register n
    uint8_t _res5[2576];
    uint32_t             NVICSTIR;                                      // Software Trigger Interrupt Register
                                                                        // Interrupt ID of the interrupt to trigger, in the range 0-239. For example, a value of 0x03 specifies interrupt IRQ3.
#define S32_NVIC_NVICSTIR_INTID(_n)              (((uint32_t)(_n) & 0x1ff) << 0)
#define S32_NVIC_NVICSTIR_INTID_INSERT(_v, _n)       (((_v) & ~0x1ff) | ((uint32_t)(_n) & 0x1ff) << 0)

} S32_NVIC_regs_t;
                                                                        // --------------------
                                                                        // Core Platform Miscellaneous Control Module
typedef struct                                                          // --------------------
{
    uint8_t _res0[8];
    const uint16_t       PLASC;                                         // Crossbar Switch (AXBS) Slave Configuration
                                                                        // Each bit in the ASC field indicates whether there is a corresponding connection to the crossbar switch's slave input port.
#define MCM_PLASC_ASC_EXTRACT(_v)                    (((_v) >> 0) & 0xff)

    const uint16_t       PLAMC;                                         // Crossbar Switch (AXBS) Master Configuration
                                                                        // Each bit in the AMC field indicates whether there is a corresponding connection to the AXBS master input port.
#define MCM_PLAMC_AMC_EXTRACT(_v)                    (((_v) >> 0) & 0xff)

    uint32_t             CPCR;                                          // Core Platform Control Register
                                                                        // AXBS Halt State Machine Status
#define MCM_CPCR_HLT_FSM_ST(_n)                  (((uint32_t)(_n) & 0x3) << 0)
#define MCM_CPCR_HLT_FSM_ST_INSERT(_v, _n)           (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define MCM_CPCR_HLT_FSM_ST_EXTRACT(_v)              (((_v) >> 0) & 0x3)
#define MCM_CPCR_AXBS_HLT_REQ                    ((uint32_t)1 << 2)     // AXBS Halt Request
#define MCM_CPCR_AXBS_HLTD                       ((uint32_t)1 << 3)     // AXBS Halted
#define MCM_CPCR_FMC_PF_IDLE                     ((uint32_t)1 << 4)     // Flash Memory Controller Program Flash Idle
#define MCM_CPCR_PBRIDGE_IDLE                    ((uint32_t)1 << 6)     // Peripheral Bridge Idle
#define MCM_CPCR_CBRR                            ((uint32_t)1 << 9)     // Crossbar Round-robin Arbitration Enable
                                                                        // SRAM_U Arbitration Priority
#define MCM_CPCR_SRAMUAP(_n)                     (((uint32_t)(_n) & 0x3) << 24)
#define MCM_CPCR_SRAMUAP_INSERT(_v, _n)              (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define MCM_CPCR_SRAMUAP_EXTRACT(_v)                 (((_v) >> 24) & 0x3)
#define MCM_CPCR_SRAMUWP                         ((uint32_t)1 << 26)    // SRAM_U Write Protect
                                                                        // SRAM_L Arbitration Priority
#define MCM_CPCR_SRAMLAP(_n)                     (((uint32_t)(_n) & 0x3) << 28)
#define MCM_CPCR_SRAMLAP_INSERT(_v, _n)              (((_v) & ~0x30000000) | ((uint32_t)(_n) & 0x3) << 28)
#define MCM_CPCR_SRAMLAP_EXTRACT(_v)                 (((_v) >> 28) & 0x3)
#define MCM_CPCR_SRAMLWP                         ((uint32_t)1 << 30)    // SRAM_L Write Protect

    uint32_t             ISCR;                                          // Interrupt Status and Control Register
#define MCM_ISCR_FIOC                            ((uint32_t)1 << 8)     // FPU Invalid Operation Interrupt Status
#define MCM_ISCR_FDZC                            ((uint32_t)1 << 9)     // FPU Divide-by-Zero Interrupt Status
#define MCM_ISCR_FOFC                            ((uint32_t)1 << 10)    // FPU Overflow Interrupt Status
#define MCM_ISCR_FUFC                            ((uint32_t)1 << 11)    // FPU Underflow Interrupt Status
#define MCM_ISCR_FIXC                            ((uint32_t)1 << 12)    // FPU Inexact Interrupt Status
#define MCM_ISCR_FIDC                            ((uint32_t)1 << 15)    // FPU Input Denormal Interrupt Status
#define MCM_ISCR_FIOCE                           ((uint32_t)1 << 24)    // FPU Invalid Operation Interrupt Enable
#define MCM_ISCR_FDZCE                           ((uint32_t)1 << 25)    // FPU Divide-by-Zero Interrupt Enable
#define MCM_ISCR_FOFCE                           ((uint32_t)1 << 26)    // FPU Overflow Interrupt Enable
#define MCM_ISCR_FUFCE                           ((uint32_t)1 << 27)    // FPU Underflow Interrupt Enable
#define MCM_ISCR_FIXCE                           ((uint32_t)1 << 28)    // FPU Inexact Interrupt Enable
#define MCM_ISCR_FIDCE                           ((uint32_t)1 << 31)    // FPU Input Denormal Interrupt Enable

    uint8_t _res1[28];
    uint32_t             PID;                                           // Process ID Register
                                                                        // M0_PID and M1_PID for MPU
#define MCM_PID_PID(_n)                          (((uint32_t)(_n) & 0xff) << 0)
#define MCM_PID_PID_INSERT(_v, _n)                   (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define MCM_PID_PID_EXTRACT(_v)                      (((_v) >> 0) & 0xff)

    uint8_t _res2[12];
    uint32_t             CPO;                                           // Compute Operation Control Register
#define MCM_CPO_CPOREQ                           ((uint32_t)1 << 0)     // Compute Operation Request
#define MCM_CPO_CPOACK                           ((uint32_t)1 << 1)     // Compute Operation Acknowledge
#define MCM_CPO_CPOWOI                           ((uint32_t)1 << 2)     // Compute Operation Wakeup On Interrupt

    uint8_t _res3[956];
    uint32_t             LMDR0;                                         // Local Memory Descriptor Register
                                                                        // Control Field 0 LMDR0[CF0] bit field is Reserved and Read-Only 0 for S32K11x variants.
#define MCM_LMDR0_CF0(_n)                        (((uint32_t)(_n) & 0xf) << 0)
#define MCM_LMDR0_CF0_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define MCM_LMDR0_CF0_EXTRACT(_v)                    (((_v) >> 0) & 0xf)
                                                                        // Memory Type
#define MCM_LMDR0_MT(_n)                         (((uint32_t)(_n) & 0x7) << 13)
#define MCM_LMDR0_MT_INSERT(_v, _n)                  (((_v) & ~0xe000) | ((uint32_t)(_n) & 0x7) << 13)
#define MCM_LMDR0_MT_EXTRACT(_v)                     (((_v) >> 13) & 0x7)
#define MCM_LMDR0_LOCK                           ((uint32_t)1 << 16)    // LOCK
                                                                        // LMEM Data Path Width. This field defines the width of the local memory.
#define MCM_LMDR0_DPW(_n)                        (((uint32_t)(_n) & 0x7) << 17)
#define MCM_LMDR0_DPW_INSERT(_v, _n)                 (((_v) & ~0xe0000) | ((uint32_t)(_n) & 0x7) << 17)
#define MCM_LMDR0_DPW_EXTRACT(_v)                    (((_v) >> 17) & 0x7)
                                                                        // Level 1 Cache Ways
#define MCM_LMDR0_WY(_n)                         (((uint32_t)(_n) & 0xf) << 20)
#define MCM_LMDR0_WY_INSERT(_v, _n)                  (((_v) & ~0xf00000) | ((uint32_t)(_n) & 0xf) << 20)
#define MCM_LMDR0_WY_EXTRACT(_v)                     (((_v) >> 20) & 0xf)
                                                                        // LMEM Size
#define MCM_LMDR0_LMSZ(_n)                       (((uint32_t)(_n) & 0xf) << 24)
#define MCM_LMDR0_LMSZ_INSERT(_v, _n)                (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define MCM_LMDR0_LMSZ_EXTRACT(_v)                   (((_v) >> 24) & 0xf)
#define MCM_LMDR0_LMSZH                          ((uint32_t)1 << 28)    // LMEM Size Hole
#define MCM_LMDR0_V                              ((uint32_t)1 << 31)    // Local Memory Valid

    uint32_t             LMDR1;                                         // Local Memory Descriptor Register
                                                                        // Control Field 0 LMDR0[CF0] bit field is Reserved and Read-Only 0 for S32K11x variants.
#define MCM_LMDR1_CF0(_n)                        (((uint32_t)(_n) & 0xf) << 0)
#define MCM_LMDR1_CF0_INSERT(_v, _n)                 (((_v) & ~0xf) | ((uint32_t)(_n) & 0xf) << 0)
#define MCM_LMDR1_CF0_EXTRACT(_v)                    (((_v) >> 0) & 0xf)
                                                                        // Memory Type
#define MCM_LMDR1_MT(_n)                         (((uint32_t)(_n) & 0x7) << 13)
#define MCM_LMDR1_MT_INSERT(_v, _n)                  (((_v) & ~0xe000) | ((uint32_t)(_n) & 0x7) << 13)
#define MCM_LMDR1_MT_EXTRACT(_v)                     (((_v) >> 13) & 0x7)
#define MCM_LMDR1_LOCK                           ((uint32_t)1 << 16)    // LOCK
                                                                        // LMEM Data Path Width. This field defines the width of the local memory.
#define MCM_LMDR1_DPW(_n)                        (((uint32_t)(_n) & 0x7) << 17)
#define MCM_LMDR1_DPW_INSERT(_v, _n)                 (((_v) & ~0xe0000) | ((uint32_t)(_n) & 0x7) << 17)
#define MCM_LMDR1_DPW_EXTRACT(_v)                    (((_v) >> 17) & 0x7)
                                                                        // Level 1 Cache Ways
#define MCM_LMDR1_WY(_n)                         (((uint32_t)(_n) & 0xf) << 20)
#define MCM_LMDR1_WY_INSERT(_v, _n)                  (((_v) & ~0xf00000) | ((uint32_t)(_n) & 0xf) << 20)
#define MCM_LMDR1_WY_EXTRACT(_v)                     (((_v) >> 20) & 0xf)
                                                                        // LMEM Size
#define MCM_LMDR1_LMSZ(_n)                       (((uint32_t)(_n) & 0xf) << 24)
#define MCM_LMDR1_LMSZ_INSERT(_v, _n)                (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define MCM_LMDR1_LMSZ_EXTRACT(_v)                   (((_v) >> 24) & 0xf)
#define MCM_LMDR1_LMSZH                          ((uint32_t)1 << 28)    // LMEM Size Hole
#define MCM_LMDR1_V                              ((uint32_t)1 << 31)    // Local Memory Valid

    uint32_t             LMDR2;                                         // Local Memory Descriptor Register2
                                                                        // Control Field 1
#define MCM_LMDR2_CF1(_n)                        (((uint32_t)(_n) & 0xf) << 4)
#define MCM_LMDR2_CF1_INSERT(_v, _n)                 (((_v) & ~0xf0) | ((uint32_t)(_n) & 0xf) << 4)
#define MCM_LMDR2_CF1_EXTRACT(_v)                    (((_v) >> 4) & 0xf)
                                                                        // Memory Type
#define MCM_LMDR2_MT(_n)                         (((uint32_t)(_n) & 0x7) << 13)
#define MCM_LMDR2_MT_INSERT(_v, _n)                  (((_v) & ~0xe000) | ((uint32_t)(_n) & 0x7) << 13)
#define MCM_LMDR2_MT_EXTRACT(_v)                     (((_v) >> 13) & 0x7)
#define MCM_LMDR2_LOCK                           ((uint32_t)1 << 16)    // LOCK
                                                                        // LMEM Data Path Width. This field defines the width of the local memory.
#define MCM_LMDR2_DPW(_n)                        (((uint32_t)(_n) & 0x7) << 17)
#define MCM_LMDR2_DPW_INSERT(_v, _n)                 (((_v) & ~0xe0000) | ((uint32_t)(_n) & 0x7) << 17)
#define MCM_LMDR2_DPW_EXTRACT(_v)                    (((_v) >> 17) & 0x7)
                                                                        // Level 1 Cache Ways
#define MCM_LMDR2_WY(_n)                         (((uint32_t)(_n) & 0xf) << 20)
#define MCM_LMDR2_WY_INSERT(_v, _n)                  (((_v) & ~0xf00000) | ((uint32_t)(_n) & 0xf) << 20)
#define MCM_LMDR2_WY_EXTRACT(_v)                     (((_v) >> 20) & 0xf)
                                                                        // LMEM Size
#define MCM_LMDR2_LMSZ(_n)                       (((uint32_t)(_n) & 0xf) << 24)
#define MCM_LMDR2_LMSZ_INSERT(_v, _n)                (((_v) & ~0xf000000) | ((uint32_t)(_n) & 0xf) << 24)
#define MCM_LMDR2_LMSZ_EXTRACT(_v)                   (((_v) >> 24) & 0xf)
#define MCM_LMDR2_LMSZH                          ((uint32_t)1 << 28)    // LMEM Size Hole
#define MCM_LMDR2_V                              ((uint32_t)1 << 31)    // Local Memory Valid

    uint8_t _res4[116];
    uint32_t             LMPECR;                                        // LMEM Parity and ECC Control Register
#define MCM_LMPECR_ERNCR                         ((uint32_t)1 << 0)     // Enable RAM ECC Noncorrectable Reporting This bit field is Reserved and Read-Only 0 for S32K11x variants. This bit field cannot mask ECC reporting, as a result the ECC would always be reported.
#define MCM_LMPECR_ER1BR                         ((uint32_t)1 << 8)     // Enable RAM ECC 1 Bit Reporting This bit field is Reserved and Read-Only 0 for S32K11x variants. This bit field cannot mask ECC reporting, as a result the ECC would always be reported.
#define MCM_LMPECR_ECPR                          ((uint32_t)1 << 20)    // Enable Cache Parity Reporting

    uint8_t _res5[4];
    uint32_t             LMPEIR;                                        // LMEM Parity and ECC Interrupt Register
                                                                        // ENCn = ECC Noncorrectable Error n
#define MCM_LMPEIR_ENC(_n)                       (((uint32_t)(_n) & 0xff) << 0)
#define MCM_LMPEIR_ENC_INSERT(_v, _n)                (((_v) & ~0xff) | ((uint32_t)(_n) & 0xff) << 0)
#define MCM_LMPEIR_ENC_EXTRACT(_v)                   (((_v) >> 0) & 0xff)
                                                                        // E1Bn = ECC 1-bit Error n
#define MCM_LMPEIR_E1B(_n)                       (((uint32_t)(_n) & 0xff) << 8)
#define MCM_LMPEIR_E1B_INSERT(_v, _n)                (((_v) & ~0xff00) | ((uint32_t)(_n) & 0xff) << 8)
#define MCM_LMPEIR_E1B_EXTRACT(_v)                   (((_v) >> 8) & 0xff)
                                                                        // Cache Parity Error
#define MCM_LMPEIR_PE(_n)                        (((uint32_t)(_n) & 0xff) << 16)
#define MCM_LMPEIR_PE_INSERT(_v, _n)                 (((_v) & ~0xff0000) | ((uint32_t)(_n) & 0xff) << 16)
#define MCM_LMPEIR_PE_EXTRACT(_v)                    (((_v) >> 16) & 0xff)
                                                                        // Parity or ECC Error Location
#define MCM_LMPEIR_PEELOC(_n)                    (((uint32_t)(_n) & 0x1f) << 24)
#define MCM_LMPEIR_PEELOC_INSERT(_v, _n)             (((_v) & ~0x1f000000) | ((uint32_t)(_n) & 0x1f) << 24)
#define MCM_LMPEIR_PEELOC_EXTRACT(_v)                (((_v) >> 24) & 0x1f)
#define MCM_LMPEIR_V                             ((uint32_t)1 << 31)    // Valid Bit

    uint8_t _res6[4];
    const uint32_t       LMFAR;                                         // LMEM Fault Address Register
    const uint32_t       LMFATR;                                        // LMEM Fault Attribute Register
                                                                        // Parity/ECC Fault Protection
#define MCM_LMFATR_PEFPRT_EXTRACT(_v)                (((_v) >> 0) & 0xf)
                                                                        // Parity/ECC Fault Master Size
#define MCM_LMFATR_PEFSIZE_EXTRACT(_v)               (((_v) >> 4) & 0x7)
#define MCM_LMFATR_PEFW                          ((uint32_t)1 << 7)     // Parity/ECC Fault Write
                                                                        // Parity/ECC Fault Master Number
#define MCM_LMFATR_PEFMST_EXTRACT(_v)                (((_v) >> 8) & 0xff)
#define MCM_LMFATR_OVR                           ((uint32_t)1 << 31)    // Overrun

    uint8_t _res7[8];
    const uint32_t       LMFDHR;                                        // LMEM Fault Data High Register
    const uint32_t       LMFDLR;                                        // LMEM Fault Data Low Register
} MCM_regs_t;
                                                                        // --------------------
                                                                        // Local Memory Controller
typedef struct                                                          // --------------------
{
    uint32_t             LMEM_PCCCR;                                    // Cache control register
#define LMEM_LMEM_PCCCR_ENCACHE                  ((uint32_t)1 << 0)     // Cache enable
#define LMEM_LMEM_PCCCR_PCCR2                    ((uint32_t)1 << 2)     // Forces all cacheable spaces to write through
#define LMEM_LMEM_PCCCR_PCCR3                    ((uint32_t)1 << 3)     // Forces no allocation on cache misses (must also have PCCR2 asserted)
#define LMEM_LMEM_PCCCR_INVW0                    ((uint32_t)1 << 24)    // Invalidate Way 0
#define LMEM_LMEM_PCCCR_PUSHW0                   ((uint32_t)1 << 25)    // Push Way 0
#define LMEM_LMEM_PCCCR_INVW1                    ((uint32_t)1 << 26)    // Invalidate Way 1
#define LMEM_LMEM_PCCCR_PUSHW1                   ((uint32_t)1 << 27)    // Push Way 1
#define LMEM_LMEM_PCCCR_GO                       ((uint32_t)1 << 31)    // Initiate Cache Command

    uint32_t             LMEM_PCCLCR;                                   // Cache line control register
#define LMEM_LMEM_PCCLCR_LGO                     ((uint32_t)1 << 0)     // Initiate Cache Line Command
                                                                        // Cache address
#define LMEM_LMEM_PCCLCR_CACHEADDR(_n)           (((uint32_t)(_n) & 0xfff) << 2)
#define LMEM_LMEM_PCCLCR_CACHEADDR_INSERT(_v, _n)    (((_v) & ~0x3ffc) | ((uint32_t)(_n) & 0xfff) << 2)
#define LMEM_LMEM_PCCLCR_CACHEADDR_EXTRACT(_v)       (((_v) >> 2) & 0xfff)
#define LMEM_LMEM_PCCLCR_WSEL                    ((uint32_t)1 << 14)    // Way select
#define LMEM_LMEM_PCCLCR_TDSEL                   ((uint32_t)1 << 16)    // Tag/Data Select
#define LMEM_LMEM_PCCLCR_LCIVB                   ((uint32_t)1 << 20)    // Line Command Initial Valid Bit
#define LMEM_LMEM_PCCLCR_LCIMB                   ((uint32_t)1 << 21)    // Line Command Initial Modified Bit
#define LMEM_LMEM_PCCLCR_LCWAY                   ((uint32_t)1 << 22)    // Line Command Way
                                                                        // Line Command
#define LMEM_LMEM_PCCLCR_LCMD(_n)                (((uint32_t)(_n) & 0x3) << 24)
#define LMEM_LMEM_PCCLCR_LCMD_INSERT(_v, _n)         (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define LMEM_LMEM_PCCLCR_LCMD_EXTRACT(_v)            (((_v) >> 24) & 0x3)
#define LMEM_LMEM_PCCLCR_LADSEL                  ((uint32_t)1 << 26)    // Line Address Select
#define LMEM_LMEM_PCCLCR_LACC                    ((uint32_t)1 << 27)    // Line access type

    uint32_t             LMEM_PCCSAR;                                   // Cache search address register
#define LMEM_LMEM_PCCSAR_LGO                     ((uint32_t)1 << 0)     // Initiate Cache Line Command
                                                                        // Physical Address
#define LMEM_LMEM_PCCSAR_PHYADDR(_n)             (((uint32_t)(_n) & 0x3fffffff) << 2)
#define LMEM_LMEM_PCCSAR_PHYADDR_INSERT(_v, _n)      (((_v) & ~0xfffffffc) | ((uint32_t)(_n) & 0x3fffffff) << 2)
#define LMEM_LMEM_PCCSAR_PHYADDR_EXTRACT(_v)         (((_v) >> 2) & 0x3fffffff)

    uint32_t             LMEM_PCCCVR;                                   // Cache read/write value register
    uint8_t _res0[16];
    uint32_t             PCCRMR;                                        // Cache regions mode register
                                                                        // Region 15 mode
#define LMEM_PCCRMR_R15(_n)                      (((uint32_t)(_n) & 0x3) << 0)
#define LMEM_PCCRMR_R15_INSERT(_v, _n)               (((_v) & ~0x3) | ((uint32_t)(_n) & 0x3) << 0)
#define LMEM_PCCRMR_R15_EXTRACT(_v)                  (((_v) >> 0) & 0x3)
                                                                        // Region 14 mode
#define LMEM_PCCRMR_R14(_n)                      (((uint32_t)(_n) & 0x3) << 2)
#define LMEM_PCCRMR_R14_INSERT(_v, _n)               (((_v) & ~0xc) | ((uint32_t)(_n) & 0x3) << 2)
#define LMEM_PCCRMR_R14_EXTRACT(_v)                  (((_v) >> 2) & 0x3)
                                                                        // Region 13 mode
#define LMEM_PCCRMR_R13(_n)                      (((uint32_t)(_n) & 0x3) << 4)
#define LMEM_PCCRMR_R13_INSERT(_v, _n)               (((_v) & ~0x30) | ((uint32_t)(_n) & 0x3) << 4)
#define LMEM_PCCRMR_R13_EXTRACT(_v)                  (((_v) >> 4) & 0x3)
                                                                        // Region 12 mode
#define LMEM_PCCRMR_R12(_n)                      (((uint32_t)(_n) & 0x3) << 6)
#define LMEM_PCCRMR_R12_INSERT(_v, _n)               (((_v) & ~0xc0) | ((uint32_t)(_n) & 0x3) << 6)
#define LMEM_PCCRMR_R12_EXTRACT(_v)                  (((_v) >> 6) & 0x3)
                                                                        // Region 11 mode
#define LMEM_PCCRMR_R11(_n)                      (((uint32_t)(_n) & 0x3) << 8)
#define LMEM_PCCRMR_R11_INSERT(_v, _n)               (((_v) & ~0x300) | ((uint32_t)(_n) & 0x3) << 8)
#define LMEM_PCCRMR_R11_EXTRACT(_v)                  (((_v) >> 8) & 0x3)
                                                                        // Region 10 mode
#define LMEM_PCCRMR_R10(_n)                      (((uint32_t)(_n) & 0x3) << 10)
#define LMEM_PCCRMR_R10_INSERT(_v, _n)               (((_v) & ~0xc00) | ((uint32_t)(_n) & 0x3) << 10)
#define LMEM_PCCRMR_R10_EXTRACT(_v)                  (((_v) >> 10) & 0x3)
                                                                        // Region 9 mode
#define LMEM_PCCRMR_R9(_n)                       (((uint32_t)(_n) & 0x3) << 12)
#define LMEM_PCCRMR_R9_INSERT(_v, _n)                (((_v) & ~0x3000) | ((uint32_t)(_n) & 0x3) << 12)
#define LMEM_PCCRMR_R9_EXTRACT(_v)                   (((_v) >> 12) & 0x3)
                                                                        // Region 8 mode
#define LMEM_PCCRMR_R8(_n)                       (((uint32_t)(_n) & 0x3) << 14)
#define LMEM_PCCRMR_R8_INSERT(_v, _n)                (((_v) & ~0xc000) | ((uint32_t)(_n) & 0x3) << 14)
#define LMEM_PCCRMR_R8_EXTRACT(_v)                   (((_v) >> 14) & 0x3)
                                                                        // Region 7 mode
#define LMEM_PCCRMR_R7(_n)                       (((uint32_t)(_n) & 0x3) << 16)
#define LMEM_PCCRMR_R7_INSERT(_v, _n)                (((_v) & ~0x30000) | ((uint32_t)(_n) & 0x3) << 16)
#define LMEM_PCCRMR_R7_EXTRACT(_v)                   (((_v) >> 16) & 0x3)
                                                                        // Region 6 mode
#define LMEM_PCCRMR_R6(_n)                       (((uint32_t)(_n) & 0x3) << 18)
#define LMEM_PCCRMR_R6_INSERT(_v, _n)                (((_v) & ~0xc0000) | ((uint32_t)(_n) & 0x3) << 18)
#define LMEM_PCCRMR_R6_EXTRACT(_v)                   (((_v) >> 18) & 0x3)
                                                                        // Region 5 mode
#define LMEM_PCCRMR_R5(_n)                       (((uint32_t)(_n) & 0x3) << 20)
#define LMEM_PCCRMR_R5_INSERT(_v, _n)                (((_v) & ~0x300000) | ((uint32_t)(_n) & 0x3) << 20)
#define LMEM_PCCRMR_R5_EXTRACT(_v)                   (((_v) >> 20) & 0x3)
                                                                        // Region 4 mode
#define LMEM_PCCRMR_R4(_n)                       (((uint32_t)(_n) & 0x3) << 22)
#define LMEM_PCCRMR_R4_INSERT(_v, _n)                (((_v) & ~0xc00000) | ((uint32_t)(_n) & 0x3) << 22)
#define LMEM_PCCRMR_R4_EXTRACT(_v)                   (((_v) >> 22) & 0x3)
                                                                        // Region 3 mode
#define LMEM_PCCRMR_R3(_n)                       (((uint32_t)(_n) & 0x3) << 24)
#define LMEM_PCCRMR_R3_INSERT(_v, _n)                (((_v) & ~0x3000000) | ((uint32_t)(_n) & 0x3) << 24)
#define LMEM_PCCRMR_R3_EXTRACT(_v)                   (((_v) >> 24) & 0x3)
                                                                        // Region 2 mode
#define LMEM_PCCRMR_R2(_n)                       (((uint32_t)(_n) & 0x3) << 26)
#define LMEM_PCCRMR_R2_INSERT(_v, _n)                (((_v) & ~0xc000000) | ((uint32_t)(_n) & 0x3) << 26)
#define LMEM_PCCRMR_R2_EXTRACT(_v)                   (((_v) >> 26) & 0x3)
                                                                        // Region 1 mode
#define LMEM_PCCRMR_R1(_n)                       (((uint32_t)(_n) & 0x3) << 28)
#define LMEM_PCCRMR_R1_INSERT(_v, _n)                (((_v) & ~0x30000000) | ((uint32_t)(_n) & 0x3) << 28)
#define LMEM_PCCRMR_R1_EXTRACT(_v)                   (((_v) >> 28) & 0x3)
                                                                        // Region 0 mode
#define LMEM_PCCRMR_R0(_n)                       (((uint32_t)(_n) & 0x3) << 30)
#define LMEM_PCCRMR_R0_INSERT(_v, _n)                (((_v) & ~0xc0000000) | ((uint32_t)(_n) & 0x3) << 30)
#define LMEM_PCCRMR_R0_EXTRACT(_v)                   (((_v) >> 30) & 0x3)

} LMEM_regs_t;

#define CSE_PRAM         ((volatile CSE_PRAM_regs_t *)0x14001000U)
#define AIPS             ((volatile AIPS_regs_t *)0x40000000U)
#define MSCM             ((volatile MSCM_regs_t *)0x40001000U)
#define DMA              ((volatile DMA_regs_t *)0x40008000U)
#define MPU              ((volatile MPU_regs_t *)0x4000d000U)
#define ERM              ((volatile ERM_regs_t *)0x40018000U)
#define EIM              ((volatile EIM_regs_t *)0x40019000U)
#define FTFC             ((volatile FTFC_regs_t *)0x40020000U)
#define DMAMUX           ((volatile DMAMUX_regs_t *)0x40021000U)
#define CAN0             ((volatile CAN_regs_t *)0x40024000U)
#define CAN1             ((volatile CAN_regs_t *)0x40025000U)
#define CAN2             ((volatile CAN_regs_t *)0x4002b000U)
#define FTM0             ((volatile FTM_regs_t *)0x40038000U)
#define FTM1             ((volatile FTM_regs_t *)0x40039000U)
#define FTM2             ((volatile FTM_regs_t *)0x4003a000U)
#define FTM3             ((volatile FTM_regs_t *)0x40026000U)
#define ADC0             ((volatile ADC_regs_t *)0x4003b000U)
#define ADC1             ((volatile ADC_regs_t *)0x40027000U)
#define LPSPI0           ((volatile LPSPI_regs_t *)0x4002c000U)
#define LPSPI1           ((volatile LPSPI_regs_t *)0x4002d000U)
#define LPSPI2           ((volatile LPSPI_regs_t *)0x4002e000U)
#define PDB0             ((volatile PDB_regs_t *)0x40036000U)
#define PDB1             ((volatile PDB_regs_t *)0x40031000U)
#define CRC              ((volatile CRC_regs_t *)0x40032000U)
#define LPIT0            ((volatile LPIT0_regs_t *)0x40037000U)
#define RTC              ((volatile RTC_regs_t *)0x4003d000U)
#define LPTMR0           ((volatile LPTMR0_regs_t *)0x40040000U)
#define SIM              ((volatile SIM_regs_t *)0x40048000U)
#define PORTA            ((volatile PORT_regs_t *)0x40049000U)
#define PORTB            ((volatile PORT_regs_t *)0x4004a000U)
#define PORTC            ((volatile PORT_regs_t *)0x4004b000U)
#define PORTD            ((volatile PORT_regs_t *)0x4004c000U)
#define PORTE            ((volatile PORT_regs_t *)0x4004d000U)
#define WDOG             ((volatile WDOG_regs_t *)0x40052000U)
#define FLEXIO           ((volatile FLEXIO_regs_t *)0x4005a000U)
#define EWM              ((volatile EWM_regs_t *)0x40061000U)
#define TRGMUX           ((volatile TRGMUX_regs_t *)0x40063000U)
#define SCG              ((volatile SCG_regs_t *)0x40064000U)
#define PCC              ((volatile PCC_regs_t *)0x40065000U)
#define LPI2C0           ((volatile LPI2C0_regs_t *)0x40066000U)
#define LPUART0          ((volatile LPUART_regs_t *)0x4006a000U)
#define LPUART1          ((volatile LPUART_regs_t *)0x4006b000U)
#define LPUART2          ((volatile LPUART_regs_t *)0x4006c000U)
#define CMP0             ((volatile CMP0_regs_t *)0x40073000U)
#define PMC              ((volatile PMC_regs_t *)0x4007d000U)
#define SMC              ((volatile SMC_regs_t *)0x4007e000U)
#define RCM              ((volatile RCM_regs_t *)0x4007f000U)
#define PTA              ((volatile PT_regs_t *)0x400ff000U)
#define PTB              ((volatile PT_regs_t *)0x400ff040U)
#define PTC              ((volatile PT_regs_t *)0x400ff080U)
#define PTD              ((volatile PT_regs_t *)0x400ff0c0U)
#define PTE              ((volatile PT_regs_t *)0x400ff100U)
#define S32_SCB          ((volatile S32_SCB_regs_t *)0xe000e000U)
#define S32_SysTick      ((volatile S32_SysTick_regs_t *)0xe000e010U)
#define S32_NVIC         ((volatile S32_NVIC_regs_t *)0xe000e100U)
#define MCM              ((volatile MCM_regs_t *)0xe0080000U)
#define LMEM             ((volatile LMEM_regs_t *)0xe0082000U)

